{
	"id": "3f33e67bbeb0d5071ebe1a39a8d3031c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"Connect4Stakes.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/**\n * Connect4Stakes\n * - Creator opens a match with an ERC-20 stake\n * - Opponent joins by matching the stake\n * - Winner is finalized either by:\n *    (a) both players submitting the same winner (mutual confirmation), or\n *    (b) an authorized referee (per-match resolver or global resolver/owner)\n * - Deadlines prevent stuck funds:\n *    - If nobody joins by startDeadline => creator refunds\n *    - If not resolved by resolveDeadline => each player can withdraw their own stake\n * - Optional platform fee (bps) taken from total pot on payout\n * - EIP-2612 permit helper for creator UX\n */\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\n\ncontract Connect4Stakes is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // ------------------------- Types -------------------------\n    enum Status {\n        Created,   // creator deposited; waiting for opponent\n        Started,   // both deposited; in play\n        Resolved,  // winner decided; pot paid\n        Refunded   // funds returned (no winner)\n    }\n\n    struct Match {\n        // identities\n        address creator;\n        address opponent;        // if zero, it's an open challenge\n        address token;           // ERC-20 used\n        // money/time\n        uint96  stake;           // per player\n        uint40  createdAt;\n        uint40  startDeadline;   // opponent must join by this time\n        uint40  resolveDeadline; // match must be resolved by this time once started\n        uint32  resolveWindow;   // seconds to use for resolveDeadline once started\n        // control\n        address resolver;        // optional per-match referee\n        uint16  feeBps;          // snapshot of fee at creation\n        Status  status;\n        address winner;          // set when Resolved\n        // mutual confirmation votes\n        address creatorVote;     // zero if no vote; else submitted winner address\n        address opponentVote;    // zero if no vote; else submitted winner address\n    }\n\n    // ------------------------- Config -------------------------\n    address public feeRecipient;\n    uint16  public defaultFeeBps = 0;   // can be 0\n    uint16  public maxFeeBps = 500;     // <= 5% cap\n\n    mapping(address => bool) public isResolver; // global referees\n\n    // ------------------------- Storage -------------------------\n    uint256 public nextMatchId = 1;\n    mapping(uint256 => Match) public matches;\n    mapping(uint256 => mapping(address => bool)) public withdrawnAfterTimeout; // id => player => withdrew?\n\n    // ------------------------- Events -------------------------\n    event MatchCreated(\n        uint256 indexed id,\n        address indexed creator,\n        address indexed token,\n        uint256 stake,\n        address opponent,\n        uint256 startDeadline,\n        uint256 resolveWindow,\n        address resolver\n    );\n    event MatchJoined(uint256 indexed id, address indexed opponent, uint256 resolveDeadline);\n    event MatchResultSubmitted(uint256 indexed id, address indexed submitter, address winner);\n    event MatchResolved(uint256 indexed id, address indexed winner, uint256 prize, uint256 fee);\n    event MatchRefunded(uint256 indexed id);\n    event ResolverSet(address indexed resolver, bool allowed);\n    event FeesUpdated(address indexed recipient, uint16 defaultFeeBps, uint16 maxFeeBps);\n\n    // ------------------------- Constructor -------------------------\n    constructor(address _feeRecipient) Ownable(msg.sender) {\n        feeRecipient = _feeRecipient;\n    }\n\n    // ------------------------- Admin -------------------------\n    function setResolver(address account, bool allowed) external onlyOwner {\n        isResolver[account] = allowed;\n        emit ResolverSet(account, allowed);\n    }\n\n    function setFees(address recipient, uint16 _defaultFeeBps, uint16 _maxFeeBps) external onlyOwner {\n        require(_maxFeeBps <= 1000, \"max >10%\");\n        require(_defaultFeeBps <= _maxFeeBps, \"default > max\");\n        feeRecipient = recipient;\n        defaultFeeBps = _defaultFeeBps;\n        maxFeeBps = _maxFeeBps;\n        emit FeesUpdated(recipient, _defaultFeeBps, _maxFeeBps);\n    }\n\n    // ------------------------- Create / Join -------------------------\n\n    /**\n     * @notice Create a match (creator must approve this contract for `stake` first, unless using permit).\n     * @param token ERC-20 token address for stakes\n     * @param stake Amount each player must deposit (same token decimals for both)\n     * @param opponent If nonzero, only this address may join. Zero => open challenge\n     * @param startDeadlineSec Seconds from now for the join window (>= 60)\n     * @param resolveWindowSec Seconds allowed for resolution after opponent joins (>= 300)\n     * @param resolver Optional per-match referee (can be zero)\n     */\n    function createMatch(\n        address token,\n        uint96  stake,\n        address opponent,\n        uint32  startDeadlineSec,\n        uint32  resolveWindowSec,\n        address resolver\n    ) external nonReentrant returns (uint256 id) {\n        _validateCreate(stake, startDeadlineSec, resolveWindowSec);\n\n        id = nextMatchId++;\n        Match storage m = matches[id];\n        m.creator = msg.sender;\n        m.opponent = opponent;\n        m.token = token;\n        m.stake = stake;\n        m.createdAt = uint40(block.timestamp);\n        m.startDeadline = uint40(block.timestamp + startDeadlineSec);\n        m.resolveWindow = resolveWindowSec;\n        m.resolver = resolver;\n        m.status = Status.Created;\n        m.feeBps = defaultFeeBps;\n\n        // pull creator stake\n        IERC20(token).safeTransferFrom(msg.sender, address(this), stake);\n\n        emit MatchCreated(\n            id, msg.sender, token, stake, opponent, m.startDeadline, m.resolveWindow, resolver\n        );\n    }\n\n    /**\n     * @notice Same as createMatch but uses EIP-2612 permit so the creator can skip an approve tx.\n     */\n    function createMatchWithPermit(\n        address token,\n        uint96  stake,\n        address opponent,\n        uint32  startDeadlineSec,\n        uint32  resolveWindowSec,\n        address resolver,\n        uint256 permitValue,\n        uint256 permitDeadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external nonReentrant returns (uint256 id) {\n        _validateCreate(stake, startDeadlineSec, resolveWindowSec);\n\n        // authorize this contract to pull creator's funds\n        IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s);\n        require(permitValue >= stake, \"permit < stake\");\n\n        id = nextMatchId++;\n        Match storage m = matches[id];\n        m.creator = msg.sender;\n        m.opponent = opponent;\n        m.token = token;\n        m.stake = stake;\n        m.createdAt = uint40(block.timestamp);\n        m.startDeadline = uint40(block.timestamp + startDeadlineSec);\n        m.resolveWindow = resolveWindowSec;\n        m.resolver = resolver;\n        m.status = Status.Created;\n        m.feeBps = defaultFeeBps;\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), stake);\n\n        emit MatchCreated(\n            id, msg.sender, token, stake, opponent, m.startDeadline, m.resolveWindow, resolver\n        );\n    }\n\n    function _validateCreate(uint96 stake, uint32 startDeadlineSec, uint32 resolveWindowSec) internal pure {\n        require(stake > 0, \"stake = 0\");\n        require(startDeadlineSec >= 60, \"join window too short\");\n        require(resolveWindowSec >= 300, \"resolve window too short\");\n    }\n\n    /**\n     * @notice Opponent joins an existing match by depositing the same stake.\n     *         If opponent was unspecified (open challenge), the caller becomes opponent.\n     */\n    function joinMatch(uint256 id) external nonReentrant {\n        Match storage m = matches[id];\n        require(m.status == Status.Created, \"not joinable\");\n        require(block.timestamp <= m.startDeadline, \"join window over\");\n\n        if (m.opponent != address(0)) {\n            require(msg.sender == m.opponent, \"not invited\");\n        } else {\n            m.opponent = msg.sender;\n        }\n\n        IERC20(m.token).safeTransferFrom(msg.sender, address(this), m.stake);\n\n        m.status = Status.Started;\n        m.resolveDeadline = uint40(block.timestamp + m.resolveWindow);\n\n        emit MatchJoined(id, m.opponent, m.resolveDeadline);\n    }\n\n    // ------------------------- Result & Resolution -------------------------\n\n    /**\n     * @notice Players submit their view of the winner. If both match, payout immediately.\n     * @param id Match id\n     * @param winner Claimed winner (must be creator or opponent)\n     */\n    function submitResult(uint256 id, address winner) external nonReentrant {\n        Match storage m = matches[id];\n        require(m.status == Status.Started, \"not started\");\n        require(block.timestamp <= m.resolveDeadline, \"resolution window over\");\n        require(winner == m.creator || winner == m.opponent, \"invalid winner\");\n        require(msg.sender == m.creator || msg.sender == m.opponent, \"not a player\");\n\n        if (msg.sender == m.creator) {\n            m.creatorVote = winner;\n        } else {\n            m.opponentVote = winner;\n        }\n\n        emit MatchResultSubmitted(id, msg.sender, winner);\n\n        if (m.creatorVote != address(0) && m.creatorVote == m.opponentVote) {\n            _payout(id, winner);\n        }\n    }\n\n    /**\n     * @notice Referee path: per-match resolver, global resolver, or owner can finalize anytime after start.\n     */\n    function resolveByReferee(uint256 id, address winner) external nonReentrant {\n        Match storage m = matches[id];\n        require(m.status == Status.Started, \"not started\");\n        require(\n            msg.sender == m.resolver || isResolver[msg.sender] || msg.sender == owner(),\n            \"not authorized\"\n        );\n        require(winner == m.creator || winner == m.opponent, \"invalid winner\");\n        _payout(id, winner);\n    }\n\n    // ------------------------- Refunds / Safety Rails -------------------------\n\n    /**\n     * @notice If nobody joined by startDeadline, creator refunds their stake.\n     */\n    function refundIfUnjoined(uint256 id) external nonReentrant {\n        Match storage m = matches[id];\n        require(m.status == Status.Created, \"wrong status\");\n        require(block.timestamp > m.startDeadline, \"join window not over\");\n        require(msg.sender == m.creator, \"only creator\");\n\n        m.status = Status.Refunded;\n        IERC20(m.token).safeTransfer(m.creator, m.stake);\n        emit MatchRefunded(id);\n    }\n\n    /**\n     * @notice If a started match wasn't resolved by resolveDeadline, each player can withdraw their own stake.\n     *         When both have withdrawn, status flips to Refunded.\n     */\n    function withdrawAfterTimeout(uint256 id) external nonReentrant {\n        Match storage m = matches[id];\n        require(m.status == Status.Started, \"wrong status\");\n        require(block.timestamp > m.resolveDeadline, \"resolve window not over\");\n        require(msg.sender == m.creator || msg.sender == m.opponent, \"not a player\");\n        require(!withdrawnAfterTimeout[id][msg.sender], \"already withdrawn\");\n\n        withdrawnAfterTimeout[id][msg.sender] = true;\n        IERC20(m.token).safeTransfer(msg.sender, m.stake);\n\n        if (withdrawnAfterTimeout[id][m.creator] && withdrawnAfterTimeout[id][m.opponent]) {\n            m.status = Status.Refunded;\n            emit MatchRefunded(id);\n        }\n    }\n\n    // ------------------------- Views -------------------------\n    function getMatch(uint256 id) external view returns (Match memory) {\n        return matches[id];\n    }\n\n    function pot(uint256 id) public view returns (uint256) {\n        Match storage m = matches[id];\n        if (m.status == Status.Created) return uint256(m.stake);      // only creator funded\n        if (m.status == Status.Started) return uint256(m.stake) * 2;  // both funded\n        return 0;\n    }\n\n    // ------------------------- Internal -------------------------\n    function _payout(uint256 id, address winner) internal {\n        Match storage m = matches[id];\n        require(m.status == Status.Started, \"not active\");\n        m.status = Status.Resolved;\n        m.winner = winner;\n\n        uint256 total = uint256(m.stake) * 2;\n        uint256 fee = 0;\n\n        if (feeRecipient != address(0) && m.feeBps > 0) {\n            require(m.feeBps <= maxFeeBps, \"fee > max\");\n            fee = (total * m.feeBps) / 10_000;\n            IERC20(m.token).safeTransfer(feeRecipient, fee);\n        }\n\n        uint256 prize = total - fee;\n        IERC20(m.token).safeTransfer(winner, prize);\n\n        emit MatchResolved(id, winner, prize, fee);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"IERC1363": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"approveAndCall(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"approveAndCall(address,uint256,bytes)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `spender`.",
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferAndCall(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferAndCall(address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFromAndCall(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFromAndCall(address,address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							}
						},
						"title": "IERC1363",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"approveAndCall(address,uint256)": "3177029f",
							"approveAndCall(address,uint256,bytes)": "cae9ca51",
							"balanceOf(address)": "70a08231",
							"supportsInterface(bytes4)": "01ffc9a7",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAndCall(address,uint256)": "1296ee62",
							"transferAndCall(address,uint256,bytes)": "4000aea0",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferFromAndCall(address,address,uint256)": "d8fbe994",
							"transferFromAndCall(address,address,uint256,bytes)": "c1d34b89"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 248,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x2fa0657dd7b8bc75475a47f64bc04a9adb42236b15d65e6781594ea69a46c3e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7496f42681aed94bf0142a077324e50b86046610c1724e7c12e96cf1c365914a\",\"dweb:/ipfs/QmZvhNdSAAbN4PKPdheAqwpXukUiXp3Q3TdQccDMg2NDTV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xFDC9AC7DCDE7D0D9E24A3DAE CREATE2 PUSH0 0xE1 0xE4 0xD0 MLOAD SHL AND DUP7 0x4F LOG1 PC CALLDATALOAD 0xCB 0xA9 BLOCKHASH 0x2B 0xD7 SLOAD PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "698:9376:7:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xFDC9AC7DCDE7D0D9E24A3DAE CREATE2 PUSH0 0xE1 0xE4 0xD0 MLOAD SHL AND DUP7 0x4F LOG1 PC CALLDATALOAD 0xCB 0xA9 BLOCKHASH 0x2B 0xD7 SLOAD PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "698:9376:7:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite",
								"transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)": "infinite",
								"trySafeTransfer(contract IERC20,address,uint256)": "infinite",
								"trySafeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "library_deploy_address"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "RETURN",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "REVERT",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033",
									".code": [
										{
											"begin": 698,
											"end": 10074,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"Connect4Stakes.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Connect4Stakes.sol": {
				"Connect4Stakes": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_feeRecipient",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "defaultFeeBps",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "maxFeeBps",
									"type": "uint16"
								}
							],
							"name": "FeesUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "creator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "stake",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "opponent",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "startDeadline",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "resolveWindow",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "resolver",
									"type": "address"
								}
							],
							"name": "MatchCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "opponent",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "resolveDeadline",
									"type": "uint256"
								}
							],
							"name": "MatchJoined",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "MatchRefunded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "winner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "prize",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "fee",
									"type": "uint256"
								}
							],
							"name": "MatchResolved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "submitter",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "winner",
									"type": "address"
								}
							],
							"name": "MatchResultSubmitted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "resolver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "allowed",
									"type": "bool"
								}
							],
							"name": "ResolverSet",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint96",
									"name": "stake",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "opponent",
									"type": "address"
								},
								{
									"internalType": "uint32",
									"name": "startDeadlineSec",
									"type": "uint32"
								},
								{
									"internalType": "uint32",
									"name": "resolveWindowSec",
									"type": "uint32"
								},
								{
									"internalType": "address",
									"name": "resolver",
									"type": "address"
								}
							],
							"name": "createMatch",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint96",
									"name": "stake",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "opponent",
									"type": "address"
								},
								{
									"internalType": "uint32",
									"name": "startDeadlineSec",
									"type": "uint32"
								},
								{
									"internalType": "uint32",
									"name": "resolveWindowSec",
									"type": "uint32"
								},
								{
									"internalType": "address",
									"name": "resolver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "permitValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "permitDeadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "createMatchWithPermit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultFeeBps",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeRecipient",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "getMatch",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "creator",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "opponent",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										},
										{
											"internalType": "uint96",
											"name": "stake",
											"type": "uint96"
										},
										{
											"internalType": "uint40",
											"name": "createdAt",
											"type": "uint40"
										},
										{
											"internalType": "uint40",
											"name": "startDeadline",
											"type": "uint40"
										},
										{
											"internalType": "uint40",
											"name": "resolveDeadline",
											"type": "uint40"
										},
										{
											"internalType": "uint32",
											"name": "resolveWindow",
											"type": "uint32"
										},
										{
											"internalType": "address",
											"name": "resolver",
											"type": "address"
										},
										{
											"internalType": "uint16",
											"name": "feeBps",
											"type": "uint16"
										},
										{
											"internalType": "enum Connect4Stakes.Status",
											"name": "status",
											"type": "uint8"
										},
										{
											"internalType": "address",
											"name": "winner",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "creatorVote",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "opponentVote",
											"type": "address"
										}
									],
									"internalType": "struct Connect4Stakes.Match",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "isResolver",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "joinMatch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "matches",
							"outputs": [
								{
									"internalType": "address",
									"name": "creator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "opponent",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint96",
									"name": "stake",
									"type": "uint96"
								},
								{
									"internalType": "uint40",
									"name": "createdAt",
									"type": "uint40"
								},
								{
									"internalType": "uint40",
									"name": "startDeadline",
									"type": "uint40"
								},
								{
									"internalType": "uint40",
									"name": "resolveDeadline",
									"type": "uint40"
								},
								{
									"internalType": "uint32",
									"name": "resolveWindow",
									"type": "uint32"
								},
								{
									"internalType": "address",
									"name": "resolver",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "feeBps",
									"type": "uint16"
								},
								{
									"internalType": "enum Connect4Stakes.Status",
									"name": "status",
									"type": "uint8"
								},
								{
									"internalType": "address",
									"name": "winner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "creatorVote",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "opponentVote",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxFeeBps",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nextMatchId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "pot",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "refundIfUnjoined",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "winner",
									"type": "address"
								}
							],
							"name": "resolveByReferee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "_defaultFeeBps",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "_maxFeeBps",
									"type": "uint16"
								}
							],
							"name": "setFees",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "allowed",
									"type": "bool"
								}
							],
							"name": "setResolver",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "winner",
									"type": "address"
								}
							],
							"name": "submitResult",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "withdrawAfterTimeout",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "withdrawnAfterTimeout",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"createMatch(address,uint96,address,uint32,uint32,address)": {
								"params": {
									"opponent": "If nonzero, only this address may join. Zero => open challenge",
									"resolveWindowSec": "Seconds allowed for resolution after opponent joins (>= 300)",
									"resolver": "Optional per-match referee (can be zero)",
									"stake": "Amount each player must deposit (same token decimals for both)",
									"startDeadlineSec": "Seconds from now for the join window (>= 60)",
									"token": "ERC-20 token address for stakes"
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"submitResult(uint256,address)": {
								"params": {
									"id": "Match id",
									"winner": "Claimed winner (must be creator or opponent)"
								}
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n  0x80\n  jumpi(tag_7, callvalue)\n  0x1f\n  bytecodeSize\n  codesize\n  dup2\n  swap1\n  sub\n  swap2\n  dup3\n  add\n  not(0x1f)\n  and\n  dup4\n  add\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  dup4\n  gt\n  dup5\n  dup5\n  lt\n  or\n  tag_3\n  jumpi\n  dup1\n  dup5\n  swap3\n  0x20\n  swap5\n  0x40\n  mstore\n  dup4\n  codecopy\n  dup2\n  add\n  sub\n  slt\n  tag_7\n  jumpi\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n  dup2\n  and\n  swap1\n  dup2\n  swap1\n  sub\n  tag_7\n  jumpi\n    /* \"Connect4Stakes.sol\":3701:3711  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  iszero\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_9\n  jumpi\n  0x00\n    /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n  dup1\n  sload\n    /* \"Connect4Stakes.sol\":3701:3711  msg.sender */\n  caller\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n  dup3\n  and\n  dup2\n  or\n  dup4\n  sstore\n  mload(0x40)\n  swap4\n  swap3\n    /* \"Connect4Stakes.sol\":3701:3711  msg.sender */\n  swap1\n  swap2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n  and\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n  dup1\n  log3\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n  0x01\n    /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n  dup1\n  dup1\n  sstore\n    /* \"Connect4Stakes.sol\":2376:2377  0 */\n  0x02\n    /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n  dup1\n  sload\n    /* \"Connect4Stakes.sol\":2615:2616  1 */\n  0x04\n    /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n  swap3\n  swap1\n  swap3\n  sstore\n  not(sub(shl(0xc0, 0x01), 0x01))\n  swap1\n  swap2\n  and\n  swap1\n  swap2\n  or\n  shl(0xb2, 0x7d)\n  or\n  swap1\n  sstore\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_9:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mstore(0x00, shl(0xe0, 0x1e4fbdf7))\n  0x00\n  0x04\n    /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n  mstore\n  0x24\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  revert\n    /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\ntag_7:\n  0x00\n  dup1\n  revert\ntag_3:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\nstop\n\nsub_0: assembly {\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_30, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_30:\n      0x00\n      dup1\n      calldataload\n      0xe0\n      shr\n      dup1\n      0x1da6ed7c\n      eq\n      tag_32\n      jumpi\n      dup1\n      0x3d092b3d\n      eq\n      tag_34\n      jumpi\n      dup1\n      0x45c67d86\n      eq\n      tag_36\n      jumpi\n      dup1\n      0x46904840\n      eq\n      tag_38\n      jumpi\n      dup1\n      0x4768d4ef\n      eq\n      tag_40\n      jumpi\n      dup1\n      0x4e55a1c2\n      eq\n      tag_42\n      jumpi\n      dup1\n      0x63feb74e\n      eq\n      tag_44\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_46\n      jumpi\n      dup1\n      0x8c4b2aae\n      eq\n      tag_48\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_50\n      jumpi\n      dup1\n      0x92dc24bb\n      eq\n      tag_52\n      jumpi\n      dup1\n      0x99ac48b4\n      eq\n      tag_54\n      jumpi\n      dup1\n      0x9ea7d587\n      eq\n      tag_56\n      jumpi\n      dup1\n      0xbcae25a4\n      eq\n      tag_58\n      jumpi\n      dup1\n      0xbf769a3f\n      eq\n      tag_60\n      jumpi\n      dup1\n      0xc1eecdc6\n      eq\n      tag_62\n      jumpi\n      dup1\n      0xc5adf7c9\n      eq\n      tag_64\n      jumpi\n      dup1\n      0xe73b54a5\n      eq\n      tag_66\n      jumpi\n      dup1\n      0xe8c228db\n      eq\n      tag_68\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_70\n      jumpi\n      0xfeb8c438\n      eq\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      jumpi(tag_76, callvalue)\n      jumpi(tag_76, slt(add(not(0x03), calldatasize), 0x20))\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_78\n      tag_24\n      jump\t// in\n    tag_78:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      dup3\n      mstore\n        /* \"Connect4Stakes.sol\":8023:8030  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      dup3\n      keccak256\n        /* \"Connect4Stakes.sol\":8052:8060  m.status */\n      swap1\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x04\n        /* \"Connect4Stakes.sol\":8052:8060  m.status */\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xff\n      dup2\n      sload\n      0xb0\n      shr\n      and\n      0x04\n      dup2\n      lt\n      iszero\n      tag_79\n      jumpi\n      tag_81\n      jumpi\n        /* \"Connect4Stakes.sol\":8132:8147  m.startDeadline */\n      0x03\n      dup4\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap3\n      0xffffffffff\n      dup5\n      sload\n      0x28\n      shr\n      and\n        /* \"Connect4Stakes.sol\":8113:8128  block.timestamp */\n      timestamp\n        /* \"Connect4Stakes.sol\":8113:8147  block.timestamp <= m.startDeadline */\n      gt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_83\n      jumpi\n      0x01\n        /* \"Connect4Stakes.sol\":8183:8193  m.opponent */\n      dup2\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":8183:8207  m.opponent != address(0) */\n      iszero\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_85\n      jumpi\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":8231:8241  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":8231:8255  msg.sender == m.opponent */\n      sub\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_87\n      jumpi\n        /* \"Connect4Stakes.sol\":8537:8583  MatchJoined(id, m.opponent, m.resolveDeadline) */\n      0xbac6c1f65fa2e0f78a4e7dead8b72a284ff81ba7c397e22f9cf0e7ed2f7efd1a\n        /* \"Connect4Stakes.sol\":8179:8336  if (m.opponent != address(0)) {... */\n      swap3\n        /* \"Connect4Stakes.sol\":8346:8414  IERC20(m.token).safeTransferFrom(msg.sender, address(this), m.stake) */\n      tag_89\n        /* \"Connect4Stakes.sol\":8353:8360  m.token */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"Connect4Stakes.sol\":8179:8336  if (m.opponent != address(0)) {... */\n      swap5\n    tag_90:\n        /* \"Connect4Stakes.sol\":8353:8360  m.token */\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0xa0\n      dup2\n      swap1\n      shr\n      swap1\n        /* \"Connect4Stakes.sol\":8399:8403  this */\n      address\n      swap1\n        /* \"Connect4Stakes.sol\":8379:8389  msg.sender */\n      caller\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      and\n        /* \"Connect4Stakes.sol\":8346:8414  IERC20(m.token).safeTransferFrom(msg.sender, address(this), m.stake) */\n      tag_26\n      jump\t// in\n    tag_89:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      not(shl(0xb0, 0xff))\n      and\n      shl(0xb0, 0x01)\n      or\n      swap1\n      sstore\n      dup5\n      sload\n      shl(0x50, 0xffffffffff)\n        /* \"Connect4Stakes.sol\":8487:8520  block.timestamp + m.resolveWindow */\n      tag_91\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x78\n      dup4\n      swap1\n      shr\n      0xffffffff\n      and\n        /* \"Connect4Stakes.sol\":8113:8128  block.timestamp */\n      timestamp\n        /* \"Connect4Stakes.sol\":8487:8520  block.timestamp + m.resolveWindow */\n      tag_13\n      jump\t// in\n    tag_91:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x50\n      shl\n      and\n      swap1\n      not(shl(0x50, 0xffffffffff))\n      and\n      or\n      dup1\n      swap6\n      sstore\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      swap1\n      sload\n      and\n      swap4\n      0xffffffffff\n      mload(0x40)\n      swap2\n      0x50\n      shr\n      and\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":8537:8583  MatchJoined(id, m.opponent, m.resolveDeadline) */\n      log3\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n      dup1\n      sstore\n      dup1\n      return\n    tag_87:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0b\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xaa, 0x1b9bdd081a5b9d9a5d1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"Connect4Stakes.sol\":8179:8336  if (m.opponent != address(0)) {... */\n    tag_85:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n        /* \"Connect4Stakes.sol\":8315:8325  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      or\n      dup2\n      sstore\n        /* \"Connect4Stakes.sol\":8537:8583  MatchJoined(id, m.opponent, m.resolveDeadline) */\n      0xbac6c1f65fa2e0f78a4e7dead8b72a284ff81ba7c397e22f9cf0e7ed2f7efd1a\n      swap3\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      swap3\n        /* \"Connect4Stakes.sol\":8346:8414  IERC20(m.token).safeTransferFrom(msg.sender, address(this), m.stake) */\n      tag_89\n      swap1\n        /* \"Connect4Stakes.sol\":8353:8360  m.token */\n      0x02\n      swap1\n        /* \"Connect4Stakes.sol\":8179:8336  if (m.opponent != address(0)) {... */\n      jump(tag_90)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_83:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x10\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x81, 0x3537b4b7103bb4b73237bb9037bb32b9)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_81:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0c\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xa0, 0x6e6f74206a6f696e61626c65)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_79:\n      shl(0xe0, 0x4e487b71)\n      dup6\n      mstore\n      mstore(0x04, 0x21)\n      0x24\n      dup6\n      revert\n    tag_76:\n      dup1\n      revert\n    tag_70:\n      pop\n      jumpi(tag_76, callvalue)\n      jumpi(tag_76, slt(add(not(0x03), calldatasize), 0x20))\n      tag_96\n      tag_1\n      jump\t// in\n    tag_96:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_97\n      tag_23\n      jump\t// in\n    tag_97:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_98\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup2\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      dup3\n      or\n      dup4\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup4\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_98:\n      shl(0xe0, 0x1e4fbdf7)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      dup3\n      mstore\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x04\n      dup3\n      swap1\n      mstore\n      0x24\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      dup3\n      revert\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_68:\n      pop\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x0160))\n      tag_104\n      tag_1\n      jump\t// in\n    tag_104:\n      tag_105\n      tag_6\n      jump\t// in\n    tag_105:\n      swap2\n      tag_106\n      tag_2\n      jump\t// in\n    tag_106:\n      swap1\n      tag_107\n      tag_7\n      jump\t// in\n    tag_107:\n      tag_108\n      tag_8\n      jump\t// in\n    tag_108:\n      swap5\n      tag_109\n      tag_3\n      jump\t// in\n    tag_109:\n      swap2\n      calldataload(0xc4)\n      calldataload(0x0104)\n      swap7\n      0xff\n      dup9\n      and\n      dup1\n      swap9\n      sub\n      tag_114\n      jumpi\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_112\n      tag_24\n      jump\t// in\n    tag_112:\n        /* \"Connect4Stakes.sol\":6566:6582  resolveWindowSec */\n      tag_113\n      dup10\n      dup5\n      dup7\n      tag_25\n      jump\t// in\n    tag_113:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      and\n      swap7\n        /* \"Connect4Stakes.sol\":6653:6744  IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s) */\n      dup8\n      extcodesize\n      iszero\n      tag_114\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      swap1\n      shl(0xe0, 0xd505accf)\n        /* \"Connect4Stakes.sol\":6653:6744  IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s) */\n      dup3\n      mstore\n        /* \"Connect4Stakes.sol\":6680:6690  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x04\n        /* \"Connect4Stakes.sol\":6653:6744  IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s) */\n      dup4\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"Connect4Stakes.sol\":6700:6704  this */\n      address\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x24\n      dup4\n      add\n      mstore\n      dup3\n      0x44\n      dup4\n      add\n      mstore\n      calldataload(0xe4)\n      0x64\n      dup4\n      add\n      mstore\n      0x84\n      dup3\n      add\n      mstore\n      calldataload(0x0124)\n      0xa4\n      dup3\n      add\n      mstore\n      calldataload(0x0144)\n      0xc4\n      dup3\n      add\n      mstore\n      0x00\n        /* \"Connect4Stakes.sol\":6653:6744  IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s) */\n      dup2\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xe4\n        /* \"Connect4Stakes.sol\":6653:6744  IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s) */\n      dup2\n      dup4\n      dup13\n      gas\n      call\n      dup1\n      iszero\n      tag_116\n      jumpi\n      tag_118\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_119:\n      pop\n      sub(shl(0x60, 0x01), 0x01)\n      dup4\n      and\n        /* \"Connect4Stakes.sol\":6762:6782  permitValue >= stake */\n      dup1\n      swap2\n      lt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_120\n      jumpi\n      sload(0x04)\n        /* \"Connect4Stakes.sol\":6817:6830  nextMatchId++ */\n      swap8\n      dup9\n      swap6\n      tag_122\n      dup8\n      tag_11\n      jump\t// in\n    tag_122:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x04\n      sstore\n      dup7\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":6858:6865  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap1\n      dup2\n      and\n        /* \"Connect4Stakes.sol\":6680:6690  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      or\n      dup3\n      sstore\n      0x01\n        /* \"Connect4Stakes.sol\":6911:6921  m.opponent */\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      dup3\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup12\n      dup2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      swap2\n      sstore\n      dup11\n      and\n      0xa0\n      dup8\n      swap1\n      shl\n      swap1\n      swap2\n      and\n      or\n        /* \"Connect4Stakes.sol\":6942:6949  m.token */\n      0x02\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sstore\n      swap1\n        /* \"Connect4Stakes.sol\":6992:7003  m.createdAt */\n      0x03\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":7013:7028  block.timestamp */\n      swap4\n      timestamp\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xffffffffff\n      and\n      0xffffffffff\n      and\n      not(0xffffffffff)\n      dup7\n      sload\n      and\n      or\n      dup6\n      sstore\n      0xffffffff\n      and\n        /* \"Connect4Stakes.sol\":7013:7028  block.timestamp */\n      timestamp\n        /* \"Connect4Stakes.sol\":7064:7098  block.timestamp + startDeadlineSec */\n      swap1\n      tag_124\n      swap2\n      tag_13\n      jump\t// in\n    tag_124:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup5\n      sload\n      not(0xffffffffff0000000000)\n      and\n      0x28\n      swap2\n      swap1\n      swap2\n      shl\n      0xffffffffff0000000000\n      and\n      or\n      dup5\n      sstore\n      dup4\n      sload\n      not(shl(0x78, 0xffffffff))\n      and\n      0x78\n      swap2\n      swap1\n      swap2\n      shl\n      shl(0x78, 0xffffffff)\n      and\n      or\n      dup4\n      sstore\n      0x04\n        /* \"Connect4Stakes.sol\":7153:7163  m.resolver */\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup7\n      and\n      not(sub(shl(0xa0, 0xff0001), 0x01))\n      dup3\n      and\n      dup2\n      or\n      dup4\n      sstore\n        /* \"Connect4Stakes.sol\":6942:6949  m.token */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      shl(0xa0, 0xffff)\n      and\n      not(sub(shl(0xb8, 0x01), 0x01))\n      swap1\n      swap3\n      and\n      or\n      or\n      swap1\n      sstore\n        /* \"Connect4Stakes.sol\":7254:7318  IERC20(token).safeTransferFrom(msg.sender, address(this), stake) */\n      tag_128\n      swap1\n        /* \"Connect4Stakes.sol\":6700:6704  this */\n      address\n        /* \"Connect4Stakes.sol\":6680:6690  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":7254:7318  IERC20(token).safeTransferFrom(msg.sender, address(this), stake) */\n      dup10\n      tag_26\n      jump\t// in\n    tag_128:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0x40\n      dup1\n      mload\n      sub(shl(0x60, 0x01), 0x01)\n      swap4\n      swap1\n      swap4\n      and\n      dup4\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      swap6\n      dup7\n      and\n      0x20\n      dup5\n      add\n      mstore\n      0x28\n      dup3\n      swap1\n      shr\n      0xffffffffff\n      and\n      swap1\n      dup4\n      add\n      mstore\n      0x78\n      shr\n      0xffffffff\n      and\n      0x60\n      dup3\n      add\n      mstore\n      swap3\n      and\n      0x80\n      dup4\n      add\n      mstore\n        /* \"Connect4Stakes.sol\":6680:6690  msg.sender */\n      caller\n      swap2\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      0xa0\n      dup2\n      add\n        /* \"Connect4Stakes.sol\":7334:7452  MatchCreated(... */\n      sub\n      0xf976ac1091ae1d609c0dc3a04834e4964b264db74217663204ce435fee968f50\n      swap2\n      log4\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n      dup1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_120:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x90, 0x7065726d6974203c207374616b65)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"Connect4Stakes.sol\":6653:6744  IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s) */\n    tag_118:\n      tag_130\n      swap2\n      swap6\n      pop\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Connect4Stakes.sol\":6653:6744  IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s) */\n      swap1\n      tag_10\n      jump\t// in\n    tag_130:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Connect4Stakes.sol\":6653:6744  IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s) */\n      swap4\n      0x00\n      jump(tag_119)\n    tag_116:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"Connect4Stakes.sol\":6653:6744  IERC20Permit(token).permit(msg.sender, address(this), permitValue, permitDeadline, v, r, s) */\n    tag_114:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n      dup1\n      revert\n    tag_66:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x40))\n      calldataload(0x04)\n      tag_135\n      tag_4\n      jump\t// in\n    tag_135:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_136\n      tag_24\n      jump\t// in\n    tag_136:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup2\n      0x00\n      mstore\n        /* \"Connect4Stakes.sol\":9857:9864  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n        /* \"Connect4Stakes.sol\":9886:9894  m.status */\n      swap2\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x04\n        /* \"Connect4Stakes.sol\":9886:9894  m.status */\n      dup4\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0xff\n      dup2\n      0xb0\n      shr\n      and\n      0x04\n      dup2\n      lt\n      iszero\n      tag_137\n      jumpi\n      0x01\n        /* \"Connect4Stakes.sol\":9878:9928  require(m.status == Status.Started, \"not started\") */\n      tag_139\n        /* \"Connect4Stakes.sol\":9886:9912  m.status == Status.Started */\n      swap2\n      eq\n        /* \"Connect4Stakes.sol\":9878:9928  require(m.status == Status.Started, \"not started\") */\n      tag_20\n      jump\t// in\n    tag_139:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      and\n        /* \"Connect4Stakes.sol\":9959:9969  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":9959:9983  msg.sender == m.resolver */\n      eq\n        /* \"Connect4Stakes.sol\":9959:10009  msg.sender == m.resolver || isResolver[msg.sender] */\n      dup1\n      iszero\n      tag_140\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_141:\n        /* \"Connect4Stakes.sol\":9959:10034  msg.sender == m.resolver || isResolver[msg.sender] || msg.sender == owner() */\n      dup1\n      iszero\n      tag_142\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_143:\n      iszero\n      tag_144\n      jumpi\n      dup3\n      sload\n        /* \"Connect4Stakes.sol\":10176:10182  winner */\n      tag_147\n      swap4\n        /* \"Connect4Stakes.sol\":10084:10154  require(winner == m.creator || winner == m.opponent, \"invalid winner\") */\n      tag_146\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup6\n      dup2\n      and\n      swap2\n      and\n        /* \"Connect4Stakes.sol\":10092:10111  winner == m.creator */\n      dup2\n      eq\n      swap2\n        /* \"Connect4Stakes.sol\":10092:10135  winner == m.creator || winner == m.opponent */\n      dup3\n      iszero\n      tag_148\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_149:\n        /* \"Connect4Stakes.sol\":10084:10154  require(winner == m.creator || winner == m.opponent, \"invalid winner\") */\n      pop\n      pop\n      tag_21\n      jump\t// in\n    tag_146:\n        /* \"Connect4Stakes.sol\":10176:10182  winner */\n      tag_28\n      jump\t// in\n    tag_147:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n      dup1\n      sstore\n      stop\n        /* \"Connect4Stakes.sol\":10092:10135  winner == m.creator || winner == m.opponent */\n    tag_148:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Connect4Stakes.sol\":10125:10135  m.opponent */\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":10115:10135  winner == m.opponent */\n      eq\n      swap1\n      pop\n        /* \"Connect4Stakes.sol\":10092:10135  winner == m.creator || winner == m.opponent */\n      dup6\n      dup1\n      jump(tag_149)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_144:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x92, 0x1b9bdd08185d5d1a1bdc9a5e9959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"Connect4Stakes.sol\":9959:10034  msg.sender == m.resolver || isResolver[msg.sender] || msg.sender == owner() */\n    tag_142:\n      pop\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"Connect4Stakes.sol\":9959:9969  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":10013:10034  msg.sender == owner() */\n      eq\n        /* \"Connect4Stakes.sol\":9959:10034  msg.sender == m.resolver || isResolver[msg.sender] || msg.sender == owner() */\n      jump(tag_143)\n        /* \"Connect4Stakes.sol\":9959:10009  msg.sender == m.resolver || isResolver[msg.sender] */\n    tag_140:\n        /* \"Connect4Stakes.sol\":9959:9969  msg.sender */\n      pop\n      caller\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n      mstore\n        /* \"Connect4Stakes.sol\":9987:9997  isResolver */\n      0x03\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      and(sload(keccak256(0x00, 0x40)), 0xff)\n        /* \"Connect4Stakes.sol\":9959:10009  msg.sender == m.resolver || isResolver[msg.sender] */\n      jump(tag_141)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_137:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n    tag_64:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      sload(0x04)\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_62:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      tag_158\n      calldataload(0x04)\n      tag_22\n      jump\t// in\n    tag_158:\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_60:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      0xffff\n        /* \"Connect4Stakes.sol\":2397:2427  uint16  public maxFeeBps = 500 */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0xb0\n      shr\n      and\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_58:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      0xffff\n        /* \"Connect4Stakes.sol\":2345:2377  uint16  public defaultFeeBps = 0 */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0xa0\n      shr\n      and\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_56:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x20))\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_171\n      tag_1\n      jump\t// in\n    tag_171:\n      and\n      0x00\n      mstore\n        /* \"Connect4Stakes.sol\":2451:2493  mapping(address => bool) public isResolver */\n      0x03\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x20\n      and(sload(keccak256(0x00, 0x40)), 0xff)\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_54:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x20))\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_176\n      tag_24\n      jump\t// in\n    tag_176:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      0x00\n      mstore\n        /* \"Connect4Stakes.sol\":10462:10469  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      0x04\n        /* \"Connect4Stakes.sol\":10491:10499  m.status */\n      dup2\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap1\n      0xff\n      dup3\n      sload\n      0xb0\n      shr\n      and\n      0x04\n      dup2\n      lt\n      iszero\n      tag_137\n      jumpi\n        /* \"Connect4Stakes.sol\":10483:10534  require(m.status == Status.Created, \"wrong status\") */\n      tag_179\n        /* \"Connect4Stakes.sol\":10491:10517  m.status == Status.Created */\n      swap1\n      iszero\n        /* \"Connect4Stakes.sol\":10483:10534  require(m.status == Status.Created, \"wrong status\") */\n      tag_18\n      jump\t// in\n    tag_179:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xffffffffff\n        /* \"Connect4Stakes.sol\":10570:10585  m.startDeadline */\n      0x03\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0x28\n      shr\n      and\n        /* \"Connect4Stakes.sol\":10552:10567  block.timestamp */\n      timestamp\n        /* \"Connect4Stakes.sol\":10552:10585  block.timestamp > m.startDeadline */\n      gt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      iszero\n      tag_180\n      jumpi\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":10628:10638  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":10628:10651  msg.sender == m.creator */\n      sub\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_182\n      jumpi\n      dup2\n      sload\n      not(shl(0xb0, 0xff))\n      and\n      shl(0xb0, 0x03)\n      or\n      swap1\n      swap2\n      sstore\n        /* \"Connect4Stakes.sol\":10722:10729  m.token */\n      0x02\n      dup2\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      swap1\n      sload\n        /* \"Connect4Stakes.sol\":10715:10763  IERC20(m.token).safeTransfer(m.creator, m.stake) */\n      tag_184\n      swap2\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xa0\n      dup2\n      swap1\n      shr\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      swap2\n      and\n        /* \"Connect4Stakes.sol\":10715:10763  IERC20(m.token).safeTransfer(m.creator, m.stake) */\n      tag_27\n      jump\t// in\n    tag_184:\n        /* \"Connect4Stakes.sol\":10778:10795  MatchRefunded(id) */\n      0xd032e44272ccb930cd0264251a97b70771f63de576a3fbeff5f2afe58f9c91be\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Connect4Stakes.sol\":10778:10795  MatchRefunded(id) */\n      dup1\n      log2\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n      dup1\n      sstore\n      stop\n    tag_182:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0c\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xa1, 0x37b7363c9031b932b0ba37b9)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_180:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x14\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x61, 0x3537b4b7103bb4b73237bb903737ba1037bb32b9)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_52:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x40))\n      calldataload(0x04)\n      tag_189\n      tag_4\n      jump\t// in\n    tag_189:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_190\n      tag_24\n      jump\t// in\n    tag_190:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup2\n      0x00\n      mstore\n        /* \"Connect4Stakes.sol\":8975:8982  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      0xff\n      0x04\n        /* \"Connect4Stakes.sol\":9004:9012  m.status */\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0xb0\n      shr\n      and\n      0x04\n      dup2\n      lt\n      iszero\n      tag_137\n      jumpi\n      0x01\n        /* \"Connect4Stakes.sol\":8996:9046  require(m.status == Status.Started, \"not started\") */\n      tag_193\n        /* \"Connect4Stakes.sol\":9004:9030  m.status == Status.Started */\n      swap2\n      eq\n        /* \"Connect4Stakes.sol\":8996:9046  require(m.status == Status.Started, \"not started\") */\n      tag_20\n      jump\t// in\n    tag_193:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xffffffffff\n        /* \"Connect4Stakes.sol\":9083:9100  m.resolveDeadline */\n      0x03\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0x50\n      shr\n      and\n        /* \"Connect4Stakes.sol\":9064:9079  block.timestamp */\n      timestamp\n        /* \"Connect4Stakes.sol\":9064:9100  block.timestamp <= m.resolveDeadline */\n      gt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_194\n      jumpi\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      dup2\n      and\n      swap2\n      and\n        /* \"Connect4Stakes.sol\":9145:9164  winner == m.creator */\n      dup2\n      dup2\n      eq\n        /* \"Connect4Stakes.sol\":9145:9188  winner == m.creator || winner == m.opponent */\n      dup1\n      iszero\n      tag_196\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_197:\n        /* \"Connect4Stakes.sol\":9137:9207  require(winner == m.creator || winner == m.opponent, \"invalid winner\") */\n      tag_198\n      swap1\n      tag_21\n      jump\t// in\n    tag_198:\n        /* \"Connect4Stakes.sol\":9225:9235  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":9225:9248  msg.sender == m.creator */\n      eq\n      dup1\n        /* \"Connect4Stakes.sol\":9225:9276  msg.sender == m.creator || msg.sender == m.opponent */\n      dup1\n      iszero\n      tag_199\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_200:\n        /* \"Connect4Stakes.sol\":9217:9293  require(msg.sender == m.creator || msg.sender == m.opponent, \"not a player\") */\n      tag_201\n      swap1\n      tag_19\n      jump\t// in\n    tag_201:\n        /* \"Connect4Stakes.sol\":9308:9331  msg.sender == m.creator */\n      iszero\n      tag_202\n      jumpi\n        /* \"Connect4Stakes.sol\":9347:9360  m.creatorVote */\n      0x06\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      dup3\n      or\n      swap1\n      sstore\n        /* \"Connect4Stakes.sol\":9304:9434  if (msg.sender == m.creator) {... */\n    tag_204:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":9225:9235  msg.sender */\n      dup4\n        /* \"Connect4Stakes.sol\":9449:9493  MatchResultSubmitted(id, msg.sender, winner) */\n      0x0c9b740236bb539e45eb1efa55cd846ada59902e71f281c7e6f8db14fe6582f0\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"Connect4Stakes.sol\":9225:9235  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":9449:9493  MatchResultSubmitted(id, msg.sender, winner) */\n      swap4\n      log3\n        /* \"Connect4Stakes.sol\":9508:9521  m.creatorVote */\n      0x06\n      dup2\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":9508:9535  m.creatorVote != address(0) */\n      dup1\n      iszero\n      iszero\n      swap2\n      dup3\n        /* \"Connect4Stakes.sol\":9508:9570  m.creatorVote != address(0) && m.creatorVote == m.opponentVote */\n      tag_205\n      jumpi\n        /* \"Connect4Stakes.sol\":9304:9434  if (msg.sender == m.creator) {... */\n    tag_206:\n        /* \"Connect4Stakes.sol\":9504:9616  if (m.creatorVote != address(0) && m.creatorVote == m.opponentVote) {... */\n      pop\n      pop\n      tag_207\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n      dup1\n      sstore\n      stop\n        /* \"Connect4Stakes.sol\":9504:9616  if (m.creatorVote != address(0) && m.creatorVote == m.opponentVote) {... */\n    tag_207:\n        /* \"Connect4Stakes.sol\":9598:9604  winner */\n      tag_209\n      swap2\n      tag_28\n      jump\t// in\n    tag_209:\n        /* \"Connect4Stakes.sol\":9504:9616  if (m.creatorVote != address(0) && m.creatorVote == m.opponentVote) {... */\n      dup1\n      dup1\n      jump(tag_147)\n        /* \"Connect4Stakes.sol\":9508:9570  m.creatorVote != address(0) && m.creatorVote == m.opponentVote */\n    tag_205:\n        /* \"Connect4Stakes.sol\":9556:9570  m.opponentVote */\n      0x07\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":9539:9570  m.creatorVote == m.opponentVote */\n      eq\n      swap1\n      pop\n        /* \"Connect4Stakes.sol\":9508:9570  m.creatorVote != address(0) && m.creatorVote == m.opponentVote */\n      dup4\n      dup1\n      jump(tag_206)\n        /* \"Connect4Stakes.sol\":9304:9434  if (msg.sender == m.creator) {... */\n    tag_202:\n        /* \"Connect4Stakes.sol\":9400:9414  m.opponentVote */\n      0x07\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      dup3\n      or\n      swap1\n      sstore\n        /* \"Connect4Stakes.sol\":9304:9434  if (msg.sender == m.creator) {... */\n      jump(tag_204)\n        /* \"Connect4Stakes.sol\":9225:9276  msg.sender == m.creator || msg.sender == m.opponent */\n    tag_199:\n      pop\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Connect4Stakes.sol\":9266:9276  m.opponent */\n      dup4\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":9225:9235  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":9252:9276  msg.sender == m.opponent */\n      eq\n        /* \"Connect4Stakes.sol\":9225:9276  msg.sender == m.creator || msg.sender == m.opponent */\n      jump(tag_200)\n        /* \"Connect4Stakes.sol\":9145:9188  winner == m.creator || winner == m.opponent */\n    tag_196:\n      pop\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Connect4Stakes.sol\":9178:9188  m.opponent */\n      dup4\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":9168:9188  winner == m.opponent */\n      dup3\n      eq\n        /* \"Connect4Stakes.sol\":9145:9188  winner == m.creator || winner == m.opponent */\n      jump(tag_197)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_194:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x16\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x51, 0x3932b9b7b63aba34b7b7103bb4b73237bb9037bb32b9)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_50:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x00))\n      sload(0x00)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_48:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x60))\n      tag_218\n      tag_1\n      jump\t// in\n    tag_218:\n      calldataload(0x24)\n      swap1\n      0xffff\n      dup3\n      and\n      swap1\n      dup2\n      dup4\n      sub\n      tag_114\n      jumpi\n      calldataload(0x44)\n      swap2\n      0xffff\n      dup4\n      and\n      dup1\n      dup5\n      sub\n      tag_114\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_223\n      tag_23\n      jump\t// in\n    tag_223:\n        /* \"Connect4Stakes.sol\":4125:4129  1000 */\n      0x03e8\n        /* \"Connect4Stakes.sol\":4111:4129  _maxFeeBps <= 1000 */\n      dup2\n      gt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_224\n      jumpi\n        /* \"Connect4Stakes.sol\":4160:4188  _defaultFeeBps <= _maxFeeBps */\n      dup1\n      dup3\n      gt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_226\n      jumpi\n        /* \"Connect4Stakes.sol\":4327:4377  FeesUpdated(recipient, _defaultFeeBps, _maxFeeBps) */\n      0xf44d9b22cdd87e55b71b9245548303c18d17a3c912a4e0b135ea1330351a1fc1\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap4\n      0x40\n      swap4\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      swap6\n      dup7\n        /* \"Connect4Stakes.sol\":4216:4240  feeRecipient = recipient */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      swap3\n      shl(0xb0, 0xffff)\n      swap1\n      0xb0\n      shl\n      and\n      swap3\n      shl(0xc0, 0xffffffffffffffff)\n      and\n      or\n      swap1\n      shl(0xa0, 0xffff)\n      swap1\n      0xa0\n      shl\n      and\n      or\n      or\n        /* \"Connect4Stakes.sol\":4216:4240  feeRecipient = recipient */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sstore\n      dup3\n      mload\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n        /* \"Connect4Stakes.sol\":4327:4377  FeesUpdated(recipient, _defaultFeeBps, _maxFeeBps) */\n      log2\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      stop\n    tag_226:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0d\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x9b, 0x0c8caccc2ead8e8407c40dac2f)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_224:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x08\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xc0, 0x6d6178203e313025)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_46:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_232\n      tag_23\n      jump\t// in\n    tag_232:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      dup3\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup3\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      stop\n    tag_44:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x20))\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_237\n      tag_24\n      jump\t// in\n    tag_237:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      0x00\n      mstore\n        /* \"Connect4Stakes.sol\":11095:11102  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      0x04\n        /* \"Connect4Stakes.sol\":11124:11132  m.status */\n      dup2\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap1\n      0xff\n      dup3\n      sload\n      0xb0\n      shr\n      and\n      0x04\n      dup2\n      lt\n      iszero\n      tag_137\n      jumpi\n      0x01\n        /* \"Connect4Stakes.sol\":11116:11167  require(m.status == Status.Started, \"wrong status\") */\n      tag_240\n        /* \"Connect4Stakes.sol\":11124:11150  m.status == Status.Started */\n      swap2\n      eq\n        /* \"Connect4Stakes.sol\":11116:11167  require(m.status == Status.Started, \"wrong status\") */\n      tag_18\n      jump\t// in\n    tag_240:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xffffffffff\n        /* \"Connect4Stakes.sol\":11203:11220  m.resolveDeadline */\n      0x03\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0x50\n      shr\n      and\n        /* \"Connect4Stakes.sol\":11185:11200  block.timestamp */\n      timestamp\n        /* \"Connect4Stakes.sol\":11185:11220  block.timestamp > m.resolveDeadline */\n      gt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      iszero\n      tag_241\n      jumpi\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":11266:11276  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":11266:11289  msg.sender == m.creator */\n      eq\n        /* \"Connect4Stakes.sol\":11266:11317  msg.sender == m.creator || msg.sender == m.opponent */\n      dup1\n      iszero\n      tag_243\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_244:\n        /* \"Connect4Stakes.sol\":11258:11334  require(msg.sender == m.creator || msg.sender == m.opponent, \"not a player\") */\n      tag_245\n      swap1\n      tag_19\n      jump\t// in\n    tag_245:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":11353:11374  withdrawnAfterTimeout */\n      0x06\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"Connect4Stakes.sol\":11266:11276  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      tag_246\n      jumpi\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":11353:11374  withdrawnAfterTimeout */\n      0x06\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"Connect4Stakes.sol\":11266:11276  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      dup6\n      mstore\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      dup1\n      sload\n      not(0xff)\n      and\n      0x01\n      or\n      swap1\n      sstore\n        /* \"Connect4Stakes.sol\":11484:11491  m.token */\n      0x02\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n        /* \"Connect4Stakes.sol\":11477:11526  IERC20(m.token).safeTransfer(msg.sender, m.stake) */\n      tag_248\n      swap2\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xa0\n      dup3\n      swap1\n      shr\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":11477:11526  IERC20(m.token).safeTransfer(msg.sender, m.stake) */\n      tag_27\n      jump\t// in\n    tag_248:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":11353:11374  withdrawnAfterTimeout */\n      0x06\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      dup5\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n      dup2\n        /* \"Connect4Stakes.sol\":11541:11618  withdrawnAfterTimeout[id][m.creator] && withdrawnAfterTimeout[id][m.opponent] */\n      tag_249\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_250:\n        /* \"Connect4Stakes.sol\":11537:11707  if (withdrawnAfterTimeout[id][m.creator] && withdrawnAfterTimeout[id][m.opponent]) {... */\n      pop\n      tag_251\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n      dup1\n      sstore\n      stop\n        /* \"Connect4Stakes.sol\":11537:11707  if (withdrawnAfterTimeout[id][m.creator] && withdrawnAfterTimeout[id][m.opponent]) {... */\n    tag_251:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      not(shl(0xb0, 0xff))\n      and\n      shl(0xb0, 0x03)\n      or\n      swap1\n      sstore\n        /* \"Connect4Stakes.sol\":11679:11696  MatchRefunded(id) */\n      0xd032e44272ccb930cd0264251a97b70771f63de576a3fbeff5f2afe58f9c91be\n      0x00\n      dup1\n      log2\n        /* \"Connect4Stakes.sol\":11537:11707  if (withdrawnAfterTimeout[id][m.creator] && withdrawnAfterTimeout[id][m.opponent]) {... */\n      dup1\n      dup1\n      jump(tag_147)\n        /* \"Connect4Stakes.sol\":11541:11618  withdrawnAfterTimeout[id][m.creator] && withdrawnAfterTimeout[id][m.opponent] */\n    tag_249:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n      dup5\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":11353:11374  withdrawnAfterTimeout */\n      0x06\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      0x01\n        /* \"Connect4Stakes.sol\":11607:11617  m.opponent */\n      swap1\n      swap5\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n      pop\n        /* \"Connect4Stakes.sol\":11541:11618  withdrawnAfterTimeout[id][m.creator] && withdrawnAfterTimeout[id][m.opponent] */\n      dup4\n      jump(tag_250)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_246:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x79, 0x30b63932b0b23c903bb4ba34323930bbb7)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"Connect4Stakes.sol\":11266:11317  msg.sender == m.creator || msg.sender == m.opponent */\n    tag_243:\n      pop\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Connect4Stakes.sol\":11307:11317  m.opponent */\n      dup2\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":11266:11276  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":11293:11317  msg.sender == m.opponent */\n      eq\n        /* \"Connect4Stakes.sol\":11266:11317  msg.sender == m.creator || msg.sender == m.opponent */\n      jump(tag_244)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_241:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x17\n      0x24\n      dup3\n      add\n      mstore\n      0x7265736f6c76652077696e646f77206e6f74206f766572000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_42:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x40))\n      tag_257\n      tag_4\n      jump\t// in\n    tag_257:\n      mstore(0x00, calldataload(0x04))\n        /* \"Connect4Stakes.sol\":2668:2741  mapping(uint256 => mapping(address => bool)) public withdrawnAfterTimeout */\n      0x06\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n        /* \"Connect4Stakes.sol\":2668:2741  mapping(uint256 => mapping(address => bool)) public withdrawnAfterTimeout */\n      swap1\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      0x20\n      and(sload(keccak256(0x00, 0x40)), 0xff)\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_40:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x20))\n      0x04\n      dup1\n      calldataload\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":2622:2662  mapping(uint256 => Match) public matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      swap3\n      dup4\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n        /* \"Connect4Stakes.sol\":2622:2662  mapping(uint256 => Match) public matches */\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n        /* \"Connect4Stakes.sol\":2622:2662  mapping(uint256 => Match) public matches */\n      0x02\n      dup4\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n        /* \"Connect4Stakes.sol\":2622:2662  mapping(uint256 => Match) public matches */\n      0x03\n      dup5\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n        /* \"Connect4Stakes.sol\":2622:2662  mapping(uint256 => Match) public matches */\n      swap8\n      dup5\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n        /* \"Connect4Stakes.sol\":2622:2662  mapping(uint256 => Match) public matches */\n      swap6\n      dup5\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n        /* \"Connect4Stakes.sol\":2622:2662  mapping(uint256 => Match) public matches */\n      0x06\n      dup6\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n        /* \"Connect4Stakes.sol\":2622:2662  mapping(uint256 => Match) public matches */\n      0x07\n      swap1\n      swap6\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      dup9\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap6\n      dup7\n      and\n      dup2\n      mstore\n      swap4\n      dup6\n      and\n      swap7\n      dup5\n      add\n      swap7\n      swap1\n      swap7\n      mstore\n      dup2\n      dup5\n      and\n      swap8\n      dup4\n      add\n      swap8\n      swap1\n      swap8\n      mstore\n      0xa0\n      swap1\n      dup2\n      shr\n      0x60\n      dup4\n      add\n      mstore\n      0xffffffffff\n      dup1\n      dup10\n      and\n      0x80\n      dup5\n      add\n      mstore\n      0x28\n      dup10\n      swap1\n      shr\n      dup2\n      and\n      dup4\n      dup4\n      add\n      mstore\n      0x50\n      dup10\n      swap1\n      shr\n      and\n      0xc0\n      dup4\n      add\n      mstore\n      0x78\n      swap8\n      swap1\n      swap8\n      shr\n      0xffffffff\n      and\n      0xe0\n      dup3\n      add\n      mstore\n      dup5\n      dup3\n      and\n      0x0100\n      dup3\n      add\n      mstore\n      swap6\n      dup5\n      swap1\n      shr\n      0xffff\n      and\n      0x0120\n      dup8\n      add\n      mstore\n      0x01c0\n      swap6\n      swap5\n      swap3\n      dup2\n      and\n      swap4\n      swap2\n      dup2\n      and\n      swap3\n      and\n      swap1\n      tag_262\n      swap1\n      0x0140\n      dup7\n      add\n      swap1\n      0xb0\n      shr\n      0xff\n      and\n      tag_5\n      jump\t// in\n    tag_262:\n      0x0160\n      dup5\n      add\n      mstore\n      0x0180\n      dup4\n      add\n      mstore\n      0x01a0\n      dup3\n      add\n      mstore\n      return\n    tag_38:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"Connect4Stakes.sol\":2312:2339  address public feeRecipient */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_36:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0xc0))\n      tag_271\n      tag_1\n      jump\t// in\n    tag_271:\n      tag_272\n      tag_6\n      jump\t// in\n    tag_272:\n      tag_273\n      tag_2\n      jump\t// in\n    tag_273:\n      tag_274\n      tag_7\n      jump\t// in\n    tag_274:\n      swap2\n      tag_275\n      tag_8\n      jump\t// in\n    tag_275:\n      swap1\n      tag_276\n      tag_3\n      jump\t// in\n    tag_276:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      swap1\n      tag_277\n      tag_24\n      jump\t// in\n    tag_277:\n        /* \"Connect4Stakes.sol\":5327:5343  resolveWindowSec */\n      tag_278\n      dup4\n      dup7\n      dup4\n      tag_25\n      jump\t// in\n    tag_278:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload(0x04)\n        /* \"Connect4Stakes.sol\":5360:5373  nextMatchId++ */\n      swap6\n      dup7\n      swap4\n      tag_279\n      dup6\n      tag_11\n      jump\t// in\n    tag_279:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x04\n      sstore\n      0x00\n      dup6\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":5401:5408  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap1\n      dup2\n      and\n        /* \"Connect4Stakes.sol\":5434:5444  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      or\n      dup3\n      sstore\n      0x01\n        /* \"Connect4Stakes.sol\":5454:5464  m.opponent */\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      dup3\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup11\n      dup2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      swap2\n      sstore\n      0xa0\n      dup7\n      swap1\n      shl\n      swap1\n      swap2\n      and\n      swap1\n      dup5\n      and\n      or\n        /* \"Connect4Stakes.sol\":5485:5492  m.token */\n      0x02\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sstore\n      swap1\n        /* \"Connect4Stakes.sol\":5535:5546  m.createdAt */\n      0x03\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":5556:5571  block.timestamp */\n      swap8\n      timestamp\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xffffffffff\n      and\n      0xffffffffff\n      and\n      not(0xffffffffff)\n      dup11\n      sload\n      and\n      or\n      dup10\n      sstore\n      0xffffffff\n      and\n        /* \"Connect4Stakes.sol\":5556:5571  block.timestamp */\n      timestamp\n        /* \"Connect4Stakes.sol\":5607:5641  block.timestamp + startDeadlineSec */\n      swap1\n      tag_281\n      swap2\n      tag_13\n      jump\t// in\n    tag_281:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup9\n      sload\n      not(0xffffffffff0000000000)\n      and\n      0x28\n      swap2\n      swap1\n      swap2\n      shl\n      0xffffffffff0000000000\n      and\n      or\n      dup9\n      sstore\n      dup8\n      sload\n      not(shl(0x78, 0xffffffff))\n      and\n      0x78\n      swap2\n      swap1\n      swap2\n      shl\n      shl(0x78, 0xffffffff)\n      and\n      or\n      dup8\n      sstore\n      0x04\n        /* \"Connect4Stakes.sol\":5696:5706  m.resolver */\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup6\n      and\n      not(sub(shl(0xa0, 0xff0001), 0x01))\n      dup3\n      and\n      dup2\n      or\n      dup4\n      sstore\n        /* \"Connect4Stakes.sol\":5485:5492  m.token */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      shl(0xa0, 0xffff)\n      and\n      not(sub(shl(0xb8, 0x01), 0x01))\n      swap1\n      swap3\n      and\n      or\n      or\n      swap1\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap5\n        /* \"Connect4Stakes.sol\":5827:5891  IERC20(token).safeTransferFrom(msg.sender, address(this), stake) */\n      tag_128\n      sub(shl(0x60, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup4\n      and\n        /* \"Connect4Stakes.sol\":5878:5882  this */\n      address\n        /* \"Connect4Stakes.sol\":5434:5444  msg.sender */\n      caller\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup10\n        /* \"Connect4Stakes.sol\":5827:5891  IERC20(token).safeTransferFrom(msg.sender, address(this), stake) */\n      tag_26\n      jump\t// in\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_34:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x20))\n      0x00\n      0x01a0\n      mload(0x40)\n      tag_291\n      dup2\n      tag_9\n      jump\t// in\n    tag_291:\n      dup3\n      dup2\n      mstore\n      dup3\n      0x20\n      dup3\n      add\n      mstore\n      dup3\n      0x40\n      dup3\n      add\n      mstore\n      dup3\n      0x60\n      dup3\n      add\n      mstore\n      dup3\n      0x80\n      dup3\n      add\n      mstore\n      dup3\n      0xa0\n      dup3\n      add\n      mstore\n      dup3\n      0xc0\n      dup3\n      add\n      mstore\n      dup3\n      0xe0\n      dup3\n      add\n      mstore\n      dup3\n      0x0100\n      dup3\n      add\n      mstore\n      dup3\n      0x0120\n      dup3\n      add\n      mstore\n      dup3\n      0x0140\n      dup3\n      add\n      mstore\n      dup3\n      0x0160\n      dup3\n      add\n      mstore\n      dup3\n      0x0180\n      dup3\n      add\n      mstore\n      add\n      mstore\n      mstore(0x00, calldataload(0x04))\n        /* \"Connect4Stakes.sol\":11868:11875  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      mload(0x40)\n      tag_292\n      dup2\n      tag_9\n      jump\t// in\n    tag_292:\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup3\n      sload\n      and\n      dup2\n      mstore\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      0x01\n      dup4\n      add\n      sload\n      and\n      swap2\n      0x20\n      dup3\n      add\n      swap3\n      dup4\n      mstore\n      0x02\n      dup2\n      add\n      sload\n      0x40\n      dup4\n      add\n      swap1\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup2\n      and\n      dup3\n      mstore\n      0x60\n      dup5\n      add\n      swap1\n      0xa0\n      shr\n      dup2\n      mstore\n      0x03\n      dup4\n      add\n      sload\n      0x80\n      dup6\n      add\n      0xffffffffff\n      dup3\n      and\n      dup2\n      mstore\n      0xa0\n      dup7\n      add\n      swap2\n      0xffffffffff\n      dup2\n      0x28\n      shr\n      and\n      dup4\n      mstore\n      0xc0\n      dup8\n      add\n      0xffffffffff\n      dup3\n      0x50\n      shr\n      and\n      dup2\n      mstore\n      0xffffffff\n      0xe0\n      dup10\n      add\n      swap3\n      0x78\n      shr\n      and\n      dup3\n      mstore\n      0x04\n      dup8\n      add\n      sload\n      swap4\n      0x0100\n      dup10\n      add\n      swap4\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup7\n      and\n      dup6\n      mstore\n      0xff\n      0x0120\n      dup12\n      add\n      swap7\n      0xffff\n      dup2\n      0xa0\n      shr\n      and\n      dup9\n      mstore\n      0xb0\n      shr\n      and\n      swap7\n      0x0140\n      dup12\n      add\n      swap8\n      0x04\n      dup2\n      lt\n      iszero\n      tag_137\n      jumpi\n      dup9\n      mstore\n        /* \"Connect4Stakes.sol\":11868:11875  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup11\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      0x0160\n      dup14\n      add\n      swap1\n      dup2\n      mstore\n      0x06\n      dup13\n      add\n      sload\n      dup3\n      and\n      0x0180\n      dup15\n      add\n      swap1\n      dup2\n      mstore\n      0x07\n      swap1\n      swap13\n      add\n      sload\n      dup3\n      and\n      0x01a0\n      dup15\n      add\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      mload\n      swap15\n      mload\n      dup5\n      and\n      dup16\n      mstore\n      swap15\n      mload\n      dup4\n      and\n      0x20\n      dup16\n      add\n      mstore\n      swap11\n      mload\n      dup3\n      and\n      swap14\n      dup14\n      add\n      swap14\n      swap1\n      swap14\n      mstore\n      swap1\n      mload\n      sub(shl(0x60, 0x01), 0x01)\n      and\n      0x60\n      dup13\n      add\n      mstore\n      swap1\n      mload\n      0xffffffffff\n      swap1\n      dup2\n      and\n      0x80\n      dup13\n      add\n      mstore\n      swap2\n      mload\n      dup3\n      and\n      0xa0\n      dup12\n      add\n      mstore\n      swap2\n      mload\n      and\n      0xc0\n      dup10\n      add\n      mstore\n      swap1\n      mload\n      0xffffffff\n      and\n      0xe0\n      dup9\n      add\n      mstore\n      swap1\n      mload\n      and\n      0x0100\n      dup7\n      add\n      mstore\n      mload\n      0xffff\n      and\n      0x0120\n      dup6\n      add\n      mstore\n      mload\n      swap3\n      swap4\n      swap1\n      swap3\n      tag_295\n      swap1\n      0x0140\n      dup7\n      add\n      swap1\n      tag_5\n      jump\t// in\n    tag_295:\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      0x0160\n      dup6\n      add\n      mstore\n      swap1\n      mload\n      dup2\n      and\n      0x0180\n      dup5\n      add\n      mstore\n      swap1\n      mload\n      and\n      0x01a0\n      dup3\n      add\n      mstore\n      0x01c0\n      swap1\n      return\n    tag_32:\n      jumpi(tag_114, callvalue)\n      jumpi(tag_114, slt(add(not(0x03), calldatasize), 0x40))\n      tag_300\n      tag_1\n      jump\t// in\n    tag_300:\n      calldataload(0x24)\n      swap1\n      dup2\n      iszero\n      iszero\n      dup1\n      swap3\n      sub\n      tag_114\n      jumpi\n      0x20\n        /* \"Connect4Stakes.sol\":3954:3983  ResolverSet(account, allowed) */\n      0x82b5558fdeb37cb74b6e8eb4a87486d06c7ef8951416a5dc76c25f0bd9c3bb43\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      swap2\n      tag_303\n      tag_23\n      jump\t// in\n    tag_303:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      swap3\n      dup4\n      0x00\n      mstore\n        /* \"Connect4Stakes.sol\":3910:3920  isResolver */\n      0x03\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup3\n      mstore\n      keccak256(0x00, 0x40)\n      not(0xff)\n      dup2\n      sload\n      and\n      0xff\n      dup4\n      and\n      or\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"Connect4Stakes.sol\":3954:3983  ResolverSet(account, allowed) */\n      log2\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      stop\n    tag_1:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_114\n      jumpi\n      jump\t// out\n    tag_2:\n      calldataload(0x44)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_114\n      jumpi\n      jump\t// out\n    tag_3:\n      calldataload(0xa4)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_114\n      jumpi\n      jump\t// out\n    tag_4:\n      calldataload(0x24)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_114\n      jumpi\n      jump\t// out\n    tag_5:\n      swap1\n      0x04\n      dup3\n      lt\n      iszero\n      tag_137\n      jumpi\n      mstore\n      jump\t// out\n    tag_6:\n      calldataload(0x24)\n      swap1\n      sub(shl(0x60, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_114\n      jumpi\n      jump\t// out\n    tag_7:\n      calldataload(0x64)\n      swap1\n      0xffffffff\n      dup3\n      and\n      dup3\n      sub\n      tag_114\n      jumpi\n      jump\t// out\n    tag_8:\n      calldataload(0x84)\n      swap1\n      0xffffffff\n      dup3\n      and\n      dup3\n      sub\n      tag_114\n      jumpi\n      jump\t// out\n    tag_9:\n      0x01c0\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_320\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_320:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_10:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_320\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_11:\n      not(0x00)\n      dup2\n      eq\n      tag_324\n      jumpi\n      0x01\n      add\n      swap1\n      jump\t// out\n    tag_324:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_13:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_324\n      jumpi\n      jump\t// out\n    tag_18:\n      iszero\n      tag_328\n      jumpi\n      jump\t// out\n    tag_328:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0c\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xa0, 0x77726f6e6720737461747573)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_19:\n      iszero\n      tag_330\n      jumpi\n      jump\t// out\n    tag_330:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0c\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xa1, 0x3737ba103090383630bcb2b9)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_20:\n      iszero\n      tag_332\n      jumpi\n      jump\t// out\n    tag_332:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0b\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xaa, 0x1b9bdd081cdd185c9d1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_21:\n      iszero\n      tag_334\n      jumpi\n      jump\t// out\n    tag_334:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x91, 0x34b73b30b634b2103bb4b73732b9)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"Connect4Stakes.sol\":11892:12189  function pot(uint256 id) public view returns (uint256) {... */\n    tag_22:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n      mstore\n        /* \"Connect4Stakes.sol\":11975:11982  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      0xff\n        /* \"Connect4Stakes.sol\":12000:12008  m.status */\n      0x04\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0xb0\n      shr\n      and\n        /* \"Connect4Stakes.sol\":12000:12008  m.status */\n      0x04\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup2\n      lt\n      iszero\n      tag_137\n      jumpi\n        /* \"Connect4Stakes.sol\":12000:12026  m.status == Status.Created */\n      dup1\n      iszero\n        /* \"Connect4Stakes.sol\":11996:12051  if (m.status == Status.Created) return uint256(m.stake) */\n      tag_338\n      jumpi\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Connect4Stakes.sol\":12093:12119  m.status == Status.Started */\n      eq\n        /* \"Connect4Stakes.sol\":12089:12148  if (m.status == Status.Started) return uint256(m.stake) * 2 */\n      tag_340\n      jumpi\n        /* \"Connect4Stakes.sol\":12174:12182  return 0 */\n      pop\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Connect4Stakes.sol\":11892:12189  function pot(uint256 id) public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"Connect4Stakes.sol\":12089:12148  if (m.status == Status.Started) return uint256(m.stake) * 2 */\n    tag_340:\n        /* \"Connect4Stakes.sol\":12136:12143  m.stake */\n      0x02\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0x01fffffffffffffffffffffffe\n      dup2\n      0xa0\n      shr\n      swap2\n      0x9f\n      shr\n      and\n      swap1\n      dup1\n      dup3\n      div\n        /* \"Connect4Stakes.sol\":12136:12143  m.stake */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      eq\n      swap1\n      iszero\n      or\n      iszero\n      tag_324\n      jumpi\n        /* \"Connect4Stakes.sol\":12121:12148  return uint256(m.stake) * 2 */\n      swap1\n      jump\t// out\n        /* \"Connect4Stakes.sol\":11996:12051  if (m.status == Status.Created) return uint256(m.stake) */\n    tag_338:\n        /* \"Connect4Stakes.sol\":12043:12050  m.stake */\n      pop\n      0x02\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0xa0\n      shr\n        /* \"Connect4Stakes.sol\":12028:12051  return uint256(m.stake) */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_23:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      sub\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_344\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n    tag_344:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      shl(0xe0, 0x118cdaa7)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mstore\n      0x24\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      revert\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_24:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x01\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      eq\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      tag_346\n      jumpi\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x01\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n    tag_346:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x44\n      dup3\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"Connect4Stakes.sol\":7465:7752  function _validateCreate(uint96 stake, uint32 startDeadlineSec, uint32 resolveWindowSec) internal pure {... */\n    tag_25:\n      sub(shl(0x60, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      and\n        /* \"Connect4Stakes.sol\":7586:7595  stake > 0 */\n      iszero\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_348\n      jumpi\n      0xffffffff\n        /* \"Connect4Stakes.sol\":7647:7649  60 */\n      0x3c\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap2\n      and\n        /* \"Connect4Stakes.sol\":7627:7649  startDeadlineSec >= 60 */\n      lt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_350\n      jumpi\n      0xffffffff\n        /* \"Connect4Stakes.sol\":7713:7716  300 */\n      0x012c\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap2\n      and\n        /* \"Connect4Stakes.sol\":7693:7716  resolveWindowSec >= 300 */\n      lt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_352\n      jumpi\n        /* \"Connect4Stakes.sol\":7465:7752  function _validateCreate(uint96 stake, uint32 startDeadlineSec, uint32 resolveWindowSec) internal pure {... */\n      jump\t// out\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_352:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x18\n      0x24\n      dup3\n      add\n      mstore\n      0x7265736f6c76652077696e646f7720746f6f2073686f72740000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_350:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x15\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x5a, 0x1a9bda5b881dda5b991bddc81d1bdbc81cda1bdc9d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_348:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x09\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xbc, 0x07374616b65203d203)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1618:1806  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_26:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap3\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x24\n      dup3\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mstore\n      swap3\n      swap1\n      swap2\n      and\n      0x44\n      dup4\n      add\n      mstore\n      0x64\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      swap2\n      dup2\n      mstore\n      tag_354\n      swap2\n      tag_355\n      0x84\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      tag_10\n      jump\t// in\n    tag_355:\n      tag_29\n      jump\t// in\n    tag_354:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1618:1806  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1219:1379  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_27:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x20\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap1\n      swap3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x24\n      dup4\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mstore\n      0x44\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      swap2\n      dup2\n      mstore\n      tag_354\n      swap2\n      tag_355\n      0x64\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      tag_10\n      jump\t// in\n        /* \"Connect4Stakes.sol\":12263:12935  function _payout(uint256 id, address winner) internal {... */\n    tag_28:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      0x00\n      mstore\n        /* \"Connect4Stakes.sol\":12345:12352  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n        /* \"Connect4Stakes.sol\":12374:12382  m.status */\n      swap2\n      0x04\n      dup4\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap3\n      0xff\n      dup5\n      sload\n      0xb0\n      shr\n      and\n        /* \"Connect4Stakes.sol\":12374:12382  m.status */\n      0x04\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup2\n      lt\n      iszero\n      tag_137\n      jumpi\n        /* \"Connect4Stakes.sol\":12386:12400  Status.Started */\n      0x01\n        /* \"Connect4Stakes.sol\":12374:12400  m.status == Status.Started */\n      sub\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_360\n      jumpi\n      dup4\n      sload\n      not(shl(0xb0, 0xff))\n      and\n      shl(0xb1, 0x01)\n      or\n      dup5\n      sstore\n        /* \"Connect4Stakes.sol\":12345:12352  matches */\n      0x05\n        /* \"Connect4Stakes.sol\":12461:12469  m.winner */\n      dup2\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      and\n      or\n      swap1\n      sstore\n        /* \"Connect4Stakes.sol\":12436:12451  Status.Resolved */\n      0x02\n        /* \"Connect4Stakes.sol\":12513:12520  m.stake */\n      swap1\n      dup2\n      add\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup1\n      sload\n      0x9f\n      dup2\n      swap1\n      shr\n      0x01fffffffffffffffffffffffe\n      and\n      swap6\n      swap1\n      swap4\n        /* \"Connect4Stakes.sol\":12513:12520  m.stake */\n      swap2\n      swap3\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xa0\n      dup6\n      swap1\n      shr\n      dup1\n      iszero\n      swap1\n      dup9\n      div\n      swap1\n      swap2\n      eq\n      or\n      iszero\n      tag_324\n      jumpi\n        /* \"Connect4Stakes.sol\":12436:12451  Status.Resolved */\n      0x02\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      sload\n      0x00\n      swap5\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      swap3\n        /* \"Connect4Stakes.sol\":12565:12591  feeRecipient != address(0) */\n      dup4\n      iszero\n      iszero\n      dup1\n        /* \"Connect4Stakes.sol\":12565:12607  feeRecipient != address(0) && m.feeBps > 0 */\n      tag_364\n      jumpi\n        /* \"Connect4Stakes.sol\":12263:12935  function _payout(uint256 id, address winner) internal {... */\n    tag_365:\n        /* \"Connect4Stakes.sol\":12561:12785  if (feeRecipient != address(0) && m.feeBps > 0) {... */\n      tag_366\n      jumpi\n        /* \"Connect4Stakes.sol\":12263:12935  function _payout(uint256 id, address winner) internal {... */\n    tag_367:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      pop\n      pop\n      pop\n      pop\n      dup3\n      dup6\n      sub\n      swap5\n      dup6\n      gt\n      tag_324\n      jumpi\n        /* \"Connect4Stakes.sol\":12891:12928  MatchResolved(id, winner, prize, fee) */\n      0xc681b7344754f412a9bd7ae2cc1cccd1e8bc6e7da75ab89b91e9eec5e4c40788\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap3\n        /* \"Connect4Stakes.sol\":12869:12874  prize */\n      tag_370\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup7\n      dup4\n      0x40\n      swap6\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      swap1\n      sload\n      and\n        /* \"Connect4Stakes.sol\":12869:12874  prize */\n      tag_27\n      jump\t// in\n    tag_370:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup3\n      mload\n      swap6\n      dup7\n      mstore\n      0x20\n      dup7\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap4\n        /* \"Connect4Stakes.sol\":12891:12928  MatchResolved(id, winner, prize, fee) */\n      log3\n        /* \"Connect4Stakes.sol\":12263:12935  function _payout(uint256 id, address winner) internal {... */\n      jump\t// out\n        /* \"Connect4Stakes.sol\":12561:12785  if (feeRecipient != address(0) && m.feeBps > 0) {... */\n    tag_366:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      0xffff\n      swap2\n      swap3\n      swap4\n      swap7\n      pop\n      dup2\n      swap1\n      sload\n      0xa0\n      shr\n      and\n      swap3\n      0xb0\n      shr\n      and\n        /* \"Connect4Stakes.sol\":12631:12652  m.feeBps <= maxFeeBps */\n      dup3\n      gt\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      tag_371\n      jumpi\n      dup2\n      dup8\n      mul\n      swap2\n      dup8\n      dup4\n      div\n      eq\n      dup8\n      iszero\n      or\n      iszero\n      tag_324\n      jumpi\n        /* \"Connect4Stakes.sol\":12707:12713  10_000 */\n      0x2710\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap1\n      swap2\n      div\n      swap4\n        /* \"Connect4Stakes.sol\":12770:12773  fee */\n      tag_375\n      swap2\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup6\n      swap2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"Connect4Stakes.sol\":12770:12773  fee */\n      tag_27\n      jump\t// in\n    tag_375:\n        /* \"Connect4Stakes.sol\":12561:12785  if (feeRecipient != address(0) && m.feeBps > 0) {... */\n      0x00\n      dup1\n      dup1\n      dup1\n      jump(tag_367)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_371:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n        /* \"Connect4Stakes.sol\":12374:12382  m.status */\n      0x04\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup3\n      add\n      mstore\n      0x09\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xbb, 0x0cccaca407c40dac2f)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"Connect4Stakes.sol\":12565:12607  feeRecipient != address(0) && m.feeBps > 0 */\n    tag_364:\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      pop\n      0xffff\n      dup2\n      sload\n      0xa0\n      shr\n      and\n        /* \"Connect4Stakes.sol\":12595:12607  m.feeBps > 0 */\n      iszero\n      iszero\n        /* \"Connect4Stakes.sol\":12565:12607  feeRecipient != address(0) && m.feeBps > 0 */\n      jump(tag_365)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n    tag_360:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n        /* \"Connect4Stakes.sol\":12374:12382  m.status */\n      0x04\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup3\n      add\n      mstore\n      0x0a\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xb0, 0x6e6f7420616374697665)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_29:\n      swap1\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8507:8928  assembly (\"memory-safe\") {... */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8507:8928  assembly (\"memory-safe\") {... */\n      dup3\n      dup2\n      mload\n      swap2\n      add\n      dup3\n      dup6\n      gas\n      call\n      iszero\n      tag_116\n      jumpi\n      mload(0x00)\n      returndatasize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:8957  returnSize == 0 */\n      tag_378\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8986  address(token).code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8991  address(token).code.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_380:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n      tag_381\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n    tag_381:\n      shl(0xe0, 0x5274afe7)\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      swap1\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      0x04\n        /* \"Connect4Stakes.sol\":912:12937  contract Connect4Stakes is Ownable, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_378:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9009:9010  1 */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8994:9010  returnValue != 1 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n      jump(tag_380)\n\n    auxdata: 0xa2646970667358221220d9c7a77082d60ca6a3c024d82b3d19fc1d363a56156cbd496a6f8392536aa44364736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080346100e457601f611c6738819003918201601f19168301916001600160401b038311848410176100e8578084926020946040528339810103126100e457516001600160a01b038116908190036100e45733156100d1575f8054336001600160a01b0319821681178355604051939290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36001808055600280546004929092556001600160c01b0319909116909117607d60b21b179055611b6a90816100fd8239f35b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f803560e01c80631da6ed7c1461143a5780633d092b3d1461120257806345c67d861461108157806346904840146110595780634768d4ef14610f5e5780634e55a1c214610f1557806363feb74e14610cfe578063715018a614610ca75780638c4b2aae14610b855780638da5cb5b14610b5e57806392dc24bb146109af57806399ac48b4146108715780639ea7d58714610834578063bcae25a414610810578063bf769a3f146107ec578063c1eecdc6146107c6578063c5adf7c9146107a9578063e73b54a51461067c578063e8c228db146103a8578063f2fde38b146103225763feb8c43814610101575f80fd5b3461031f57602036600319011261031f5760043561011d611756565b808252600560205260408220906004820160ff815460b01c16600481101561030b576102d757600383019264ffffffffff845460281c16421161029f576001810180546001600160a01b03161561025e5780546001600160a01b0316330361022b577fbac6c1f65fa2e0f78a4e7dead8b72a284ff81ba7c397e22f9cf0e7ed2f7efd1a926101c460026020945b015460a081901c90309033906001600160a01b031661188c565b805460ff60b01b1916600160b01b179055845464ffffffffff60501b6101f4607883901c63ffffffff16426115cd565b60501b169064ffffffffff60501b19161780955560018060a01b039054169364ffffffffff6040519160501c168152a36001805580f35b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081a5b9d9a5d195960aa1b6044820152606490fd5b80546001600160a01b031916331781557fbac6c1f65fa2e0f78a4e7dead8b72a284ff81ba7c397e22f9cf0e7ed2f7efd1a926020926101c4906002906101aa565b60405162461bcd60e51b815260206004820152601060248201526f3537b4b7103bb4b73237bb9037bb32b960811b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b6e6f74206a6f696e61626c6560a01b6044820152606490fd5b634e487b7160e01b85526021600452602485fd5b80fd5b503461031f57602036600319011261031f5761033c6114b7565b610344611730565b6001600160a01b031680156103945781546001600160a01b03198116821783556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b631e4fbdf760e01b82526004829052602482fd5b503461067857610160366003190112610678576103c36114b7565b6103cb61151c565b916103d46114cd565b906103dd611532565b6103e5611545565b946103ee6114e3565b9160c435610104359660ff88168098036106785761040a611756565b6104158984866117ac565b6001600160a01b031696873b15610678576040519063d505accf60e01b825233600483015230602483015282604483015260e435606483015260848201526101243560a48201526101443560c48201525f8160e481838c5af1801561066d57610658575b506001600160601b0383168091106106225760045497889561049a876115ab565b60045586815260056020526040902080546001600160a01b03199081163317825560018201805482166001600160a01b038b8116919091179091558a1660a087901b9091161760028201559060038201934264ffffffffff1664ffffffffff1664ffffffffff1986541617855563ffffffff164290610518916115cd565b845469ffffffffff0000000000191660289190911b69ffffffffff000000000016178455835463ffffffff60781b191660789190911b63ffffffff60781b1617835560040180546001600160a01b038616600162ff000160a01b031982168117835560025461ffff60a01b166001600160b81b0319909216171790556105a09030338961188c565b54604080516001600160601b039390931683526001600160a01b039586166020840152602882901c64ffffffffff169083015260781c63ffffffff1660608201529216608083015233918060a08101037ff976ac1091ae1d609c0dc3a04834e4964b264db74217663204ce435fee968f5091a460018055604051908152602090f35b60405162461bcd60e51b815260206004820152600e60248201526d7065726d6974203c207374616b6560901b6044820152606490fd5b6106659195505f90611589565b5f935f610479565b6040513d5f823e3d90fd5b5f80fd5b34610678576040366003190112610678576004356106986114f9565b6106a0611756565b815f52600560205260405f2091600483015460ff8160b01c1660048110156107955760016106ce9114611650565b6001600160a01b03163314801561077f575b801561076c575b1561073657825461071993610714916001600160a01b038581169116811491821561071f575b505061168a565b611912565b60018055005b600101546001600160a01b0316149050858061070d565b60405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b6044820152606490fd5b505f546001600160a01b031633146106e7565b50335f52600360205260ff60405f2054166106e0565b634e487b7160e01b5f52602160045260245ffd5b34610678575f366003190112610678576020600454604051908152f35b346106785760203660031901126106785760206107e46004356116c7565b604051908152f35b34610678575f36600319011261067857602061ffff60025460b01c16604051908152f35b34610678575f36600319011261067857602061ffff60025460a01c16604051908152f35b34610678576020366003190112610678576001600160a01b036108556114b7565b165f526003602052602060ff60405f2054166040519015158152f35b346106785760203660031901126106785760043561088d611756565b805f52600560205260405f20600481019060ff825460b01c166004811015610795576108b990156115da565b64ffffffffff600382015460281c164211156109735780546001600160a01b0316330361093f57815460ff60b01b1916600360b01b17909155600281015490546109159160a081901c916001600160a01b0390811691166118d7565b7fd032e44272ccb930cd0264251a97b70771f63de576a3fbeff5f2afe58f9c91be5f80a260018055005b60405162461bcd60e51b815260206004820152600c60248201526b37b7363c9031b932b0ba37b960a11b6044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152733537b4b7103bb4b73237bb903737ba1037bb32b960611b6044820152606490fd5b34610678576040366003190112610678576004356109cb6114f9565b6109d3611756565b815f52600560205260405f2060ff600482015460b01c1660048110156107955760016109ff9114611650565b64ffffffffff600382015460501c164211610b205780546001600160a01b0383811691168181148015610b0a575b610a369061168a565b3314808015610af4575b610a4990611615565b15610adb576006820180546001600160a01b031916821790555b604051908152837f0c9b740236bb539e45eb1efa55cd846ada59902e71f281c7e6f8db14fe6582f060203393a360068101546001600160a01b03168015159182610ac4575b5050610ab45760018055005b610abd91611912565b8080610719565b600701546001600160a01b03161490508380610aa8565b6007820180546001600160a01b03191682179055610a63565b5060018301546001600160a01b03163314610a40565b5060018301546001600160a01b03168214610a2d565b60405162461bcd60e51b81526020600482015260166024820152753932b9b7b63aba34b7b7103bb4b73237bb9037bb32b960511b6044820152606490fd5b34610678575f366003190112610678575f546040516001600160a01b039091168152602090f35b3461067857606036600319011261067857610b9e6114b7565b6024359061ffff821690818303610678576044359161ffff831680840361067857610bc7611730565b6103e88111610c7757808211610c42577ff44d9b22cdd87e55b71b9245548303c18d17a3c912a4e0b135ea1330351a1fc19360409360018060a01b031695866002549261ffff60b01b9060b01b169267ffffffffffffffff60c01b16179061ffff60a01b9060a01b16171760025582519182526020820152a2005b60405162461bcd60e51b815260206004820152600d60248201526c0c8caccc2ead8e8407c40dac2f609b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676d6178203e31302560c01b6044820152606490fd5b34610678575f36600319011261067857610cbf611730565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461067857602036600319011261067857600435610d1a611756565b805f52600560205260405f20600481019060ff825460b01c166004811015610795576001610d4891146115da565b64ffffffffff600382015460501c16421115610ed05780546001600160a01b031633148015610eba575b610d7b90611615565b5f83815260066020908152604080832033845290915290205460ff16610e81575f838152600660209081526040808320338085529252909120805460ff191660011790556002820154610ddc9160a082901c916001600160a01b03166118d7565b5f83815260066020908152604080832084546001600160a01b0316845290915290205460ff169081610e50575b50610e145760018055005b805460ff60b01b1916600360b01b1790557fd032e44272ccb930cd0264251a97b70771f63de576a3fbeff5f2afe58f9c91be5f80a28080610719565b5f8481526006602090815260408083206001909401546001600160a01b03168352929052205460ff16905083610e09565b60405162461bcd60e51b815260206004820152601160248201527030b63932b0b23c903bb4ba34323930bbb760791b6044820152606490fd5b5060018101546001600160a01b03163314610d72565b60405162461bcd60e51b815260206004820152601760248201527f7265736f6c76652077696e646f77206e6f74206f7665720000000000000000006044820152606490fd5b3461067857604036600319011261067857610f2e6114f9565b6004355f52600660205260405f209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b3461067857602036600319011261067857600480355f9081526005602081815260409283902080546001820154600283015460038401549784015495840154600685015460079095015488516001600160a01b039586168152938516968401969096528184169783019790975260a090811c606083015264ffffffffff8089166080840152602889901c811683830152605089901c1660c083015260789790971c63ffffffff1660e08201528482166101008201529584901c61ffff166101208701526101c09594928116939181169216906110459061014086019060b01c60ff1661150f565b6101608401526101808301526101a0820152f35b34610678575f366003190112610678576002546040516001600160a01b039091168152602090f35b346106785760c03660031901126106785761109a6114b7565b6110a261151c565b6110aa6114cd565b6110b2611532565b916110bb611545565b906110c46114e3565b906110cd611756565b6110d88386836117ac565b6004549586936110e7856115ab565b6004555f85815260056020526040902080546001600160a01b03199081163317825560018201805482166001600160a01b038a81169190911790915560a086901b9091169084161760028201559060038201974264ffffffffff1664ffffffffff1664ffffffffff198a541617895563ffffffff164290611167916115cd565b885469ffffffffff0000000000191660289190911b69ffffffffff000000000016178855875463ffffffff60781b191660789190911b63ffffffff60781b1617875560040180546001600160a01b038516600162ff000160a01b031982168117835560025461ffff60a01b166001600160b81b0319909216171790556001600160a01b0316946105a06001600160601b03831630338961188c565b34610678576020366003190112610678575f6101a060405161122381611558565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152826101608201528261018082015201526004355f52600560205260405f2060405161128f81611558565b60018060a01b03825416815260018060a01b0360018301541691602082019283526002810154604083019060018060a01b0381168252606084019060a01c815260038301546080850164ffffffffff8216815260a086019164ffffffffff8160281c16835260c0870164ffffffffff8260501c16815263ffffffff60e089019260781c16825260048701549361010089019360018060a01b038616855260ff6101208b019661ffff8160a01c16885260b01c16966101408b0197600481101561079557885260058a01546001600160a01b039081166101608d0190815260068c015482166101808e019081526007909c015482166101a08e01908152604080519e5184168f529e51831660208f01529a5182169d8d019d909d5290516001600160601b031660608c0152905164ffffffffff90811660808c01529151821660a08b015291511660c0890152905163ffffffff1660e08801529051166101008601525161ffff16610120850152519293909261140f9061014086019061150f565b516001600160a01b03908116610160850152905181166101808401529051166101a08201526101c090f35b34610678576040366003190112610678576114536114b7565b602435908115158092036106785760207f82b5558fdeb37cb74b6e8eb4a87486d06c7ef8951416a5dc76c25f0bd9c3bb439161148d611730565b60018060a01b031692835f526003825260405f2060ff1981541660ff8316179055604051908152a2005b600435906001600160a01b038216820361067857565b604435906001600160a01b038216820361067857565b60a435906001600160a01b038216820361067857565b602435906001600160a01b038216820361067857565b9060048210156107955752565b602435906001600160601b038216820361067857565b6064359063ffffffff8216820361067857565b6084359063ffffffff8216820361067857565b6101c0810190811067ffffffffffffffff82111761157557604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761157557604052565b5f1981146115b95760010190565b634e487b7160e01b5f52601160045260245ffd5b919082018092116115b957565b156115e157565b60405162461bcd60e51b815260206004820152600c60248201526b77726f6e672073746174757360a01b6044820152606490fd5b1561161c57565b60405162461bcd60e51b815260206004820152600c60248201526b3737ba103090383630bcb2b960a11b6044820152606490fd5b1561165757565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b6044820152606490fd5b1561169157565b60405162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b2103bb4b73732b960911b6044820152606490fd5b5f52600560205260405f2060ff600482015460b01c166004811015610795578015611725576001146116f857505f90565b600201546c01fffffffffffffffffffffffe8160a01c91609f1c1690808204600214901517156115b95790565b506002015460a01c90565b5f546001600160a01b0316330361174357565b63118cdaa760e01b5f523360045260245ffd5b600260015414611767576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160601b03161561185b5763ffffffff603c91161061181e5763ffffffff61012c9116106117d957565b60405162461bcd60e51b815260206004820152601860248201527f7265736f6c76652077696e646f7720746f6f2073686f727400000000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152741a9bda5b881dda5b991bddc81d1bdbc81cda1bdc9d605a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526807374616b65203d20360bc1b6044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526118d5916118d0608483611589565b611adc565b565b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044808301939093529181526118d5916118d0606483611589565b805f52600560205260405f2091600483019260ff845460b01c16600481101561079557600103611aaa57835460ff60b01b1916600160b11b1784556005810180546001600160a01b0319166001600160a01b03841617905560029081018054609f81901c6c01fffffffffffffffffffffffe16959093919260a085901c801590880490911417156115b9576002545f946001600160a01b0382169283151580611a99575b611a19575b505050508285039485116115b9577fc681b7344754f412a9bd7ae2cc1cccd1e8bc6e7da75ab89b91e9eec5e4c4078892611a02868360409560018060a01b039054166118d7565b825195865260208601526001600160a01b031693a3565b61ffff919293965081905460a01c169260b01c168211611a68578187029187830414871517156115b95761271090910493611a5f918591906001600160a01b03166118d7565b5f8080806119bb565b60405162461bcd60e51b81526020600482015260096024820152680cccaca407c40dac2f60bb1b6044820152606490fd5b5061ffff815460a01c1615156119b6565b60405162461bcd60e51b815260206004820152600a6024820152696e6f742061637469766560b01b6044820152606490fd5b905f602091828151910182855af11561066d575f513d611b2b57506001600160a01b0381163b155b611b0b5750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b60011415611b0456fea2646970667358221220d9c7a77082d60ca6a3c024d82b3d19fc1d363a56156cbd496a6f8392536aa44364736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 CALLVALUE PUSH2 0xE4 JUMPI PUSH1 0x1F PUSH2 0x1C67 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xE8 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xE4 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xE4 JUMPI CALLER ISZERO PUSH2 0xD1 JUMPI PUSH0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 PUSH1 0x1 DUP1 DUP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x4 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP2 AND SWAP1 SWAP2 OR PUSH1 0x7D PUSH1 0xB2 SHL OR SWAP1 SSTORE PUSH2 0x1B6A SWAP1 DUP2 PUSH2 0xFD DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1DA6ED7C EQ PUSH2 0x143A JUMPI DUP1 PUSH4 0x3D092B3D EQ PUSH2 0x1202 JUMPI DUP1 PUSH4 0x45C67D86 EQ PUSH2 0x1081 JUMPI DUP1 PUSH4 0x46904840 EQ PUSH2 0x1059 JUMPI DUP1 PUSH4 0x4768D4EF EQ PUSH2 0xF5E JUMPI DUP1 PUSH4 0x4E55A1C2 EQ PUSH2 0xF15 JUMPI DUP1 PUSH4 0x63FEB74E EQ PUSH2 0xCFE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xCA7 JUMPI DUP1 PUSH4 0x8C4B2AAE EQ PUSH2 0xB85 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xB5E JUMPI DUP1 PUSH4 0x92DC24BB EQ PUSH2 0x9AF JUMPI DUP1 PUSH4 0x99AC48B4 EQ PUSH2 0x871 JUMPI DUP1 PUSH4 0x9EA7D587 EQ PUSH2 0x834 JUMPI DUP1 PUSH4 0xBCAE25A4 EQ PUSH2 0x810 JUMPI DUP1 PUSH4 0xBF769A3F EQ PUSH2 0x7EC JUMPI DUP1 PUSH4 0xC1EECDC6 EQ PUSH2 0x7C6 JUMPI DUP1 PUSH4 0xC5ADF7C9 EQ PUSH2 0x7A9 JUMPI DUP1 PUSH4 0xE73B54A5 EQ PUSH2 0x67C JUMPI DUP1 PUSH4 0xE8C228DB EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x322 JUMPI PUSH4 0xFEB8C438 EQ PUSH2 0x101 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x31F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x31F JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x11D PUSH2 0x1756 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH1 0x4 DUP3 ADD PUSH1 0xFF DUP2 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x30B JUMPI PUSH2 0x2D7 JUMPI PUSH1 0x3 DUP4 ADD SWAP3 PUSH5 0xFFFFFFFFFF DUP5 SLOAD PUSH1 0x28 SHR AND TIMESTAMP GT PUSH2 0x29F JUMPI PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x25E JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x22B JUMPI PUSH32 0xBAC6C1F65FA2E0F78A4E7DEAD8B72A284FF81BA7C397E22F9CF0E7ED2F7EFD1A SWAP3 PUSH2 0x1C4 PUSH1 0x2 PUSH1 0x20 SWAP5 JUMPDEST ADD SLOAD PUSH1 0xA0 DUP2 SWAP1 SHR SWAP1 ADDRESS SWAP1 CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x188C JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE DUP5 SLOAD PUSH5 0xFFFFFFFFFF PUSH1 0x50 SHL PUSH2 0x1F4 PUSH1 0x78 DUP4 SWAP1 SHR PUSH4 0xFFFFFFFF AND TIMESTAMP PUSH2 0x15CD JUMP JUMPDEST PUSH1 0x50 SHL AND SWAP1 PUSH5 0xFFFFFFFFFF PUSH1 0x50 SHL NOT AND OR DUP1 SWAP6 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SLOAD AND SWAP4 PUSH5 0xFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 PUSH1 0x50 SHR AND DUP2 MSTORE LOG3 PUSH1 0x1 DUP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x1B9BDD081A5B9D9A5D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR DUP2 SSTORE PUSH32 0xBAC6C1F65FA2E0F78A4E7DEAD8B72A284FF81BA7C397E22F9CF0E7ED2F7EFD1A SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x1C4 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x1AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x3537B4B7103BB4B73237BB9037BB32B9 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x6E6F74206A6F696E61626C65 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x31F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x31F JUMPI PUSH2 0x33C PUSH2 0x14B7 JUMP JUMPDEST PUSH2 0x344 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x394 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 OR DUP4 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST POP CALLVALUE PUSH2 0x678 JUMPI PUSH2 0x160 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0x3C3 PUSH2 0x14B7 JUMP JUMPDEST PUSH2 0x3CB PUSH2 0x151C JUMP JUMPDEST SWAP2 PUSH2 0x3D4 PUSH2 0x14CD JUMP JUMPDEST SWAP1 PUSH2 0x3DD PUSH2 0x1532 JUMP JUMPDEST PUSH2 0x3E5 PUSH2 0x1545 JUMP JUMPDEST SWAP5 PUSH2 0x3EE PUSH2 0x14E3 JUMP JUMPDEST SWAP2 PUSH1 0xC4 CALLDATALOAD PUSH2 0x104 CALLDATALOAD SWAP7 PUSH1 0xFF DUP9 AND DUP1 SWAP9 SUB PUSH2 0x678 JUMPI PUSH2 0x40A PUSH2 0x1756 JUMP JUMPDEST PUSH2 0x415 DUP10 DUP5 DUP7 PUSH2 0x17AC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP7 DUP8 EXTCODESIZE ISZERO PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE DUP3 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0xE4 CALLDATALOAD PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD MSTORE PUSH2 0x124 CALLDATALOAD PUSH1 0xA4 DUP3 ADD MSTORE PUSH2 0x144 CALLDATALOAD PUSH1 0xC4 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0xE4 DUP2 DUP4 DUP13 GAS CALL DUP1 ISZERO PUSH2 0x66D JUMPI PUSH2 0x658 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND DUP1 SWAP2 LT PUSH2 0x622 JUMPI PUSH1 0x4 SLOAD SWAP8 DUP9 SWAP6 PUSH2 0x49A DUP8 PUSH2 0x15AB JUMP JUMPDEST PUSH1 0x4 SSTORE DUP7 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND CALLER OR DUP3 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP11 AND PUSH1 0xA0 DUP8 SWAP1 SHL SWAP1 SWAP2 AND OR PUSH1 0x2 DUP3 ADD SSTORE SWAP1 PUSH1 0x3 DUP3 ADD SWAP4 TIMESTAMP PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF NOT DUP7 SLOAD AND OR DUP6 SSTORE PUSH4 0xFFFFFFFF AND TIMESTAMP SWAP1 PUSH2 0x518 SWAP2 PUSH2 0x15CD JUMP JUMPDEST DUP5 SLOAD PUSH10 0xFFFFFFFFFF0000000000 NOT AND PUSH1 0x28 SWAP2 SWAP1 SWAP2 SHL PUSH10 0xFFFFFFFFFF0000000000 AND OR DUP5 SSTORE DUP4 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x78 SHL NOT AND PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHL PUSH4 0xFFFFFFFF PUSH1 0x78 SHL AND OR DUP4 SSTORE PUSH1 0x4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x1 PUSH3 0xFF0001 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x2 SLOAD PUSH2 0xFFFF PUSH1 0xA0 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP3 AND OR OR SWAP1 SSTORE PUSH2 0x5A0 SWAP1 ADDRESS CALLER DUP10 PUSH2 0x188C JUMP JUMPDEST SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x28 DUP3 SWAP1 SHR PUSH5 0xFFFFFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x78 SHR PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE SWAP3 AND PUSH1 0x80 DUP4 ADD MSTORE CALLER SWAP2 DUP1 PUSH1 0xA0 DUP2 ADD SUB PUSH32 0xF976AC1091AE1D609C0DC3A04834E4964B264DB74217663204CE435FEE968F50 SWAP2 LOG4 PUSH1 0x1 DUP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x7065726D6974203C207374616B65 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x665 SWAP2 SWAP6 POP PUSH0 SWAP1 PUSH2 0x1589 JUMP JUMPDEST PUSH0 SWAP4 PUSH0 PUSH2 0x479 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x698 PUSH2 0x14F9 JUMP JUMPDEST PUSH2 0x6A0 PUSH2 0x1756 JUMP JUMPDEST DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP2 PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0xFF DUP2 PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH1 0x1 PUSH2 0x6CE SWAP2 EQ PUSH2 0x1650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO PUSH2 0x77F JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x76C JUMPI JUMPDEST ISZERO PUSH2 0x736 JUMPI DUP3 SLOAD PUSH2 0x719 SWAP4 PUSH2 0x714 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND DUP2 EQ SWAP2 DUP3 ISZERO PUSH2 0x71F JUMPI JUMPDEST POP POP PUSH2 0x168A JUMP JUMPDEST PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP DUP6 DUP1 PUSH2 0x70D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1B9BDD08185D5D1A1BDC9A5E9959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6E7 JUMP JUMPDEST POP CALLER PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH2 0x6E0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x20 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x20 PUSH2 0x7E4 PUSH1 0x4 CALLDATALOAD PUSH2 0x16C7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x20 PUSH2 0xFFFF PUSH1 0x2 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x20 PUSH2 0xFFFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x855 PUSH2 0x14B7 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x88D PUSH2 0x1756 JUMP JUMPDEST DUP1 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x4 DUP2 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH2 0x8B9 SWAP1 ISZERO PUSH2 0x15DA JUMP JUMPDEST PUSH5 0xFFFFFFFFFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x28 SHR AND TIMESTAMP GT ISZERO PUSH2 0x973 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x93F JUMPI DUP2 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x3 PUSH1 0xB0 SHL OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0x915 SWAP2 PUSH1 0xA0 DUP2 SWAP1 SHR SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x18D7 JUMP JUMPDEST PUSH32 0xD032E44272CCB930CD0264251A97B70771F63DE576A3FBEFF5F2AFE58F9C91BE PUSH0 DUP1 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x37B7363C9031B932B0BA37B9 PUSH1 0xA1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x3537B4B7103BB4B73237BB903737BA1037BB32B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x9CB PUSH2 0x14F9 JUMP JUMPDEST PUSH2 0x9D3 PUSH2 0x1756 JUMP JUMPDEST DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH1 0x1 PUSH2 0x9FF SWAP2 EQ PUSH2 0x1650 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x50 SHR AND TIMESTAMP GT PUSH2 0xB20 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND DUP2 DUP2 EQ DUP1 ISZERO PUSH2 0xB0A JUMPI JUMPDEST PUSH2 0xA36 SWAP1 PUSH2 0x168A JUMP JUMPDEST CALLER EQ DUP1 DUP1 ISZERO PUSH2 0xAF4 JUMPI JUMPDEST PUSH2 0xA49 SWAP1 PUSH2 0x1615 JUMP JUMPDEST ISZERO PUSH2 0xADB JUMPI PUSH1 0x6 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP4 PUSH32 0xC9B740236BB539E45EB1EFA55CD846ADA59902E71F281C7E6F8DB14FE6582F0 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO ISZERO SWAP2 DUP3 PUSH2 0xAC4 JUMPI JUMPDEST POP POP PUSH2 0xAB4 JUMPI PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH2 0xABD SWAP2 PUSH2 0x1912 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x719 JUMP JUMPDEST PUSH1 0x7 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP DUP4 DUP1 PUSH2 0xAA8 JUMP JUMPDEST PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH2 0xA63 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA40 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 EQ PUSH2 0xA2D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x3932B9B7B63ABA34B7B7103BB4B73237BB9037BB32B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0xB9E PUSH2 0x14B7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xFFFF DUP3 AND SWAP1 DUP2 DUP4 SUB PUSH2 0x678 JUMPI PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0xFFFF DUP4 AND DUP1 DUP5 SUB PUSH2 0x678 JUMPI PUSH2 0xBC7 PUSH2 0x1730 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT PUSH2 0xC77 JUMPI DUP1 DUP3 GT PUSH2 0xC42 JUMPI PUSH32 0xF44D9B22CDD87E55B71B9245548303C18D17A3C912A4E0B135EA1330351A1FC1 SWAP4 PUSH1 0x40 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP6 DUP7 PUSH1 0x2 SLOAD SWAP3 PUSH2 0xFFFF PUSH1 0xB0 SHL SWAP1 PUSH1 0xB0 SHL AND SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xC0 SHL AND OR SWAP1 PUSH2 0xFFFF PUSH1 0xA0 SHL SWAP1 PUSH1 0xA0 SHL AND OR OR PUSH1 0x2 SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0xC8CACCC2EAD8E8407C40DAC2F PUSH1 0x9B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x6D6178203E313025 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0xCBF PUSH2 0x1730 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xD1A PUSH2 0x1756 JUMP JUMPDEST DUP1 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x4 DUP2 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH1 0x1 PUSH2 0xD48 SWAP2 EQ PUSH2 0x15DA JUMP JUMPDEST PUSH5 0xFFFFFFFFFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x50 SHR AND TIMESTAMP GT ISZERO PUSH2 0xED0 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO PUSH2 0xEBA JUMPI JUMPDEST PUSH2 0xD7B SWAP1 PUSH2 0x1615 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xE81 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0xDDC SWAP2 PUSH1 0xA0 DUP3 SWAP1 SHR SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18D7 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 DUP2 PUSH2 0xE50 JUMPI JUMPDEST POP PUSH2 0xE14 JUMPI PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x3 PUSH1 0xB0 SHL OR SWAP1 SSTORE PUSH32 0xD032E44272CCB930CD0264251A97B70771F63DE576A3FBEFF5F2AFE58F9C91BE PUSH0 DUP1 LOG2 DUP1 DUP1 PUSH2 0x719 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 SWAP1 SWAP5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 POP DUP4 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x30B63932B0B23C903BB4BA34323930BBB7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7265736F6C76652077696E646F77206E6F74206F766572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0xF2E PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD SWAP8 DUP5 ADD SLOAD SWAP6 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x7 SWAP1 SWAP6 ADD SLOAD DUP9 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND SWAP7 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP2 DUP5 AND SWAP8 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0xA0 SWAP1 DUP2 SHR PUSH1 0x60 DUP4 ADD MSTORE PUSH5 0xFFFFFFFFFF DUP1 DUP10 AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x28 DUP10 SWAP1 SHR DUP2 AND DUP4 DUP4 ADD MSTORE PUSH1 0x50 DUP10 SWAP1 SHR AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x78 SWAP8 SWAP1 SWAP8 SHR PUSH4 0xFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE DUP5 DUP3 AND PUSH2 0x100 DUP3 ADD MSTORE SWAP6 DUP5 SWAP1 SHR PUSH2 0xFFFF AND PUSH2 0x120 DUP8 ADD MSTORE PUSH2 0x1C0 SWAP6 SWAP5 SWAP3 DUP2 AND SWAP4 SWAP2 DUP2 AND SWAP3 AND SWAP1 PUSH2 0x1045 SWAP1 PUSH2 0x140 DUP7 ADD SWAP1 PUSH1 0xB0 SHR PUSH1 0xFF AND PUSH2 0x150F JUMP JUMPDEST PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x180 DUP4 ADD MSTORE PUSH2 0x1A0 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0x109A PUSH2 0x14B7 JUMP JUMPDEST PUSH2 0x10A2 PUSH2 0x151C JUMP JUMPDEST PUSH2 0x10AA PUSH2 0x14CD JUMP JUMPDEST PUSH2 0x10B2 PUSH2 0x1532 JUMP JUMPDEST SWAP2 PUSH2 0x10BB PUSH2 0x1545 JUMP JUMPDEST SWAP1 PUSH2 0x10C4 PUSH2 0x14E3 JUMP JUMPDEST SWAP1 PUSH2 0x10CD PUSH2 0x1756 JUMP JUMPDEST PUSH2 0x10D8 DUP4 DUP7 DUP4 PUSH2 0x17AC JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP6 DUP7 SWAP4 PUSH2 0x10E7 DUP6 PUSH2 0x15AB JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH0 DUP6 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND CALLER OR DUP3 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xA0 DUP7 SWAP1 SHL SWAP1 SWAP2 AND SWAP1 DUP5 AND OR PUSH1 0x2 DUP3 ADD SSTORE SWAP1 PUSH1 0x3 DUP3 ADD SWAP8 TIMESTAMP PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF NOT DUP11 SLOAD AND OR DUP10 SSTORE PUSH4 0xFFFFFFFF AND TIMESTAMP SWAP1 PUSH2 0x1167 SWAP2 PUSH2 0x15CD JUMP JUMPDEST DUP9 SLOAD PUSH10 0xFFFFFFFFFF0000000000 NOT AND PUSH1 0x28 SWAP2 SWAP1 SWAP2 SHL PUSH10 0xFFFFFFFFFF0000000000 AND OR DUP9 SSTORE DUP8 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x78 SHL NOT AND PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHL PUSH4 0xFFFFFFFF PUSH1 0x78 SHL AND OR DUP8 SSTORE PUSH1 0x4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x1 PUSH3 0xFF0001 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x2 SLOAD PUSH2 0xFFFF PUSH1 0xA0 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP3 AND OR OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 PUSH2 0x5A0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND ADDRESS CALLER DUP10 PUSH2 0x188C JUMP JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH0 PUSH2 0x1A0 PUSH1 0x40 MLOAD PUSH2 0x1223 DUP2 PUSH2 0x1558 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE DUP3 PUSH2 0x120 DUP3 ADD MSTORE DUP3 PUSH2 0x140 DUP3 ADD MSTORE DUP3 PUSH2 0x160 DUP3 ADD MSTORE DUP3 PUSH2 0x180 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x128F DUP2 PUSH2 0x1558 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 SLOAD AND DUP2 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 DUP4 ADD SLOAD AND SWAP2 PUSH1 0x20 DUP3 ADD SWAP3 DUP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 DUP4 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 PUSH1 0xA0 SHR DUP2 MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x80 DUP6 ADD PUSH5 0xFFFFFFFFFF DUP3 AND DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP2 PUSH5 0xFFFFFFFFFF DUP2 PUSH1 0x28 SHR AND DUP4 MSTORE PUSH1 0xC0 DUP8 ADD PUSH5 0xFFFFFFFFFF DUP3 PUSH1 0x50 SHR AND DUP2 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 DUP10 ADD SWAP3 PUSH1 0x78 SHR AND DUP3 MSTORE PUSH1 0x4 DUP8 ADD SLOAD SWAP4 PUSH2 0x100 DUP10 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP6 MSTORE PUSH1 0xFF PUSH2 0x120 DUP12 ADD SWAP7 PUSH2 0xFFFF DUP2 PUSH1 0xA0 SHR AND DUP9 MSTORE PUSH1 0xB0 SHR AND SWAP7 PUSH2 0x140 DUP12 ADD SWAP8 PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI DUP9 MSTORE PUSH1 0x5 DUP11 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH2 0x160 DUP14 ADD SWAP1 DUP2 MSTORE PUSH1 0x6 DUP13 ADD SLOAD DUP3 AND PUSH2 0x180 DUP15 ADD SWAP1 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP13 ADD SLOAD DUP3 AND PUSH2 0x1A0 DUP15 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP15 MLOAD DUP5 AND DUP16 MSTORE SWAP15 MLOAD DUP4 AND PUSH1 0x20 DUP16 ADD MSTORE SWAP11 MLOAD DUP3 AND SWAP14 DUP14 ADD SWAP14 SWAP1 SWAP14 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x60 DUP13 ADD MSTORE SWAP1 MLOAD PUSH5 0xFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x80 DUP13 ADD MSTORE SWAP2 MLOAD DUP3 AND PUSH1 0xA0 DUP12 ADD MSTORE SWAP2 MLOAD AND PUSH1 0xC0 DUP10 ADD MSTORE SWAP1 MLOAD PUSH4 0xFFFFFFFF AND PUSH1 0xE0 DUP9 ADD MSTORE SWAP1 MLOAD AND PUSH2 0x100 DUP7 ADD MSTORE MLOAD PUSH2 0xFFFF AND PUSH2 0x120 DUP6 ADD MSTORE MLOAD SWAP3 SWAP4 SWAP1 SWAP3 PUSH2 0x140F SWAP1 PUSH2 0x140 DUP7 ADD SWAP1 PUSH2 0x150F JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH2 0x160 DUP6 ADD MSTORE SWAP1 MLOAD DUP2 AND PUSH2 0x180 DUP5 ADD MSTORE SWAP1 MLOAD AND PUSH2 0x1A0 DUP3 ADD MSTORE PUSH2 0x1C0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0x1453 PUSH2 0x14B7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP1 SWAP3 SUB PUSH2 0x678 JUMPI PUSH1 0x20 PUSH32 0x82B5558FDEB37CB74B6E8EB4A87486D06C7EF8951416A5DC76C25F0BD9C3BB43 SWAP2 PUSH2 0x148D PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x3 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND PUSH1 0xFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x4 DUP3 LT ISZERO PUSH2 0x795 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH2 0x1C0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1575 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1575 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH0 NOT DUP2 EQ PUSH2 0x15B9 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x15B9 JUMPI JUMP JUMPDEST ISZERO PUSH2 0x15E1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x77726F6E6720737461747573 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x161C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x3737BA103090383630BCB2B9 PUSH1 0xA1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1657 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x1B9BDD081CDD185C9D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1691 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x34B73B30B634B2103BB4B73732B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI DUP1 ISZERO PUSH2 0x1725 JUMPI PUSH1 0x1 EQ PUSH2 0x16F8 JUMPI POP PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH13 0x1FFFFFFFFFFFFFFFFFFFFFFFE DUP2 PUSH1 0xA0 SHR SWAP2 PUSH1 0x9F SHR AND SWAP1 DUP1 DUP3 DIV PUSH1 0x2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x15B9 JUMPI SWAP1 JUMP JUMPDEST POP PUSH1 0x2 ADD SLOAD PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1743 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ PUSH2 0x1767 JUMPI PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO PUSH2 0x185B JUMPI PUSH4 0xFFFFFFFF PUSH1 0x3C SWAP2 AND LT PUSH2 0x181E JUMPI PUSH4 0xFFFFFFFF PUSH2 0x12C SWAP2 AND LT PUSH2 0x17D9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7265736F6C76652077696E646F7720746F6F2073686F72740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1A9BDA5B881DDA5B991BDDC81D1BDBC81CDA1BDC9D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x7374616B65203D203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x18D5 SWAP2 PUSH2 0x18D0 PUSH1 0x84 DUP4 PUSH2 0x1589 JUMP JUMPDEST PUSH2 0x1ADC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x18D5 SWAP2 PUSH2 0x18D0 PUSH1 0x64 DUP4 PUSH2 0x1589 JUMP JUMPDEST DUP1 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP2 PUSH1 0x4 DUP4 ADD SWAP3 PUSH1 0xFF DUP5 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH1 0x1 SUB PUSH2 0x1AAA JUMPI DUP4 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB1 SHL OR DUP5 SSTORE PUSH1 0x5 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x2 SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x9F DUP2 SWAP1 SHR PUSH13 0x1FFFFFFFFFFFFFFFFFFFFFFFE AND SWAP6 SWAP1 SWAP4 SWAP2 SWAP3 PUSH1 0xA0 DUP6 SWAP1 SHR DUP1 ISZERO SWAP1 DUP9 DIV SWAP1 SWAP2 EQ OR ISZERO PUSH2 0x15B9 JUMPI PUSH1 0x2 SLOAD PUSH0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP3 DUP4 ISZERO ISZERO DUP1 PUSH2 0x1A99 JUMPI JUMPDEST PUSH2 0x1A19 JUMPI JUMPDEST POP POP POP POP DUP3 DUP6 SUB SWAP5 DUP6 GT PUSH2 0x15B9 JUMPI PUSH32 0xC681B7344754F412A9BD7AE2CC1CCCD1E8BC6E7DA75AB89B91E9EEC5E4C40788 SWAP3 PUSH2 0x1A02 DUP7 DUP4 PUSH1 0x40 SWAP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SLOAD AND PUSH2 0x18D7 JUMP JUMPDEST DUP3 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 LOG3 JUMP JUMPDEST PUSH2 0xFFFF SWAP2 SWAP3 SWAP4 SWAP7 POP DUP2 SWAP1 SLOAD PUSH1 0xA0 SHR AND SWAP3 PUSH1 0xB0 SHR AND DUP3 GT PUSH2 0x1A68 JUMPI DUP2 DUP8 MUL SWAP2 DUP8 DUP4 DIV EQ DUP8 ISZERO OR ISZERO PUSH2 0x15B9 JUMPI PUSH2 0x2710 SWAP1 SWAP2 DIV SWAP4 PUSH2 0x1A5F SWAP2 DUP6 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18D7 JUMP JUMPDEST PUSH0 DUP1 DUP1 DUP1 PUSH2 0x19BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0xCCCACA407C40DAC2F PUSH1 0xBB SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0xFFFF DUP2 SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO PUSH2 0x19B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x6E6F7420616374697665 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0x66D JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0x1B2B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x1B0B JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x1B04 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0xC7 0xA7 PUSH17 0x82D60CA6A3C024D82B3D19FC1D363A5615 PUSH13 0xBD496A6F8392536AA44364736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "912:12025:10:-:0;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;3701:10;1273:26:0;1269:95;;-1:-1:-1;912:12025:10;;3701:10;-1:-1:-1;;;;;;912:12025:10;;;;;;;;;;3701:10;;-1:-1:-1;;;;;912:12025:10;;3052:40:0;;-1:-1:-1;3052:40:0;1716:1:4;912:12025:10;;;2376:1;912:12025;;2615:1;912:12025;;;;-1:-1:-1;;;;;;912:12025:10;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;1269:95:0;1322:31;;;-1:-1:-1;1322:31:0;-1:-1:-1;1322:31:0;912:12025:10;;-1:-1:-1;1322:31:0;912:12025:10;-1:-1:-1;912:12025:10;;;;;;-1:-1:-1;912:12025:10;;;;;-1:-1:-1;912:12025:10"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 5347,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_21224": {
									"entryPoint": 5303,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_21229": {
									"entryPoint": 5325,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_21234": {
									"entryPoint": 5369,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_uint32": {
									"entryPoint": 5445,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_uint32_21230": {
									"entryPoint": 5426,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_uint96": {
									"entryPoint": 5404,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_enum_Status": {
									"entryPoint": 5391,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_uint96_address_uint40_uint32_address": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 5581,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 5513,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_21225": {
									"entryPoint": 5464,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_callOptionalReturn": {
									"entryPoint": 6876,
									"id": 838,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_checkOwner": {
									"entryPoint": 5936,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_nonReentrantBefore": {
									"entryPoint": 5974,
									"id": 282,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_payout": {
									"entryPoint": 6418,
									"id": 2098,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_pot": {
									"entryPoint": 5831,
									"id": 1985,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_safeTransfer": {
									"entryPoint": 6359,
									"id": 461,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_safeTransferFrom": {
									"entryPoint": 6284,
									"id": 488,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"fun_validateCreate": {
									"entryPoint": 6060,
									"id": 1479,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"increment_uint256": {
									"entryPoint": 5547,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"require_helper_stringliteral": {
									"entryPoint": 5594,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_75d5": {
									"entryPoint": 5653,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_c56d": {
									"entryPoint": 5770,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_e770": {
									"entryPoint": 5712,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"update_storage_value_offsett_uint16_to_uint16": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_storage_value_offsett_uint32_to_uint32": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_storage_value_offsett_uint40_to_uint40": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_storage_value_offsett_uint96_to_uint96": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361015610011575f80fd5b5f803560e01c80631da6ed7c1461143a5780633d092b3d1461120257806345c67d861461108157806346904840146110595780634768d4ef14610f5e5780634e55a1c214610f1557806363feb74e14610cfe578063715018a614610ca75780638c4b2aae14610b855780638da5cb5b14610b5e57806392dc24bb146109af57806399ac48b4146108715780639ea7d58714610834578063bcae25a414610810578063bf769a3f146107ec578063c1eecdc6146107c6578063c5adf7c9146107a9578063e73b54a51461067c578063e8c228db146103a8578063f2fde38b146103225763feb8c43814610101575f80fd5b3461031f57602036600319011261031f5760043561011d611756565b808252600560205260408220906004820160ff815460b01c16600481101561030b576102d757600383019264ffffffffff845460281c16421161029f576001810180546001600160a01b03161561025e5780546001600160a01b0316330361022b577fbac6c1f65fa2e0f78a4e7dead8b72a284ff81ba7c397e22f9cf0e7ed2f7efd1a926101c460026020945b015460a081901c90309033906001600160a01b031661188c565b805460ff60b01b1916600160b01b179055845464ffffffffff60501b6101f4607883901c63ffffffff16426115cd565b60501b169064ffffffffff60501b19161780955560018060a01b039054169364ffffffffff6040519160501c168152a36001805580f35b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081a5b9d9a5d195960aa1b6044820152606490fd5b80546001600160a01b031916331781557fbac6c1f65fa2e0f78a4e7dead8b72a284ff81ba7c397e22f9cf0e7ed2f7efd1a926020926101c4906002906101aa565b60405162461bcd60e51b815260206004820152601060248201526f3537b4b7103bb4b73237bb9037bb32b960811b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b6e6f74206a6f696e61626c6560a01b6044820152606490fd5b634e487b7160e01b85526021600452602485fd5b80fd5b503461031f57602036600319011261031f5761033c6114b7565b610344611730565b6001600160a01b031680156103945781546001600160a01b03198116821783556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b631e4fbdf760e01b82526004829052602482fd5b503461067857610160366003190112610678576103c36114b7565b6103cb61151c565b916103d46114cd565b906103dd611532565b6103e5611545565b946103ee6114e3565b9160c435610104359660ff88168098036106785761040a611756565b6104158984866117ac565b6001600160a01b031696873b15610678576040519063d505accf60e01b825233600483015230602483015282604483015260e435606483015260848201526101243560a48201526101443560c48201525f8160e481838c5af1801561066d57610658575b506001600160601b0383168091106106225760045497889561049a876115ab565b60045586815260056020526040902080546001600160a01b03199081163317825560018201805482166001600160a01b038b8116919091179091558a1660a087901b9091161760028201559060038201934264ffffffffff1664ffffffffff1664ffffffffff1986541617855563ffffffff164290610518916115cd565b845469ffffffffff0000000000191660289190911b69ffffffffff000000000016178455835463ffffffff60781b191660789190911b63ffffffff60781b1617835560040180546001600160a01b038616600162ff000160a01b031982168117835560025461ffff60a01b166001600160b81b0319909216171790556105a09030338961188c565b54604080516001600160601b039390931683526001600160a01b039586166020840152602882901c64ffffffffff169083015260781c63ffffffff1660608201529216608083015233918060a08101037ff976ac1091ae1d609c0dc3a04834e4964b264db74217663204ce435fee968f5091a460018055604051908152602090f35b60405162461bcd60e51b815260206004820152600e60248201526d7065726d6974203c207374616b6560901b6044820152606490fd5b6106659195505f90611589565b5f935f610479565b6040513d5f823e3d90fd5b5f80fd5b34610678576040366003190112610678576004356106986114f9565b6106a0611756565b815f52600560205260405f2091600483015460ff8160b01c1660048110156107955760016106ce9114611650565b6001600160a01b03163314801561077f575b801561076c575b1561073657825461071993610714916001600160a01b038581169116811491821561071f575b505061168a565b611912565b60018055005b600101546001600160a01b0316149050858061070d565b60405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b6044820152606490fd5b505f546001600160a01b031633146106e7565b50335f52600360205260ff60405f2054166106e0565b634e487b7160e01b5f52602160045260245ffd5b34610678575f366003190112610678576020600454604051908152f35b346106785760203660031901126106785760206107e46004356116c7565b604051908152f35b34610678575f36600319011261067857602061ffff60025460b01c16604051908152f35b34610678575f36600319011261067857602061ffff60025460a01c16604051908152f35b34610678576020366003190112610678576001600160a01b036108556114b7565b165f526003602052602060ff60405f2054166040519015158152f35b346106785760203660031901126106785760043561088d611756565b805f52600560205260405f20600481019060ff825460b01c166004811015610795576108b990156115da565b64ffffffffff600382015460281c164211156109735780546001600160a01b0316330361093f57815460ff60b01b1916600360b01b17909155600281015490546109159160a081901c916001600160a01b0390811691166118d7565b7fd032e44272ccb930cd0264251a97b70771f63de576a3fbeff5f2afe58f9c91be5f80a260018055005b60405162461bcd60e51b815260206004820152600c60248201526b37b7363c9031b932b0ba37b960a11b6044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152733537b4b7103bb4b73237bb903737ba1037bb32b960611b6044820152606490fd5b34610678576040366003190112610678576004356109cb6114f9565b6109d3611756565b815f52600560205260405f2060ff600482015460b01c1660048110156107955760016109ff9114611650565b64ffffffffff600382015460501c164211610b205780546001600160a01b0383811691168181148015610b0a575b610a369061168a565b3314808015610af4575b610a4990611615565b15610adb576006820180546001600160a01b031916821790555b604051908152837f0c9b740236bb539e45eb1efa55cd846ada59902e71f281c7e6f8db14fe6582f060203393a360068101546001600160a01b03168015159182610ac4575b5050610ab45760018055005b610abd91611912565b8080610719565b600701546001600160a01b03161490508380610aa8565b6007820180546001600160a01b03191682179055610a63565b5060018301546001600160a01b03163314610a40565b5060018301546001600160a01b03168214610a2d565b60405162461bcd60e51b81526020600482015260166024820152753932b9b7b63aba34b7b7103bb4b73237bb9037bb32b960511b6044820152606490fd5b34610678575f366003190112610678575f546040516001600160a01b039091168152602090f35b3461067857606036600319011261067857610b9e6114b7565b6024359061ffff821690818303610678576044359161ffff831680840361067857610bc7611730565b6103e88111610c7757808211610c42577ff44d9b22cdd87e55b71b9245548303c18d17a3c912a4e0b135ea1330351a1fc19360409360018060a01b031695866002549261ffff60b01b9060b01b169267ffffffffffffffff60c01b16179061ffff60a01b9060a01b16171760025582519182526020820152a2005b60405162461bcd60e51b815260206004820152600d60248201526c0c8caccc2ead8e8407c40dac2f609b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676d6178203e31302560c01b6044820152606490fd5b34610678575f36600319011261067857610cbf611730565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461067857602036600319011261067857600435610d1a611756565b805f52600560205260405f20600481019060ff825460b01c166004811015610795576001610d4891146115da565b64ffffffffff600382015460501c16421115610ed05780546001600160a01b031633148015610eba575b610d7b90611615565b5f83815260066020908152604080832033845290915290205460ff16610e81575f838152600660209081526040808320338085529252909120805460ff191660011790556002820154610ddc9160a082901c916001600160a01b03166118d7565b5f83815260066020908152604080832084546001600160a01b0316845290915290205460ff169081610e50575b50610e145760018055005b805460ff60b01b1916600360b01b1790557fd032e44272ccb930cd0264251a97b70771f63de576a3fbeff5f2afe58f9c91be5f80a28080610719565b5f8481526006602090815260408083206001909401546001600160a01b03168352929052205460ff16905083610e09565b60405162461bcd60e51b815260206004820152601160248201527030b63932b0b23c903bb4ba34323930bbb760791b6044820152606490fd5b5060018101546001600160a01b03163314610d72565b60405162461bcd60e51b815260206004820152601760248201527f7265736f6c76652077696e646f77206e6f74206f7665720000000000000000006044820152606490fd5b3461067857604036600319011261067857610f2e6114f9565b6004355f52600660205260405f209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b3461067857602036600319011261067857600480355f9081526005602081815260409283902080546001820154600283015460038401549784015495840154600685015460079095015488516001600160a01b039586168152938516968401969096528184169783019790975260a090811c606083015264ffffffffff8089166080840152602889901c811683830152605089901c1660c083015260789790971c63ffffffff1660e08201528482166101008201529584901c61ffff166101208701526101c09594928116939181169216906110459061014086019060b01c60ff1661150f565b6101608401526101808301526101a0820152f35b34610678575f366003190112610678576002546040516001600160a01b039091168152602090f35b346106785760c03660031901126106785761109a6114b7565b6110a261151c565b6110aa6114cd565b6110b2611532565b916110bb611545565b906110c46114e3565b906110cd611756565b6110d88386836117ac565b6004549586936110e7856115ab565b6004555f85815260056020526040902080546001600160a01b03199081163317825560018201805482166001600160a01b038a81169190911790915560a086901b9091169084161760028201559060038201974264ffffffffff1664ffffffffff1664ffffffffff198a541617895563ffffffff164290611167916115cd565b885469ffffffffff0000000000191660289190911b69ffffffffff000000000016178855875463ffffffff60781b191660789190911b63ffffffff60781b1617875560040180546001600160a01b038516600162ff000160a01b031982168117835560025461ffff60a01b166001600160b81b0319909216171790556001600160a01b0316946105a06001600160601b03831630338961188c565b34610678576020366003190112610678575f6101a060405161122381611558565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152826101608201528261018082015201526004355f52600560205260405f2060405161128f81611558565b60018060a01b03825416815260018060a01b0360018301541691602082019283526002810154604083019060018060a01b0381168252606084019060a01c815260038301546080850164ffffffffff8216815260a086019164ffffffffff8160281c16835260c0870164ffffffffff8260501c16815263ffffffff60e089019260781c16825260048701549361010089019360018060a01b038616855260ff6101208b019661ffff8160a01c16885260b01c16966101408b0197600481101561079557885260058a01546001600160a01b039081166101608d0190815260068c015482166101808e019081526007909c015482166101a08e01908152604080519e5184168f529e51831660208f01529a5182169d8d019d909d5290516001600160601b031660608c0152905164ffffffffff90811660808c01529151821660a08b015291511660c0890152905163ffffffff1660e08801529051166101008601525161ffff16610120850152519293909261140f9061014086019061150f565b516001600160a01b03908116610160850152905181166101808401529051166101a08201526101c090f35b34610678576040366003190112610678576114536114b7565b602435908115158092036106785760207f82b5558fdeb37cb74b6e8eb4a87486d06c7ef8951416a5dc76c25f0bd9c3bb439161148d611730565b60018060a01b031692835f526003825260405f2060ff1981541660ff8316179055604051908152a2005b600435906001600160a01b038216820361067857565b604435906001600160a01b038216820361067857565b60a435906001600160a01b038216820361067857565b602435906001600160a01b038216820361067857565b9060048210156107955752565b602435906001600160601b038216820361067857565b6064359063ffffffff8216820361067857565b6084359063ffffffff8216820361067857565b6101c0810190811067ffffffffffffffff82111761157557604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761157557604052565b5f1981146115b95760010190565b634e487b7160e01b5f52601160045260245ffd5b919082018092116115b957565b156115e157565b60405162461bcd60e51b815260206004820152600c60248201526b77726f6e672073746174757360a01b6044820152606490fd5b1561161c57565b60405162461bcd60e51b815260206004820152600c60248201526b3737ba103090383630bcb2b960a11b6044820152606490fd5b1561165757565b60405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b6044820152606490fd5b1561169157565b60405162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b2103bb4b73732b960911b6044820152606490fd5b5f52600560205260405f2060ff600482015460b01c166004811015610795578015611725576001146116f857505f90565b600201546c01fffffffffffffffffffffffe8160a01c91609f1c1690808204600214901517156115b95790565b506002015460a01c90565b5f546001600160a01b0316330361174357565b63118cdaa760e01b5f523360045260245ffd5b600260015414611767576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160601b03161561185b5763ffffffff603c91161061181e5763ffffffff61012c9116106117d957565b60405162461bcd60e51b815260206004820152601860248201527f7265736f6c76652077696e646f7720746f6f2073686f727400000000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152741a9bda5b881dda5b991bddc81d1bdbc81cda1bdc9d605a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526807374616b65203d20360bc1b6044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526118d5916118d0608483611589565b611adc565b565b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044808301939093529181526118d5916118d0606483611589565b805f52600560205260405f2091600483019260ff845460b01c16600481101561079557600103611aaa57835460ff60b01b1916600160b11b1784556005810180546001600160a01b0319166001600160a01b03841617905560029081018054609f81901c6c01fffffffffffffffffffffffe16959093919260a085901c801590880490911417156115b9576002545f946001600160a01b0382169283151580611a99575b611a19575b505050508285039485116115b9577fc681b7344754f412a9bd7ae2cc1cccd1e8bc6e7da75ab89b91e9eec5e4c4078892611a02868360409560018060a01b039054166118d7565b825195865260208601526001600160a01b031693a3565b61ffff919293965081905460a01c169260b01c168211611a68578187029187830414871517156115b95761271090910493611a5f918591906001600160a01b03166118d7565b5f8080806119bb565b60405162461bcd60e51b81526020600482015260096024820152680cccaca407c40dac2f60bb1b6044820152606490fd5b5061ffff815460a01c1615156119b6565b60405162461bcd60e51b815260206004820152600a6024820152696e6f742061637469766560b01b6044820152606490fd5b905f602091828151910182855af11561066d575f513d611b2b57506001600160a01b0381163b155b611b0b5750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b60011415611b0456fea2646970667358221220d9c7a77082d60ca6a3c024d82b3d19fc1d363a56156cbd496a6f8392536aa44364736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1DA6ED7C EQ PUSH2 0x143A JUMPI DUP1 PUSH4 0x3D092B3D EQ PUSH2 0x1202 JUMPI DUP1 PUSH4 0x45C67D86 EQ PUSH2 0x1081 JUMPI DUP1 PUSH4 0x46904840 EQ PUSH2 0x1059 JUMPI DUP1 PUSH4 0x4768D4EF EQ PUSH2 0xF5E JUMPI DUP1 PUSH4 0x4E55A1C2 EQ PUSH2 0xF15 JUMPI DUP1 PUSH4 0x63FEB74E EQ PUSH2 0xCFE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xCA7 JUMPI DUP1 PUSH4 0x8C4B2AAE EQ PUSH2 0xB85 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xB5E JUMPI DUP1 PUSH4 0x92DC24BB EQ PUSH2 0x9AF JUMPI DUP1 PUSH4 0x99AC48B4 EQ PUSH2 0x871 JUMPI DUP1 PUSH4 0x9EA7D587 EQ PUSH2 0x834 JUMPI DUP1 PUSH4 0xBCAE25A4 EQ PUSH2 0x810 JUMPI DUP1 PUSH4 0xBF769A3F EQ PUSH2 0x7EC JUMPI DUP1 PUSH4 0xC1EECDC6 EQ PUSH2 0x7C6 JUMPI DUP1 PUSH4 0xC5ADF7C9 EQ PUSH2 0x7A9 JUMPI DUP1 PUSH4 0xE73B54A5 EQ PUSH2 0x67C JUMPI DUP1 PUSH4 0xE8C228DB EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x322 JUMPI PUSH4 0xFEB8C438 EQ PUSH2 0x101 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x31F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x31F JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x11D PUSH2 0x1756 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH1 0x4 DUP3 ADD PUSH1 0xFF DUP2 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x30B JUMPI PUSH2 0x2D7 JUMPI PUSH1 0x3 DUP4 ADD SWAP3 PUSH5 0xFFFFFFFFFF DUP5 SLOAD PUSH1 0x28 SHR AND TIMESTAMP GT PUSH2 0x29F JUMPI PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x25E JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x22B JUMPI PUSH32 0xBAC6C1F65FA2E0F78A4E7DEAD8B72A284FF81BA7C397E22F9CF0E7ED2F7EFD1A SWAP3 PUSH2 0x1C4 PUSH1 0x2 PUSH1 0x20 SWAP5 JUMPDEST ADD SLOAD PUSH1 0xA0 DUP2 SWAP1 SHR SWAP1 ADDRESS SWAP1 CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x188C JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE DUP5 SLOAD PUSH5 0xFFFFFFFFFF PUSH1 0x50 SHL PUSH2 0x1F4 PUSH1 0x78 DUP4 SWAP1 SHR PUSH4 0xFFFFFFFF AND TIMESTAMP PUSH2 0x15CD JUMP JUMPDEST PUSH1 0x50 SHL AND SWAP1 PUSH5 0xFFFFFFFFFF PUSH1 0x50 SHL NOT AND OR DUP1 SWAP6 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SLOAD AND SWAP4 PUSH5 0xFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 PUSH1 0x50 SHR AND DUP2 MSTORE LOG3 PUSH1 0x1 DUP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x1B9BDD081A5B9D9A5D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR DUP2 SSTORE PUSH32 0xBAC6C1F65FA2E0F78A4E7DEAD8B72A284FF81BA7C397E22F9CF0E7ED2F7EFD1A SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x1C4 SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x1AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x3537B4B7103BB4B73237BB9037BB32B9 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x6E6F74206A6F696E61626C65 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x31F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x31F JUMPI PUSH2 0x33C PUSH2 0x14B7 JUMP JUMPDEST PUSH2 0x344 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x394 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 OR DUP4 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST POP CALLVALUE PUSH2 0x678 JUMPI PUSH2 0x160 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0x3C3 PUSH2 0x14B7 JUMP JUMPDEST PUSH2 0x3CB PUSH2 0x151C JUMP JUMPDEST SWAP2 PUSH2 0x3D4 PUSH2 0x14CD JUMP JUMPDEST SWAP1 PUSH2 0x3DD PUSH2 0x1532 JUMP JUMPDEST PUSH2 0x3E5 PUSH2 0x1545 JUMP JUMPDEST SWAP5 PUSH2 0x3EE PUSH2 0x14E3 JUMP JUMPDEST SWAP2 PUSH1 0xC4 CALLDATALOAD PUSH2 0x104 CALLDATALOAD SWAP7 PUSH1 0xFF DUP9 AND DUP1 SWAP9 SUB PUSH2 0x678 JUMPI PUSH2 0x40A PUSH2 0x1756 JUMP JUMPDEST PUSH2 0x415 DUP10 DUP5 DUP7 PUSH2 0x17AC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP7 DUP8 EXTCODESIZE ISZERO PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE DUP3 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0xE4 CALLDATALOAD PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD MSTORE PUSH2 0x124 CALLDATALOAD PUSH1 0xA4 DUP3 ADD MSTORE PUSH2 0x144 CALLDATALOAD PUSH1 0xC4 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0xE4 DUP2 DUP4 DUP13 GAS CALL DUP1 ISZERO PUSH2 0x66D JUMPI PUSH2 0x658 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND DUP1 SWAP2 LT PUSH2 0x622 JUMPI PUSH1 0x4 SLOAD SWAP8 DUP9 SWAP6 PUSH2 0x49A DUP8 PUSH2 0x15AB JUMP JUMPDEST PUSH1 0x4 SSTORE DUP7 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND CALLER OR DUP3 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP11 AND PUSH1 0xA0 DUP8 SWAP1 SHL SWAP1 SWAP2 AND OR PUSH1 0x2 DUP3 ADD SSTORE SWAP1 PUSH1 0x3 DUP3 ADD SWAP4 TIMESTAMP PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF NOT DUP7 SLOAD AND OR DUP6 SSTORE PUSH4 0xFFFFFFFF AND TIMESTAMP SWAP1 PUSH2 0x518 SWAP2 PUSH2 0x15CD JUMP JUMPDEST DUP5 SLOAD PUSH10 0xFFFFFFFFFF0000000000 NOT AND PUSH1 0x28 SWAP2 SWAP1 SWAP2 SHL PUSH10 0xFFFFFFFFFF0000000000 AND OR DUP5 SSTORE DUP4 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x78 SHL NOT AND PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHL PUSH4 0xFFFFFFFF PUSH1 0x78 SHL AND OR DUP4 SSTORE PUSH1 0x4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x1 PUSH3 0xFF0001 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x2 SLOAD PUSH2 0xFFFF PUSH1 0xA0 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP3 AND OR OR SWAP1 SSTORE PUSH2 0x5A0 SWAP1 ADDRESS CALLER DUP10 PUSH2 0x188C JUMP JUMPDEST SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x28 DUP3 SWAP1 SHR PUSH5 0xFFFFFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x78 SHR PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE SWAP3 AND PUSH1 0x80 DUP4 ADD MSTORE CALLER SWAP2 DUP1 PUSH1 0xA0 DUP2 ADD SUB PUSH32 0xF976AC1091AE1D609C0DC3A04834E4964B264DB74217663204CE435FEE968F50 SWAP2 LOG4 PUSH1 0x1 DUP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x7065726D6974203C207374616B65 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x665 SWAP2 SWAP6 POP PUSH0 SWAP1 PUSH2 0x1589 JUMP JUMPDEST PUSH0 SWAP4 PUSH0 PUSH2 0x479 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x698 PUSH2 0x14F9 JUMP JUMPDEST PUSH2 0x6A0 PUSH2 0x1756 JUMP JUMPDEST DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP2 PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0xFF DUP2 PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH1 0x1 PUSH2 0x6CE SWAP2 EQ PUSH2 0x1650 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO PUSH2 0x77F JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x76C JUMPI JUMPDEST ISZERO PUSH2 0x736 JUMPI DUP3 SLOAD PUSH2 0x719 SWAP4 PUSH2 0x714 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND DUP2 EQ SWAP2 DUP3 ISZERO PUSH2 0x71F JUMPI JUMPDEST POP POP PUSH2 0x168A JUMP JUMPDEST PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP DUP6 DUP1 PUSH2 0x70D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1B9BDD08185D5D1A1BDC9A5E9959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6E7 JUMP JUMPDEST POP CALLER PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH2 0x6E0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x20 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x20 PUSH2 0x7E4 PUSH1 0x4 CALLDATALOAD PUSH2 0x16C7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x20 PUSH2 0xFFFF PUSH1 0x2 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x20 PUSH2 0xFFFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x855 PUSH2 0x14B7 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x88D PUSH2 0x1756 JUMP JUMPDEST DUP1 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x4 DUP2 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH2 0x8B9 SWAP1 ISZERO PUSH2 0x15DA JUMP JUMPDEST PUSH5 0xFFFFFFFFFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x28 SHR AND TIMESTAMP GT ISZERO PUSH2 0x973 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x93F JUMPI DUP2 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x3 PUSH1 0xB0 SHL OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0x915 SWAP2 PUSH1 0xA0 DUP2 SWAP1 SHR SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x18D7 JUMP JUMPDEST PUSH32 0xD032E44272CCB930CD0264251A97B70771F63DE576A3FBEFF5F2AFE58F9C91BE PUSH0 DUP1 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x37B7363C9031B932B0BA37B9 PUSH1 0xA1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x3537B4B7103BB4B73237BB903737BA1037BB32B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x9CB PUSH2 0x14F9 JUMP JUMPDEST PUSH2 0x9D3 PUSH2 0x1756 JUMP JUMPDEST DUP2 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH1 0x1 PUSH2 0x9FF SWAP2 EQ PUSH2 0x1650 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x50 SHR AND TIMESTAMP GT PUSH2 0xB20 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND DUP2 DUP2 EQ DUP1 ISZERO PUSH2 0xB0A JUMPI JUMPDEST PUSH2 0xA36 SWAP1 PUSH2 0x168A JUMP JUMPDEST CALLER EQ DUP1 DUP1 ISZERO PUSH2 0xAF4 JUMPI JUMPDEST PUSH2 0xA49 SWAP1 PUSH2 0x1615 JUMP JUMPDEST ISZERO PUSH2 0xADB JUMPI PUSH1 0x6 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE DUP4 PUSH32 0xC9B740236BB539E45EB1EFA55CD846ADA59902E71F281C7E6F8DB14FE6582F0 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO ISZERO SWAP2 DUP3 PUSH2 0xAC4 JUMPI JUMPDEST POP POP PUSH2 0xAB4 JUMPI PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH2 0xABD SWAP2 PUSH2 0x1912 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x719 JUMP JUMPDEST PUSH1 0x7 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP DUP4 DUP1 PUSH2 0xAA8 JUMP JUMPDEST PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH2 0xA63 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA40 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 EQ PUSH2 0xA2D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x3932B9B7B63ABA34B7B7103BB4B73237BB9037BB32B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0xB9E PUSH2 0x14B7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xFFFF DUP3 AND SWAP1 DUP2 DUP4 SUB PUSH2 0x678 JUMPI PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0xFFFF DUP4 AND DUP1 DUP5 SUB PUSH2 0x678 JUMPI PUSH2 0xBC7 PUSH2 0x1730 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT PUSH2 0xC77 JUMPI DUP1 DUP3 GT PUSH2 0xC42 JUMPI PUSH32 0xF44D9B22CDD87E55B71B9245548303C18D17A3C912A4E0B135EA1330351A1FC1 SWAP4 PUSH1 0x40 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP6 DUP7 PUSH1 0x2 SLOAD SWAP3 PUSH2 0xFFFF PUSH1 0xB0 SHL SWAP1 PUSH1 0xB0 SHL AND SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xC0 SHL AND OR SWAP1 PUSH2 0xFFFF PUSH1 0xA0 SHL SWAP1 PUSH1 0xA0 SHL AND OR OR PUSH1 0x2 SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0xC8CACCC2EAD8E8407C40DAC2F PUSH1 0x9B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x6D6178203E313025 PUSH1 0xC0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0xCBF PUSH2 0x1730 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xD1A PUSH2 0x1756 JUMP JUMPDEST DUP1 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x4 DUP2 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH1 0x1 PUSH2 0xD48 SWAP2 EQ PUSH2 0x15DA JUMP JUMPDEST PUSH5 0xFFFFFFFFFF PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x50 SHR AND TIMESTAMP GT ISZERO PUSH2 0xED0 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO PUSH2 0xEBA JUMPI JUMPDEST PUSH2 0xD7B SWAP1 PUSH2 0x1615 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xE81 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0xDDC SWAP2 PUSH1 0xA0 DUP3 SWAP1 SHR SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18D7 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 DUP2 PUSH2 0xE50 JUMPI JUMPDEST POP PUSH2 0xE14 JUMPI PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x3 PUSH1 0xB0 SHL OR SWAP1 SSTORE PUSH32 0xD032E44272CCB930CD0264251A97B70771F63DE576A3FBEFF5F2AFE58F9C91BE PUSH0 DUP1 LOG2 DUP1 DUP1 PUSH2 0x719 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 SWAP1 SWAP5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 POP DUP4 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x30B63932B0B23C903BB4BA34323930BBB7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7265736F6C76652077696E646F77206E6F74206F766572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0xF2E PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD SWAP8 DUP5 ADD SLOAD SWAP6 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x7 SWAP1 SWAP6 ADD SLOAD DUP9 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND SWAP7 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP2 DUP5 AND SWAP8 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0xA0 SWAP1 DUP2 SHR PUSH1 0x60 DUP4 ADD MSTORE PUSH5 0xFFFFFFFFFF DUP1 DUP10 AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x28 DUP10 SWAP1 SHR DUP2 AND DUP4 DUP4 ADD MSTORE PUSH1 0x50 DUP10 SWAP1 SHR AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x78 SWAP8 SWAP1 SWAP8 SHR PUSH4 0xFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE DUP5 DUP3 AND PUSH2 0x100 DUP3 ADD MSTORE SWAP6 DUP5 SWAP1 SHR PUSH2 0xFFFF AND PUSH2 0x120 DUP8 ADD MSTORE PUSH2 0x1C0 SWAP6 SWAP5 SWAP3 DUP2 AND SWAP4 SWAP2 DUP2 AND SWAP3 AND SWAP1 PUSH2 0x1045 SWAP1 PUSH2 0x140 DUP7 ADD SWAP1 PUSH1 0xB0 SHR PUSH1 0xFF AND PUSH2 0x150F JUMP JUMPDEST PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x180 DUP4 ADD MSTORE PUSH2 0x1A0 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0x109A PUSH2 0x14B7 JUMP JUMPDEST PUSH2 0x10A2 PUSH2 0x151C JUMP JUMPDEST PUSH2 0x10AA PUSH2 0x14CD JUMP JUMPDEST PUSH2 0x10B2 PUSH2 0x1532 JUMP JUMPDEST SWAP2 PUSH2 0x10BB PUSH2 0x1545 JUMP JUMPDEST SWAP1 PUSH2 0x10C4 PUSH2 0x14E3 JUMP JUMPDEST SWAP1 PUSH2 0x10CD PUSH2 0x1756 JUMP JUMPDEST PUSH2 0x10D8 DUP4 DUP7 DUP4 PUSH2 0x17AC JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP6 DUP7 SWAP4 PUSH2 0x10E7 DUP6 PUSH2 0x15AB JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH0 DUP6 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND CALLER OR DUP3 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xA0 DUP7 SWAP1 SHL SWAP1 SWAP2 AND SWAP1 DUP5 AND OR PUSH1 0x2 DUP3 ADD SSTORE SWAP1 PUSH1 0x3 DUP3 ADD SWAP8 TIMESTAMP PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF NOT DUP11 SLOAD AND OR DUP10 SSTORE PUSH4 0xFFFFFFFF AND TIMESTAMP SWAP1 PUSH2 0x1167 SWAP2 PUSH2 0x15CD JUMP JUMPDEST DUP9 SLOAD PUSH10 0xFFFFFFFFFF0000000000 NOT AND PUSH1 0x28 SWAP2 SWAP1 SWAP2 SHL PUSH10 0xFFFFFFFFFF0000000000 AND OR DUP9 SSTORE DUP8 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x78 SHL NOT AND PUSH1 0x78 SWAP2 SWAP1 SWAP2 SHL PUSH4 0xFFFFFFFF PUSH1 0x78 SHL AND OR DUP8 SSTORE PUSH1 0x4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x1 PUSH3 0xFF0001 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x2 SLOAD PUSH2 0xFFFF PUSH1 0xA0 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP3 AND OR OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 PUSH2 0x5A0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND ADDRESS CALLER DUP10 PUSH2 0x188C JUMP JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH0 PUSH2 0x1A0 PUSH1 0x40 MLOAD PUSH2 0x1223 DUP2 PUSH2 0x1558 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE DUP3 PUSH2 0x120 DUP3 ADD MSTORE DUP3 PUSH2 0x140 DUP3 ADD MSTORE DUP3 PUSH2 0x160 DUP3 ADD MSTORE DUP3 PUSH2 0x180 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x128F DUP2 PUSH2 0x1558 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 SLOAD AND DUP2 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 DUP4 ADD SLOAD AND SWAP2 PUSH1 0x20 DUP3 ADD SWAP3 DUP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 DUP4 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 PUSH1 0xA0 SHR DUP2 MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x80 DUP6 ADD PUSH5 0xFFFFFFFFFF DUP3 AND DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP2 PUSH5 0xFFFFFFFFFF DUP2 PUSH1 0x28 SHR AND DUP4 MSTORE PUSH1 0xC0 DUP8 ADD PUSH5 0xFFFFFFFFFF DUP3 PUSH1 0x50 SHR AND DUP2 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 DUP10 ADD SWAP3 PUSH1 0x78 SHR AND DUP3 MSTORE PUSH1 0x4 DUP8 ADD SLOAD SWAP4 PUSH2 0x100 DUP10 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP6 MSTORE PUSH1 0xFF PUSH2 0x120 DUP12 ADD SWAP7 PUSH2 0xFFFF DUP2 PUSH1 0xA0 SHR AND DUP9 MSTORE PUSH1 0xB0 SHR AND SWAP7 PUSH2 0x140 DUP12 ADD SWAP8 PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI DUP9 MSTORE PUSH1 0x5 DUP11 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH2 0x160 DUP14 ADD SWAP1 DUP2 MSTORE PUSH1 0x6 DUP13 ADD SLOAD DUP3 AND PUSH2 0x180 DUP15 ADD SWAP1 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP13 ADD SLOAD DUP3 AND PUSH2 0x1A0 DUP15 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP15 MLOAD DUP5 AND DUP16 MSTORE SWAP15 MLOAD DUP4 AND PUSH1 0x20 DUP16 ADD MSTORE SWAP11 MLOAD DUP3 AND SWAP14 DUP14 ADD SWAP14 SWAP1 SWAP14 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x60 DUP13 ADD MSTORE SWAP1 MLOAD PUSH5 0xFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x80 DUP13 ADD MSTORE SWAP2 MLOAD DUP3 AND PUSH1 0xA0 DUP12 ADD MSTORE SWAP2 MLOAD AND PUSH1 0xC0 DUP10 ADD MSTORE SWAP1 MLOAD PUSH4 0xFFFFFFFF AND PUSH1 0xE0 DUP9 ADD MSTORE SWAP1 MLOAD AND PUSH2 0x100 DUP7 ADD MSTORE MLOAD PUSH2 0xFFFF AND PUSH2 0x120 DUP6 ADD MSTORE MLOAD SWAP3 SWAP4 SWAP1 SWAP3 PUSH2 0x140F SWAP1 PUSH2 0x140 DUP7 ADD SWAP1 PUSH2 0x150F JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH2 0x160 DUP6 ADD MSTORE SWAP1 MLOAD DUP2 AND PUSH2 0x180 DUP5 ADD MSTORE SWAP1 MLOAD AND PUSH2 0x1A0 DUP3 ADD MSTORE PUSH2 0x1C0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x678 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x678 JUMPI PUSH2 0x1453 PUSH2 0x14B7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP1 SWAP3 SUB PUSH2 0x678 JUMPI PUSH1 0x20 PUSH32 0x82B5558FDEB37CB74B6E8EB4A87486D06C7EF8951416A5DC76C25F0BD9C3BB43 SWAP2 PUSH2 0x148D PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x3 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND PUSH1 0xFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x4 DUP3 LT ISZERO PUSH2 0x795 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x678 JUMPI JUMP JUMPDEST PUSH2 0x1C0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1575 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1575 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH0 NOT DUP2 EQ PUSH2 0x15B9 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x15B9 JUMPI JUMP JUMPDEST ISZERO PUSH2 0x15E1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x77726F6E6720737461747573 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x161C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x3737BA103090383630BCB2B9 PUSH1 0xA1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1657 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x1B9BDD081CDD185C9D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1691 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x34B73B30B634B2103BB4B73732B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI DUP1 ISZERO PUSH2 0x1725 JUMPI PUSH1 0x1 EQ PUSH2 0x16F8 JUMPI POP PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH13 0x1FFFFFFFFFFFFFFFFFFFFFFFE DUP2 PUSH1 0xA0 SHR SWAP2 PUSH1 0x9F SHR AND SWAP1 DUP1 DUP3 DIV PUSH1 0x2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x15B9 JUMPI SWAP1 JUMP JUMPDEST POP PUSH1 0x2 ADD SLOAD PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1743 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ PUSH2 0x1767 JUMPI PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO PUSH2 0x185B JUMPI PUSH4 0xFFFFFFFF PUSH1 0x3C SWAP2 AND LT PUSH2 0x181E JUMPI PUSH4 0xFFFFFFFF PUSH2 0x12C SWAP2 AND LT PUSH2 0x17D9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7265736F6C76652077696E646F7720746F6F2073686F72740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1A9BDA5B881DDA5B991BDDC81D1BDBC81CDA1BDC9D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x7374616B65203D203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x18D5 SWAP2 PUSH2 0x18D0 PUSH1 0x84 DUP4 PUSH2 0x1589 JUMP JUMPDEST PUSH2 0x1ADC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x18D5 SWAP2 PUSH2 0x18D0 PUSH1 0x64 DUP4 PUSH2 0x1589 JUMP JUMPDEST DUP1 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP2 PUSH1 0x4 DUP4 ADD SWAP3 PUSH1 0xFF DUP5 SLOAD PUSH1 0xB0 SHR AND PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x795 JUMPI PUSH1 0x1 SUB PUSH2 0x1AAA JUMPI DUP4 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT AND PUSH1 0x1 PUSH1 0xB1 SHL OR DUP5 SSTORE PUSH1 0x5 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x2 SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x9F DUP2 SWAP1 SHR PUSH13 0x1FFFFFFFFFFFFFFFFFFFFFFFE AND SWAP6 SWAP1 SWAP4 SWAP2 SWAP3 PUSH1 0xA0 DUP6 SWAP1 SHR DUP1 ISZERO SWAP1 DUP9 DIV SWAP1 SWAP2 EQ OR ISZERO PUSH2 0x15B9 JUMPI PUSH1 0x2 SLOAD PUSH0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP3 DUP4 ISZERO ISZERO DUP1 PUSH2 0x1A99 JUMPI JUMPDEST PUSH2 0x1A19 JUMPI JUMPDEST POP POP POP POP DUP3 DUP6 SUB SWAP5 DUP6 GT PUSH2 0x15B9 JUMPI PUSH32 0xC681B7344754F412A9BD7AE2CC1CCCD1E8BC6E7DA75AB89B91E9EEC5E4C40788 SWAP3 PUSH2 0x1A02 DUP7 DUP4 PUSH1 0x40 SWAP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SLOAD AND PUSH2 0x18D7 JUMP JUMPDEST DUP3 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 LOG3 JUMP JUMPDEST PUSH2 0xFFFF SWAP2 SWAP3 SWAP4 SWAP7 POP DUP2 SWAP1 SLOAD PUSH1 0xA0 SHR AND SWAP3 PUSH1 0xB0 SHR AND DUP3 GT PUSH2 0x1A68 JUMPI DUP2 DUP8 MUL SWAP2 DUP8 DUP4 DIV EQ DUP8 ISZERO OR ISZERO PUSH2 0x15B9 JUMPI PUSH2 0x2710 SWAP1 SWAP2 DIV SWAP4 PUSH2 0x1A5F SWAP2 DUP6 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18D7 JUMP JUMPDEST PUSH0 DUP1 DUP1 DUP1 PUSH2 0x19BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0xCCCACA407C40DAC2F PUSH1 0xBB SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0xFFFF DUP2 SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO PUSH2 0x19B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x6E6F7420616374697665 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0x66D JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0x1B2B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x1B0B JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x1B04 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0xC7 0xA7 PUSH17 0x82D60CA6A3C024D82B3D19FC1D363A5615 PUSH13 0xBD496A6F8392536AA44364736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "912:12025:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;2227:103:4;;:::i;:::-;912:12025:10;;;8023:7;912:12025;;;;;8052:8;912:12025;8052:8;;912:12025;;;;;;;;;;;;;;8132:15;;;912:12025;;;;;;;8113:15;:34;912:12025;;;8183:10;;912:12025;;-1:-1:-1;;;;;912:12025:10;8183:24;912:12025;;;;-1:-1:-1;;;;;912:12025:10;8231:10;:24;912:12025;;8537:46;8179:157;8346:68;8353:7;912:12025;8179:157;;8353:7;912:12025;;;;;;8399:4;;8379:10;;-1:-1:-1;;;;;912:12025:10;8346:68;:::i;:::-;912:12025;;-1:-1:-1;;;;912:12025:10;-1:-1:-1;;;912:12025:10;;;;;-1:-1:-1;;;8487:33:10;912:12025;;;;;;8113:15;8487:33;:::i;:::-;912:12025;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8537:46;912:12025;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;8179:157;912:12025;;-1:-1:-1;;;;;;912:12025:10;8315:10;912:12025;;;8537:46;;912:12025;;8346:68;;8353:7;;8179:157;;912:12025;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;:::i;:::-;1500:62:0;;:::i;:::-;-1:-1:-1;;;;;912:12025:10;2627:22:0;;2623:91;;912:12025:10;;-1:-1:-1;;;;;;912:12025:10;;;;;;-1:-1:-1;;;;;912:12025:10;3052:40:0;912:12025:10;;3052:40:0;912:12025:10;;2623:91:0;-1:-1:-1;;;2672:31:0;;912:12025:10;;;;;2672:31:0;;912:12025:10;;;;;;;-1:-1:-1;;912:12025:10;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;2227:103:4;;:::i;:::-;6566:16:10;;;;;:::i;:::-;-1:-1:-1;;;;;912:12025:10;;6653:91;;;;;912:12025;;;;;;6653:91;;6680:10;912:12025;6653:91;;912:12025;6700:4;912:12025;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6653:91;912:12025;6653:91;;;;;;;;;;;912:12025;;-1:-1:-1;;;;;912:12025:10;;6762:20;;;912:12025;;;;6817:13;;;;;;:::i;:::-;912:12025;;;;;6858:7;912:12025;;;;;;;-1:-1:-1;;;;;;912:12025:10;;;6680:10;912:12025;;;;6911:10;;912:12025;;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;;;;;;;6942:7;;;912:12025;;6992:11;;;7013:15;;912:12025;;;;;;;;;;;;;;7013:15;7064:34;;;;:::i;:::-;912:12025;;-1:-1:-1;;912:12025:10;;;;;;;;;;;;;-1:-1:-1;;;;912:12025:10;;;;;;-1:-1:-1;;;912:12025:10;;;;;7153:10;912:12025;;-1:-1:-1;;;;;912:12025:10;;-1:-1:-1;;;;;;912:12025:10;;;;;;6942:7;912:12025;-1:-1:-1;;;912:12025:10;-1:-1:-1;;;;;;912:12025:10;;;;;;;7254:64;;6700:4;6680:10;7254:64;;:::i;:::-;912:12025;;;;-1:-1:-1;;;;;912:12025:10;;;;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6680:10;;912:12025;;;;7334:118;;;;912:12025;;;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;6653:91;;;;;912:12025;6653:91;;:::i;:::-;912:12025;6653:91;;;;;912:12025;;;;;;;;;6653:91;912:12025;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;;;:::i;:::-;2227:103:4;;:::i;:::-;912:12025:10;;;9857:7;912:12025;;;;;9886:8;912:12025;9886:8;;912:12025;;;;;;;;;;;;;9878:50;9886:26;;9878:50;:::i;:::-;-1:-1:-1;;;;;912:12025:10;9959:10;:24;:50;;;;912:12025;9959:75;;;;912:12025;;;;;;10176:6;;10084:70;;-1:-1:-1;;;;;912:12025:10;;;;;10092:19;;;:43;;;;912:12025;10084:70;;;:::i;:::-;10176:6;:::i;:::-;912:12025;;;;10092:43;912:12025;10125:10;912:12025;-1:-1:-1;;;;;912:12025:10;10115:20;;-1:-1:-1;10092:43:10;;;;912:12025;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;9959:75;-1:-1:-1;912:12025:10;;-1:-1:-1;;;;;912:12025:10;9959:10;10013:21;9959:75;;:50;:10;;912:12025;;9987:10;912:12025;;;;;;;;9959:50;;912:12025;;;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;2397:30;912:12025;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;2345:32;912:12025;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;-1:-1:-1;;;;;912:12025:10;;:::i;:::-;;;;2451:42;912:12025;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;2227:103:4;;:::i;:::-;912:12025:10;;;10462:7;912:12025;;;;;;10491:8;;912:12025;;;;;;;;;;;;;10483:51;10491:26;;10483:51;:::i;:::-;912:12025;10570:15;;;912:12025;;;;10552:15;:33;912:12025;;;;;-1:-1:-1;;;;;912:12025:10;10628:10;:23;912:12025;;;;-1:-1:-1;;;;912:12025:10;-1:-1:-1;;;912:12025:10;;;;10722:7;;;912:12025;;;10715:48;;912:12025;;;;;-1:-1:-1;;;;;912:12025:10;;;;;10715:48;:::i;:::-;10778:17;912:12025;10778:17;;912:12025;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;;;:::i;:::-;2227:103:4;;:::i;:::-;912:12025:10;;;8975:7;912:12025;;;;;;;9004:8;;912:12025;;;;;;;;;;;8996:50;9004:26;;8996:50;:::i;:::-;912:12025;9083:17;;;912:12025;;;;9064:15;:36;912:12025;;;;-1:-1:-1;;;;;912:12025:10;;;;;9145:19;;;:43;;;;912:12025;9137:70;;;:::i;:::-;9225:10;:23;;:51;;;;912:12025;9217:76;;;:::i;:::-;9308:23;;;9347:13;;;912:12025;;-1:-1:-1;;;;;;912:12025:10;;;;;9304:130;912:12025;;;;;9225:10;9449:44;912:12025;9225:10;9449:44;;9508:13;;;912:12025;-1:-1:-1;;;;;912:12025:10;9508:27;;;;;:62;;9304:130;9504:112;;;;912:12025;;;;9504:112;9598:6;;;:::i;:::-;9504:112;;;;9508:62;9556:14;;912:12025;-1:-1:-1;;;;;912:12025:10;9539:31;;-1:-1:-1;9508:62:10;;;;9304:130;9400:14;;;912:12025;;-1:-1:-1;;;;;;912:12025:10;;;;;9304:130;;9225:51;-1:-1:-1;912:12025:10;9266:10;;912:12025;-1:-1:-1;;;;;912:12025:10;9225:10;9252:24;9225:51;;9145:43;-1:-1:-1;912:12025:10;9178:10;;912:12025;-1:-1:-1;;;;;912:12025:10;9168:20;;9145:43;;912:12025;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;1500:62:0;;:::i;:::-;4125:4:10;4111:18;;912:12025;;4160:28;;;912:12025;;4327:50;912:12025;;;;;;;;;;;4216:24;912:12025;;;;;;;;;;;;;;;;;;;;;;;;;4216:24;912:12025;;;;;;;;;;4327:50;912:12025;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;1500:62:0;;:::i;:::-;912:12025:10;;;-1:-1:-1;;;;;;912:12025:10;;;;-1:-1:-1;;;;;912:12025:10;3052:40:0;912:12025:10;;3052:40:0;912:12025:10;;;;;;;-1:-1:-1;;912:12025:10;;;;;;2227:103:4;;:::i;:::-;912:12025:10;;;11095:7;912:12025;;;;;;11124:8;;912:12025;;;;;;;;;;;;;;11116:51;11124:26;;11116:51;:::i;:::-;912:12025;11203:17;;;912:12025;;;;11185:15;:35;912:12025;;;;;-1:-1:-1;;;;;912:12025:10;11266:10;:23;:51;;;;912:12025;11258:76;;;:::i;:::-;912:12025;;;;11353:21;912:12025;;;;;;;;11266:10;912:12025;;;;;;;;;;;;;;;;11353:21;912:12025;;;;;;;;11266:10;912:12025;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;11484:7;;;912:12025;11477:49;;912:12025;;;;;-1:-1:-1;;;;;912:12025:10;11477:49;:::i;:::-;912:12025;;;;11353:21;912:12025;;;;;;;;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;11541:77;;912:12025;11537:170;;;912:12025;;;;11537:170;912:12025;;-1:-1:-1;;;;912:12025:10;-1:-1:-1;;;912:12025:10;;;11679:17;-1:-1:-1;;11679:17:10;11537:170;;;;11541:77;912:12025;;;;11353:21;912:12025;;;;;;;;;11607:10;;;912:12025;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;-1:-1:-1;11541:77:10;;;912:12025;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;11266:51;-1:-1:-1;912:12025:10;11307:10;;912:12025;-1:-1:-1;;;;;912:12025:10;11266:10;11293:24;11266:51;;912:12025;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;:::i;:::-;;;;;2668:73;912:12025;;;;;2668:73;912:12025;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;;;;;;2622:40;912:12025;;;;;;;;;;;;2622:40;;912:12025;2622:40;;;912:12025;2622:40;;;912:12025;2622:40;;;912:12025;2622:40;;;912:12025;2622:40;;;912:12025;2622:40;;;;912:12025;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;2312:27;912:12025;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;2227:103:4;;;:::i;:::-;5327:16:10;;;;;:::i;:::-;912:12025;;5360:13;;;;;;:::i;:::-;912:12025;;;;;;5401:7;912:12025;;;;;;;-1:-1:-1;;;;;;912:12025:10;;;5434:10;912:12025;;;;5454:10;;912:12025;;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;;;;;;;;5485:7;;;912:12025;;5535:11;;;5556:15;;912:12025;;;;;;;;;;;;;;5556:15;5607:34;;;;:::i;:::-;912:12025;;-1:-1:-1;;912:12025:10;;;;;;;;;;;;;-1:-1:-1;;;;912:12025:10;;;;;;-1:-1:-1;;;912:12025:10;;;;;5696:10;912:12025;;-1:-1:-1;;;;;912:12025:10;;-1:-1:-1;;;;;;912:12025:10;;;;;;5485:7;912:12025;-1:-1:-1;;;912:12025:10;-1:-1:-1;;;;;;912:12025:10;;;;;;;-1:-1:-1;;;;;912:12025:10;;5827:64;-1:-1:-1;;;;;912:12025:10;;5878:4;5434:10;912:12025;5827:64;:::i;912:12025::-;;;;;;-1:-1:-1;;912:12025:10;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11868:7;912:12025;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11868:7;912:12025;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;-1:-1:-1;;;;;912:12025:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;912:12025:10;;;;;;:::i;:::-;;;;;;;;;;;;;3954:29;1500:62:0;;;:::i;:::-;912:12025:10;;;;;;;;;;3910:10;912:12025;;;;;;;;;;;;;;;;;;;;;3954:29;912:12025;;;;;-1:-1:-1;;;;;912:12025:10;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;912:12025:10;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;912:12025:10;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;912:12025:10;;;;;;:::o;:::-;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;912:12025:10;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;912:12025:10;;;;;-1:-1:-1;912:12025:10;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;912:12025:10;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;11892:297;912:12025;;11975:7;912:12025;;;;;;12000:8;;;912:12025;;;;12000:8;912:12025;;;;;12000:26;;11996:55;;912:12025;12093:26;12089:59;;12174:8;912:12025;11892:297;:::o;12089:59::-;12136:7;;912:12025;;;;;;;;;;;;;12136:7;912:12025;;;;;;;12121:27;:::o;11996:55::-;12043:7;;;912:12025;;;12028:23;:::o;1796:162:0:-;1710:6;912:12025:10;-1:-1:-1;;;;;912:12025:10;735:10:8;1855:23:0;1851:101;;1796:162::o;1851:101::-;1901:40;;;1710:6;1901:40;735:10:8;1901:40:0;912:12025:10;;1710:6:0;1901:40;2336:287:4;1759:1;2468:7;912:12025:10;2468:19:4;1759:1;;;2468:7;912:12025:10;2336:287:4:o;1759:1::-;912:12025:10;;-1:-1:-1;;;1759:1:4;;;;;;;;;;;912:12025:10;1759:1:4;912:12025:10;;;1759:1:4;;;;7465:287:10;-1:-1:-1;;;;;912:12025:10;7586:9;912:12025;;;7647:2;912:12025;;7627:22;912:12025;;;7713:3;912:12025;;7693:23;912:12025;;7465:287::o;912:12025::-;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;1618:188:7;912:12025:10;;-1:-1:-1;;;1745:53:7;;;;-1:-1:-1;;;;;912:12025:10;;;1745:53:7;;;912:12025:10;;;;;;;;;;;;;;;;;1745:53:7;;;;;;;912:12025:10;1745:53:7;:::i;:::-;;:::i;:::-;1618:188::o;1219:160::-;912:12025:10;;-1:-1:-1;;;1328:43:7;;;;-1:-1:-1;;;;;912:12025:10;;;1328:43:7;;;912:12025:10;;;;;;;;;1328:43:7;;;;;;;912:12025:10;1328:43:7;:::i;12263:672:10:-;912:12025;-1:-1:-1;912:12025:10;12345:7;912:12025;;;-1:-1:-1;912:12025:10;12374:8;;;;912:12025;;;;;;;12374:8;912:12025;;;;;12386:14;12374:26;912:12025;;;;-1:-1:-1;;;;912:12025:10;-1:-1:-1;;;912:12025:10;;;12345:7;12461:8;;912:12025;;-1:-1:-1;;;;;;912:12025:10;-1:-1:-1;;;;;912:12025:10;;;;;12436:15;12513:7;;;912:12025;;;;;;;;;;;12513:7;;912:12025;;;;;;;;;;;;;;;;12436:15;912:12025;-1:-1:-1;;;;;;;912:12025:10;;;12565:26;;;;:42;;12263:672;12561:224;;12263:672;912:12025;;;;;;;;;;;;12891:37;912:12025;12869:5;912:12025;;;;;;;;;;;;12869:5;:::i;:::-;912:12025;;;;;;;;;-1:-1:-1;;;;;912:12025:10;;12891:37;12263:672::o;12561:224::-;912:12025;;;;;;;;;;;;;;;;12631:21;;912:12025;;;;;;;;;;;;;;;;12707:6;912:12025;;;;12770:3;;912:12025;;;-1:-1:-1;;;;;912:12025:10;12770:3;:::i;:::-;12561:224;;;;;;912:12025;;;-1:-1:-1;;;912:12025:10;;;12374:8;912:12025;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;12565:42;912:12025;;;;;;;12595:12;;12565:42;;912:12025;;;-1:-1:-1;;;912:12025:10;;;12374:8;912:12025;;;;;;;;-1:-1:-1;;;912:12025:10;;;;;;;8370:720:7;;-1:-1:-1;8507:421:7;8370:720;8507:421;;;;;;;;;;;;-1:-1:-1;8507:421:7;;8942:15;;-1:-1:-1;;;;;;912:12025:10;;8960:26:7;:31;8942:68;8938:146;;8370:720;:::o;8938:146::-;-1:-1:-1;;;;9033:40:7;;;-1:-1:-1;;;;;912:12025:10;;;;9033:40:7;912:12025:10;;;9033:40:7;8942:68;9009:1;8994:16;;8942:68;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1403600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"createMatch(address,uint96,address,uint32,uint32,address)": "infinite",
								"createMatchWithPermit(address,uint96,address,uint32,uint32,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"defaultFeeBps()": "2549",
								"feeRecipient()": "2341",
								"getMatch(uint256)": "infinite",
								"isResolver(address)": "2677",
								"joinMatch(uint256)": "infinite",
								"matches(uint256)": "17658",
								"maxFeeBps()": "2571",
								"nextMatchId()": "2603",
								"owner()": "2472",
								"pot(uint256)": "4933",
								"refundIfUnjoined(uint256)": "infinite",
								"renounceOwnership()": "28199",
								"resolveByReferee(uint256,address)": "infinite",
								"setFees(address,uint16,uint16)": "28650",
								"setResolver(address,bool)": "28123",
								"submitResult(uint256,address)": "infinite",
								"transferOwnership(address)": "28583",
								"withdrawAfterTimeout(uint256)": "infinite",
								"withdrawnAfterTimeout(uint256,address)": "2590"
							},
							"internal": {
								"_payout(uint256,address)": "infinite",
								"_validateCreate(uint96,uint32,uint32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "7"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "CODESIZE",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "7"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "7"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 3701,
									"end": 3711,
									"name": "CALLER",
									"source": 10
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 3701,
									"end": 3711,
									"name": "CALLER",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 3701,
									"end": 3711,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3701,
									"end": 3711,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 2376,
									"end": 2377,
									"name": "PUSH",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 2615,
									"end": 2616,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "C0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "OR",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "7D"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "B2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "RETURN",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "1E4FBDF7"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "E0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "tag",
									"source": 10,
									"value": "7"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 912,
									"end": 12937,
									"name": "REVERT",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d9c7a77082d60ca6a3c024d82b3d19fc1d363a56156cbd496a6f8392536aa44364736f6c634300081a0033",
									".code": [
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1DA6ED7C"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "3D092B3D"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "45C67D86"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "46904840"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4768D4EF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4E55A1C2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "63FEB74E"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "715018A6"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "8C4B2AAE"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "8DA5CB5B"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "92DC24BB"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "99AC48B4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "9EA7D587"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "BCAE25A4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "BF769A3F"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C1EECDC6"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C5ADF7C9"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E73B54A5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E8C228DB"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "F2FDE38B"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FEB8C438"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8023,
											"end": 8030,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 8052,
											"end": 8060,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8052,
											"end": 8060,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8052,
											"end": 8060,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8147,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 8132,
											"end": 8147,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8147,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8113,
											"end": 8128,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 8113,
											"end": 8147,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8183,
											"end": 8193,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8183,
											"end": 8193,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8183,
											"end": 8207,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8231,
											"end": 8241,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8231,
											"end": 8255,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8537,
											"end": 8583,
											"name": "PUSH",
											"source": 10,
											"value": "BAC6C1F65FA2E0F78A4E7DEAD8B72A284FF81BA7C397E22F9CF0E7ED2F7EFD1A"
										},
										{
											"begin": 8179,
											"end": 8336,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8346,
											"end": 8414,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 8353,
											"end": 8360,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8179,
											"end": 8336,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 8179,
											"end": 8336,
											"name": "tag",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 8179,
											"end": 8336,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8353,
											"end": 8360,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8399,
											"end": 8403,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 8399,
											"end": 8403,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8379,
											"end": 8389,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8379,
											"end": 8389,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8346,
											"end": 8414,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 8346,
											"end": 8414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8346,
											"end": 8414,
											"name": "tag",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 8346,
											"end": 8414,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8487,
											"end": 8520,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8113,
											"end": 8128,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 8487,
											"end": 8520,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 8487,
											"end": 8520,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8487,
											"end": 8520,
											"name": "tag",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 8487,
											"end": 8520,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8537,
											"end": 8583,
											"name": "LOG3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B9BDD081A5B9D9A5D1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8179,
											"end": 8336,
											"name": "tag",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 8179,
											"end": 8336,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8315,
											"end": 8325,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8537,
											"end": 8583,
											"name": "PUSH",
											"source": 10,
											"value": "BAC6C1F65FA2E0F78A4E7DEAD8B72A284FF81BA7C397E22F9CF0E7ED2F7EFD1A"
										},
										{
											"begin": 8537,
											"end": 8583,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8346,
											"end": 8414,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 8346,
											"end": 8414,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8353,
											"end": 8360,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 8353,
											"end": 8360,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8179,
											"end": 8336,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 8179,
											"end": 8336,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3537B4B7103BB4B73237BB9037BB32B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E6F74206A6F696E61626C65"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6566,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 6566,
											"end": 6582,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6582,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6582,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 6566,
											"end": 6582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6582,
											"name": "tag",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 6566,
											"end": 6582,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "D505ACCF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6680,
											"end": 6690,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6700,
											"end": 6704,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E4"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "118"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "POP",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6762,
											"end": 6782,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6762,
											"end": 6782,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6762,
											"end": 6782,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6817,
											"end": 6830,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 6817,
											"end": 6830,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 6817,
											"end": 6830,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 6817,
											"end": 6830,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 6817,
											"end": 6830,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 6817,
											"end": 6830,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 6817,
											"end": 6830,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6817,
											"end": 6830,
											"name": "tag",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 6817,
											"end": 6830,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6858,
											"end": 6865,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6680,
											"end": 6690,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6911,
											"end": 6921,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6911,
											"end": 6921,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 6942,
											"end": 6949,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6942,
											"end": 6949,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6942,
											"end": 6949,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6992,
											"end": 7003,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 6992,
											"end": 7003,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6992,
											"end": 7003,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7013,
											"end": 7028,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7013,
											"end": 7028,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7013,
											"end": 7028,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7098,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7098,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 7064,
											"end": 7098,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7098,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 7064,
											"end": 7098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7098,
											"name": "tag",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 7064,
											"end": 7098,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFF0000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF0000000000"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7153,
											"end": 7163,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF0001"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 6942,
											"end": 6949,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 7254,
											"end": 7318,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 7254,
											"end": 7318,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6700,
											"end": 6704,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 6680,
											"end": 6690,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7254,
											"end": 7318,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 7254,
											"end": 7318,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 7254,
											"end": 7318,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7254,
											"end": 7318,
											"name": "tag",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 7254,
											"end": 7318,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6680,
											"end": 6690,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 6680,
											"end": 6690,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7334,
											"end": 7452,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7334,
											"end": 7452,
											"name": "PUSH",
											"source": 10,
											"value": "F976AC1091AE1D609C0DC3A04834E4964B264DB74217663204CE435FEE968F50"
										},
										{
											"begin": 7334,
											"end": 7452,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7334,
											"end": 7452,
											"name": "LOG4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7065726D6974203C207374616B65"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "tag",
											"source": 10,
											"value": "118"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 6653,
											"end": 6744,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "tag",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "tag",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "tag",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 6653,
											"end": 6744,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9857,
											"end": 9864,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 9886,
											"end": 9894,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 9886,
											"end": 9894,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9886,
											"end": 9894,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 9878,
											"end": 9928,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 9886,
											"end": 9912,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9886,
											"end": 9912,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9878,
											"end": 9928,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9878,
											"end": 9928,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9878,
											"end": 9928,
											"name": "tag",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 9878,
											"end": 9928,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 9969,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 9983,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10009,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10009,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10009,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 9959,
											"end": 10009,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10034,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10034,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10034,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 9959,
											"end": 10034,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 10176,
											"end": 10182,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 10176,
											"end": 10182,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10092,
											"end": 10111,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10092,
											"end": 10111,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 10092,
											"end": 10111,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 10084,
											"end": 10154,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "tag",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10176,
											"end": 10182,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 10176,
											"end": 10182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10176,
											"end": 10182,
											"name": "tag",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 10176,
											"end": 10182,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "tag",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 10125,
											"end": 10135,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10115,
											"end": 10135,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 10115,
											"end": 10135,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 10092,
											"end": 10135,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B9BDD08185D5D1A1BDC9A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10034,
											"name": "tag",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 9959,
											"end": 10034,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 9969,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 10013,
											"end": 10034,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10034,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 9959,
											"end": 10034,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10009,
											"name": "tag",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 9959,
											"end": 10009,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 9969,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 9969,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9987,
											"end": 9997,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9959,
											"end": 10009,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 9959,
											"end": 10009,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 2397,
											"end": 2427,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 2345,
											"end": 2377,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2451,
											"end": 2493,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "176"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "176"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10462,
											"end": 10469,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 10491,
											"end": 10499,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10491,
											"end": 10499,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10483,
											"end": 10534,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 10491,
											"end": 10517,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10491,
											"end": 10517,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10483,
											"end": 10534,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 10483,
											"end": 10534,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10483,
											"end": 10534,
											"name": "tag",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 10483,
											"end": 10534,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 10570,
											"end": 10585,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 10570,
											"end": 10585,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10570,
											"end": 10585,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10552,
											"end": 10567,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 10552,
											"end": 10585,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10628,
											"end": 10638,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 10628,
											"end": 10651,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 10722,
											"end": 10729,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 10722,
											"end": 10729,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10722,
											"end": 10729,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 10715,
											"end": 10763,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 10715,
											"end": 10763,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10715,
											"end": 10763,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 10715,
											"end": 10763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10715,
											"end": 10763,
											"name": "tag",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 10715,
											"end": 10763,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10778,
											"end": 10795,
											"name": "PUSH",
											"source": 10,
											"value": "D032E44272CCB930CD0264251A97B70771F63DE576A3FBEFF5F2AFE58F9C91BE"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10778,
											"end": 10795,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 10778,
											"end": 10795,
											"name": "LOG2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "37B7363C9031B932B0BA37B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3537B4B7103BB4B73237BB903737BA1037BB32B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "61"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "190"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "190"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8975,
											"end": 8982,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 9004,
											"end": 9012,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9012,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8996,
											"end": 9046,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 9004,
											"end": 9030,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9030,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 8996,
											"end": 9046,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8996,
											"end": 9046,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8996,
											"end": 9046,
											"name": "tag",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 8996,
											"end": 9046,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 9083,
											"end": 9100,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 9083,
											"end": 9100,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9083,
											"end": 9100,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9064,
											"end": 9079,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 9064,
											"end": 9100,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9145,
											"end": 9164,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9145,
											"end": 9164,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9145,
											"end": 9164,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9145,
											"end": 9188,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9145,
											"end": 9188,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9145,
											"end": 9188,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 9145,
											"end": 9188,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9137,
											"end": 9207,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 9137,
											"end": 9207,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9137,
											"end": 9207,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 9137,
											"end": 9207,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9137,
											"end": 9207,
											"name": "tag",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 9137,
											"end": 9207,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9235,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9248,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9248,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9276,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9276,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9276,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 9225,
											"end": 9276,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "200"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9217,
											"end": 9293,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 9217,
											"end": 9293,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9217,
											"end": 9293,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 9217,
											"end": 9293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9217,
											"end": 9293,
											"name": "tag",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 9217,
											"end": 9293,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9308,
											"end": 9331,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9308,
											"end": 9331,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 9308,
											"end": 9331,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9347,
											"end": 9360,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 9347,
											"end": 9360,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9347,
											"end": 9360,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 9304,
											"end": 9434,
											"name": "tag",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 9304,
											"end": 9434,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9235,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9449,
											"end": 9493,
											"name": "PUSH",
											"source": 10,
											"value": "C9B740236BB539E45EB1EFA55CD846ADA59902E71F281C7E6F8DB14FE6582F0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9225,
											"end": 9235,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 9449,
											"end": 9493,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 9449,
											"end": 9493,
											"name": "LOG3",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9521,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 9508,
											"end": 9521,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9521,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9535,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9535,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9535,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9535,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9535,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9570,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 9508,
											"end": 9570,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9304,
											"end": 9434,
											"name": "tag",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 9304,
											"end": 9434,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "tag",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9598,
											"end": 9604,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 9598,
											"end": 9604,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9598,
											"end": 9604,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 9598,
											"end": 9604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9598,
											"end": 9604,
											"name": "tag",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 9598,
											"end": 9604,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 9504,
											"end": 9616,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9570,
											"name": "tag",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 9508,
											"end": 9570,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9556,
											"end": 9570,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 9556,
											"end": 9570,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9539,
											"end": 9570,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9539,
											"end": 9570,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9508,
											"end": 9570,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9570,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9508,
											"end": 9570,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 9508,
											"end": 9570,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9304,
											"end": 9434,
											"name": "tag",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 9304,
											"end": 9434,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9400,
											"end": 9414,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 9400,
											"end": 9414,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9400,
											"end": 9414,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 9304,
											"end": 9434,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 9304,
											"end": 9434,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9276,
											"name": "tag",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 9225,
											"end": 9276,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 9266,
											"end": 9276,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9266,
											"end": 9276,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9235,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 9252,
											"end": 9276,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9225,
											"end": 9276,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "200"
										},
										{
											"begin": 9225,
											"end": 9276,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9145,
											"end": 9188,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 9145,
											"end": 9188,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 9178,
											"end": 9188,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9178,
											"end": 9188,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9168,
											"end": 9188,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9168,
											"end": 9188,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9145,
											"end": 9188,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 9145,
											"end": 9188,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3932B9B7B63ABA34B7B7103BB4B73237BB9037BB32B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "51"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4125,
											"end": 4129,
											"name": "PUSH",
											"source": 10,
											"value": "3E8"
										},
										{
											"begin": 4111,
											"end": 4129,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4111,
											"end": 4129,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4160,
											"end": 4188,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4160,
											"end": 4188,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4160,
											"end": 4188,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4327,
											"end": 4377,
											"name": "PUSH",
											"source": 10,
											"value": "F44D9B22CDD87E55B71B9245548303C18D17A3C912A4E0B135EA1330351A1FC1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4216,
											"end": 4240,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 4216,
											"end": 4240,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4327,
											"end": 4377,
											"name": "LOG2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "D"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8CACCC2EAD8E8407C40DAC2F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6D6178203E313025"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11095,
											"end": 11102,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 11124,
											"end": 11132,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11124,
											"end": 11132,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 11116,
											"end": 11167,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 11124,
											"end": 11150,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11124,
											"end": 11150,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 11116,
											"end": 11167,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 11116,
											"end": 11167,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11116,
											"end": 11167,
											"name": "tag",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 11116,
											"end": 11167,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 11203,
											"end": 11220,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 11203,
											"end": 11220,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11203,
											"end": 11220,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 11185,
											"end": 11200,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 11185,
											"end": 11220,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11276,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11289,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11317,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11317,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11317,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 11266,
											"end": 11317,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11258,
											"end": 11334,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 11258,
											"end": 11334,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11258,
											"end": 11334,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 11258,
											"end": 11334,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11258,
											"end": 11334,
											"name": "tag",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 11258,
											"end": 11334,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11353,
											"end": 11374,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11276,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11353,
											"end": 11374,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11276,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 11484,
											"end": 11491,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 11484,
											"end": 11491,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11484,
											"end": 11491,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 11477,
											"end": 11526,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 11477,
											"end": 11526,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 11477,
											"end": 11526,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 11477,
											"end": 11526,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11477,
											"end": 11526,
											"name": "tag",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 11477,
											"end": 11526,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11353,
											"end": 11374,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11541,
											"end": 11618,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 11541,
											"end": 11618,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11537,
											"end": 11707,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11537,
											"end": 11707,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 11537,
											"end": 11707,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 11537,
											"end": 11707,
											"name": "tag",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 11537,
											"end": 11707,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 11679,
											"end": 11696,
											"name": "PUSH",
											"source": 10,
											"value": "D032E44272CCB930CD0264251A97B70771F63DE576A3FBEFF5F2AFE58F9C91BE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 11679,
											"end": 11696,
											"name": "LOG2",
											"source": 10
										},
										{
											"begin": 11537,
											"end": 11707,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11537,
											"end": 11707,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11537,
											"end": 11707,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 11537,
											"end": 11707,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11541,
											"end": 11618,
											"name": "tag",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 11541,
											"end": 11618,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11353,
											"end": 11374,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 11607,
											"end": 11617,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11607,
											"end": 11617,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 11607,
											"end": 11617,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11541,
											"end": 11618,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11541,
											"end": 11618,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 11541,
											"end": 11618,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "30B63932B0B23C903BB4BA34323930BBB7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11317,
											"name": "tag",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 11266,
											"end": 11317,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 11307,
											"end": 11317,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11307,
											"end": 11317,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11276,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 11293,
											"end": 11317,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 11266,
											"end": 11317,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 11266,
											"end": 11317,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "7265736F6C76652077696E646F77206E6F74206F766572000000000000000000"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2668,
											"end": 2741,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 2668,
											"end": 2741,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 2622,
											"end": 2662,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1C0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2312,
											"end": 2339,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "277"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "277"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5343,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 5327,
											"end": 5343,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5327,
											"end": 5343,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5327,
											"end": 5343,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5327,
											"end": 5343,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 5327,
											"end": 5343,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5327,
											"end": 5343,
											"name": "tag",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 5327,
											"end": 5343,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5373,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5373,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5373,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5373,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 5360,
											"end": 5373,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5373,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 5360,
											"end": 5373,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5360,
											"end": 5373,
											"name": "tag",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 5360,
											"end": 5373,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5401,
											"end": 5408,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5434,
											"end": 5444,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5454,
											"end": 5464,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5454,
											"end": 5464,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 5485,
											"end": 5492,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 5485,
											"end": 5492,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5485,
											"end": 5492,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5535,
											"end": 5546,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 5535,
											"end": 5546,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5535,
											"end": 5546,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5556,
											"end": 5571,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 5556,
											"end": 5571,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5556,
											"end": 5571,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 5607,
											"end": 5641,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5607,
											"end": 5641,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 5607,
											"end": 5641,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5607,
											"end": 5641,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 5607,
											"end": 5641,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5607,
											"end": 5641,
											"name": "tag",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 5607,
											"end": 5641,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFF0000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF0000000000"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5696,
											"end": 5706,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF0001"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 5485,
											"end": 5492,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 5827,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "128"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5878,
											"end": 5882,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 5434,
											"end": 5444,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 5827,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 5827,
											"end": 5891,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11868,
											"end": 11875,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "292"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "292"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11868,
											"end": 11875,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP15",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP13",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP15",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP15",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP16",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP15",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP16",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP11",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1C0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3954,
											"end": 3983,
											"name": "PUSH",
											"source": 10,
											"value": "82B5558FDEB37CB74B6E8EB4A87486D06C7EF8951416A5DC76C25F0BD9C3BB43"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "303"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "303"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3910,
											"end": 3920,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3954,
											"end": 3983,
											"name": "LOG2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1C0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "77726F6E6720737461747573"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "C"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3737BA103090383630BCB2B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B9BDD081CDD185C9D1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "E"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "34B73B30B634B2103BB4B73732B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "91"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 11892,
											"end": 12189,
											"name": "tag",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 11892,
											"end": 12189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11975,
											"end": 11982,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 12000,
											"end": 12008,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 12000,
											"end": 12008,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12000,
											"end": 12008,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12000,
											"end": 12008,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12000,
											"end": 12026,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 12000,
											"end": 12026,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11996,
											"end": 12051,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "338"
										},
										{
											"begin": 11996,
											"end": 12051,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 12093,
											"end": 12119,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 12089,
											"end": 12148,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 12089,
											"end": 12148,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12174,
											"end": 12182,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11892,
											"end": 12189,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11892,
											"end": 12189,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12089,
											"end": 12148,
											"name": "tag",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 12089,
											"end": 12148,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12136,
											"end": 12143,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 12136,
											"end": 12143,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1FFFFFFFFFFFFFFFFFFFFFFFE"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "9F"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 12136,
											"end": 12143,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12121,
											"end": 12148,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12121,
											"end": 12148,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11996,
											"end": 12051,
											"name": "tag",
											"source": 10,
											"value": "338"
										},
										{
											"begin": 11996,
											"end": 12051,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12043,
											"end": 12050,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12043,
											"end": 12050,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 12043,
											"end": 12050,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 12028,
											"end": 12051,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12028,
											"end": 12051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "344"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "tag",
											"source": 0,
											"value": "344"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "118CDAA7"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "346"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 2336,
											"end": 2623,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "tag",
											"source": 4,
											"value": "346"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7465,
											"end": 7752,
											"name": "tag",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 7465,
											"end": 7752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7586,
											"end": 7595,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "348"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7647,
											"end": 7649,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7627,
											"end": 7649,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7713,
											"end": 7716,
											"name": "PUSH",
											"source": 10,
											"value": "12C"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7693,
											"end": 7716,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7465,
											"end": 7752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "7265736F6C76652077696E646F7720746F6F2073686F72740000000000000000"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1A9BDA5B881DDA5B991BDDC81D1BDBC81CDA1BDC9D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "348"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7374616B65203D203"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "BC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1806,
											"name": "tag",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 1618,
											"end": 1806,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 1745,
											"end": 1798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "tag",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 1745,
											"end": 1798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "tag",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1618,
											"end": 1806,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 1328,
											"end": 1371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 12263,
											"end": 12935,
											"name": "tag",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 12263,
											"end": 12935,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 12345,
											"end": 12352,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 12374,
											"end": 12382,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12374,
											"end": 12382,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 12374,
											"end": 12382,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12374,
											"end": 12382,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12374,
											"end": 12382,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12386,
											"end": 12400,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 12374,
											"end": 12400,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 12345,
											"end": 12352,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 12461,
											"end": 12469,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12461,
											"end": 12469,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 12436,
											"end": 12451,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 12513,
											"end": 12520,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12513,
											"end": 12520,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 12513,
											"end": 12520,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "9F"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1FFFFFFFFFFFFFFFFFFFFFFFE"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 12513,
											"end": 12520,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12513,
											"end": 12520,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12436,
											"end": 12451,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP5",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 12565,
											"end": 12591,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12565,
											"end": 12591,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12565,
											"end": 12591,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12565,
											"end": 12591,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 12565,
											"end": 12607,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 12565,
											"end": 12607,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12263,
											"end": 12935,
											"name": "tag",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 12263,
											"end": 12935,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12263,
											"end": 12935,
											"name": "tag",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 12263,
											"end": 12935,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12891,
											"end": 12928,
											"name": "PUSH",
											"source": 10,
											"value": "C681B7344754F412A9BD7AE2CC1CCCD1E8BC6E7DA75AB89B91E9EEC5E4C40788"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 12869,
											"end": 12874,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12869,
											"end": 12874,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 12869,
											"end": 12874,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12869,
											"end": 12874,
											"name": "tag",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 12869,
											"end": 12874,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 12891,
											"end": 12928,
											"name": "LOG3",
											"source": 10
										},
										{
											"begin": 12263,
											"end": 12935,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "tag",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "B0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12631,
											"end": 12652,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12631,
											"end": 12652,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12707,
											"end": 12713,
											"name": "PUSH",
											"source": 10,
											"value": "2710"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 12770,
											"end": 12773,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 12770,
											"end": 12773,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12770,
											"end": 12773,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 12770,
											"end": 12773,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12770,
											"end": 12773,
											"name": "tag",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 12770,
											"end": 12773,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 12561,
											"end": 12785,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12374,
											"end": 12382,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "CCCACA407C40DAC2F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "BB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 12565,
											"end": 12607,
											"name": "tag",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 12565,
											"end": 12607,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "FFFF"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12595,
											"end": 12607,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12595,
											"end": 12607,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12565,
											"end": 12607,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 12565,
											"end": 12607,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "tag",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12374,
											"end": 12382,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "A"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E6F7420616374697665"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "tag",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "116"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 8957,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 8942,
											"end": 8957,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8960,
											"end": 8986,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 8960,
											"end": 8991,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 7,
											"value": "380"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "381"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8370,
											"end": 9090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "tag",
											"source": 7,
											"value": "381"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5274AFE7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 912,
											"end": 12937,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9009,
											"end": 9010,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "380"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMP",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"Connect4Stakes.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"createMatch(address,uint96,address,uint32,uint32,address)": "45c67d86",
							"createMatchWithPermit(address,uint96,address,uint32,uint32,address,uint256,uint256,uint8,bytes32,bytes32)": "e8c228db",
							"defaultFeeBps()": "bcae25a4",
							"feeRecipient()": "46904840",
							"getMatch(uint256)": "3d092b3d",
							"isResolver(address)": "9ea7d587",
							"joinMatch(uint256)": "feb8c438",
							"matches(uint256)": "4768d4ef",
							"maxFeeBps()": "bf769a3f",
							"nextMatchId()": "c5adf7c9",
							"owner()": "8da5cb5b",
							"pot(uint256)": "c1eecdc6",
							"refundIfUnjoined(uint256)": "99ac48b4",
							"renounceOwnership()": "715018a6",
							"resolveByReferee(uint256,address)": "e73b54a5",
							"setFees(address,uint16,uint16)": "8c4b2aae",
							"setResolver(address,bool)": "1da6ed7c",
							"submitResult(uint256,address)": "92dc24bb",
							"transferOwnership(address)": "f2fde38b",
							"withdrawAfterTimeout(uint256)": "63feb74e",
							"withdrawnAfterTimeout(uint256,address)": "4e55a1c2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"defaultFeeBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxFeeBps\",\"type\":\"uint16\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolveWindow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"MatchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolveDeadline\",\"type\":\"uint256\"}],\"name\":\"MatchJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MatchRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MatchResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"MatchResultSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"ResolverSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startDeadlineSec\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"resolveWindowSec\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"createMatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startDeadlineSec\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"resolveWindowSec\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permitValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"createMatchWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMatch\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"internalType\":\"uint40\",\"name\":\"createdAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startDeadline\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"resolveDeadline\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"resolveWindow\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"enum Connect4Stakes.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorVote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponentVote\",\"type\":\"address\"}],\"internalType\":\"struct Connect4Stakes.Match\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isResolver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"joinMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matches\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"},{\"internalType\":\"uint40\",\"name\":\"createdAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startDeadline\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"resolveDeadline\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"resolveWindow\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"enum Connect4Stakes.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorVote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponentVote\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeeBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMatchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"refundIfUnjoined\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"resolveByReferee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_defaultFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_maxFeeBps\",\"type\":\"uint16\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"submitResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawAfterTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnAfterTimeout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"createMatch(address,uint96,address,uint32,uint32,address)\":{\"params\":{\"opponent\":\"If nonzero, only this address may join. Zero => open challenge\",\"resolveWindowSec\":\"Seconds allowed for resolution after opponent joins (>= 300)\",\"resolver\":\"Optional per-match referee (can be zero)\",\"stake\":\"Amount each player must deposit (same token decimals for both)\",\"startDeadlineSec\":\"Seconds from now for the join window (>= 60)\",\"token\":\"ERC-20 token address for stakes\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"submitResult(uint256,address)\":{\"params\":{\"id\":\"Match id\",\"winner\":\"Claimed winner (must be creator or opponent)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createMatch(address,uint96,address,uint32,uint32,address)\":{\"notice\":\"Create a match (creator must approve this contract for `stake` first, unless using permit).\"},\"createMatchWithPermit(address,uint96,address,uint32,uint32,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Same as createMatch but uses EIP-2612 permit so the creator can skip an approve tx.\"},\"joinMatch(uint256)\":{\"notice\":\"Opponent joins an existing match by depositing the same stake.         If opponent was unspecified (open challenge), the caller becomes opponent.\"},\"refundIfUnjoined(uint256)\":{\"notice\":\"If nobody joined by startDeadline, creator refunds their stake.\"},\"resolveByReferee(uint256,address)\":{\"notice\":\"Referee path: per-match resolver, global resolver, or owner can finalize anytime after start.\"},\"submitResult(uint256,address)\":{\"notice\":\"Players submit their view of the winner. If both match, payout immediately.\"},\"withdrawAfterTimeout(uint256)\":{\"notice\":\"If a started match wasn't resolved by resolveDeadline, each player can withdraw their own stake.         When both have withdrawn, status flips to Refunded.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Connect4Stakes.sol\":\"Connect4Stakes\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x2fa0657dd7b8bc75475a47f64bc04a9adb42236b15d65e6781594ea69a46c3e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7496f42681aed94bf0142a077324e50b86046610c1724e7c12e96cf1c365914a\",\"dweb:/ipfs/QmZvhNdSAAbN4PKPdheAqwpXukUiXp3Q3TdQccDMg2NDTV\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]},\"Connect4Stakes.sol\":{\"keccak256\":\"0x6179cd98efad38e573989ce1d01a1ea3c897a566cb2829c77587e84e7eaab9e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://329fe7d991a91535a4ba5550842ef379a52dff54953360a8f618d6989d47daa6\",\"dweb:/ipfs/QmPiNre3MZtjs9N6R6GfcjGJjogHCnPCBHVmg8QSJDn2ng\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "Connect4Stakes.sol:Connect4Stakes",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 248,
								"contract": "Connect4Stakes.sol:Connect4Stakes",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 973,
								"contract": "Connect4Stakes.sol:Connect4Stakes",
								"label": "feeRecipient",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 976,
								"contract": "Connect4Stakes.sol:Connect4Stakes",
								"label": "defaultFeeBps",
								"offset": 20,
								"slot": "2",
								"type": "t_uint16"
							},
							{
								"astId": 979,
								"contract": "Connect4Stakes.sol:Connect4Stakes",
								"label": "maxFeeBps",
								"offset": 22,
								"slot": "2",
								"type": "t_uint16"
							},
							{
								"astId": 983,
								"contract": "Connect4Stakes.sol:Connect4Stakes",
								"label": "isResolver",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 986,
								"contract": "Connect4Stakes.sol:Connect4Stakes",
								"label": "nextMatchId",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 991,
								"contract": "Connect4Stakes.sol:Connect4Stakes",
								"label": "matches",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_uint256,t_struct(Match)971_storage)"
							},
							{
								"astId": 997,
								"contract": "Connect4Stakes.sol:Connect4Stakes",
								"label": "withdrawnAfterTimeout",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_enum(Status)941": {
								"encoding": "inplace",
								"label": "enum Connect4Stakes.Status",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_uint256,t_struct(Match)971_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct Connect4Stakes.Match)",
								"numberOfBytes": "32",
								"value": "t_struct(Match)971_storage"
							},
							"t_struct(Match)971_storage": {
								"encoding": "inplace",
								"label": "struct Connect4Stakes.Match",
								"members": [
									{
										"astId": 943,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "creator",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 945,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "opponent",
										"offset": 0,
										"slot": "1",
										"type": "t_address"
									},
									{
										"astId": 947,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "token",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 949,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "stake",
										"offset": 20,
										"slot": "2",
										"type": "t_uint96"
									},
									{
										"astId": 951,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "createdAt",
										"offset": 0,
										"slot": "3",
										"type": "t_uint40"
									},
									{
										"astId": 953,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "startDeadline",
										"offset": 5,
										"slot": "3",
										"type": "t_uint40"
									},
									{
										"astId": 955,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "resolveDeadline",
										"offset": 10,
										"slot": "3",
										"type": "t_uint40"
									},
									{
										"astId": 957,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "resolveWindow",
										"offset": 15,
										"slot": "3",
										"type": "t_uint32"
									},
									{
										"astId": 959,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "resolver",
										"offset": 0,
										"slot": "4",
										"type": "t_address"
									},
									{
										"astId": 961,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "feeBps",
										"offset": 20,
										"slot": "4",
										"type": "t_uint16"
									},
									{
										"astId": 964,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "status",
										"offset": 22,
										"slot": "4",
										"type": "t_enum(Status)941"
									},
									{
										"astId": 966,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "winner",
										"offset": 0,
										"slot": "5",
										"type": "t_address"
									},
									{
										"astId": 968,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "creatorVote",
										"offset": 0,
										"slot": "6",
										"type": "t_address"
									},
									{
										"astId": 970,
										"contract": "Connect4Stakes.sol:Connect4Stakes",
										"label": "opponentVote",
										"offset": 0,
										"slot": "7",
										"type": "t_address"
									}
								],
								"numberOfBytes": "256"
							},
							"t_uint16": {
								"encoding": "inplace",
								"label": "uint16",
								"numberOfBytes": "2"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint32": {
								"encoding": "inplace",
								"label": "uint32",
								"numberOfBytes": "4"
							},
							"t_uint40": {
								"encoding": "inplace",
								"label": "uint40",
								"numberOfBytes": "5"
							},
							"t_uint96": {
								"encoding": "inplace",
								"label": "uint96",
								"numberOfBytes": "12"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createMatch(address,uint96,address,uint32,uint32,address)": {
								"notice": "Create a match (creator must approve this contract for `stake` first, unless using permit)."
							},
							"createMatchWithPermit(address,uint96,address,uint32,uint32,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Same as createMatch but uses EIP-2612 permit so the creator can skip an approve tx."
							},
							"joinMatch(uint256)": {
								"notice": "Opponent joins an existing match by depositing the same stake.         If opponent was unspecified (open challenge), the caller becomes opponent."
							},
							"refundIfUnjoined(uint256)": {
								"notice": "If nobody joined by startDeadline, creator refunds their stake."
							},
							"resolveByReferee(uint256,address)": {
								"notice": "Referee path: per-match resolver, global resolver, or owner can finalize anytime after start."
							},
							"submitResult(uint256,address)": {
								"notice": "Players submit their view of the winner. If both match, payout immediately."
							},
							"withdrawAfterTimeout(uint256)": {
								"notice": "If a started match wasn't resolved by resolveDeadline, each player can withdraw their own stake.         When both have withdrawn, status flips to Refunded."
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							910
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 911,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 910,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 910,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								910
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 892,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 892,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
					"exportedSymbols": {
						"IERC1363": [
							229
						],
						"IERC165": [
							922
						],
						"IERC20": [
							380
						]
					},
					"id": 230,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 151,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 230,
							"sourceUnit": 238,
							"src": "133:36:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 150,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 380,
										"src": "141:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 153,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 230,
							"sourceUnit": 234,
							"src": "170:38:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 152,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 922,
										"src": "178:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 155,
										"name": "IERC20",
										"nameLocations": [
											"590:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 380,
										"src": "590:6:1"
									},
									"id": 156,
									"nodeType": "InheritanceSpecifier",
									"src": "590:6:1"
								},
								{
									"baseName": {
										"id": 157,
										"name": "IERC165",
										"nameLocations": [
											"598:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 922,
										"src": "598:7:1"
									},
									"id": 158,
									"nodeType": "InheritanceSpecifier",
									"src": "598:7:1"
								}
							],
							"canonicalName": "IERC1363",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 154,
								"nodeType": "StructuredDocumentation",
								"src": "210:357:1",
								"text": " @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."
							},
							"fullyImplemented": false,
							"id": 229,
							"linearizedBaseContracts": [
								229,
								922,
								380
							],
							"name": "IERC1363",
							"nameLocation": "578:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "1148:370:1",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "1296ee62",
									"id": 168,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "1532:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1556:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1548:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1548:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1568:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1560:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1560:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1547:27:1"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1593:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 165,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1593:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1592:6:1"
									},
									"scope": 229,
									"src": "1523:76:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 169,
										"nodeType": "StructuredDocumentation",
										"src": "1605:453:1",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "4000aea0",
									"id": 180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "2072:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2096:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2088:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2088:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2108:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2100:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2100:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2130:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2115:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 174,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2115:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2087:48:1"
									},
									"returnParameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2154:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 177,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2154:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2153:6:1"
									},
									"scope": 229,
									"src": "2063:97:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 181,
										"nodeType": "StructuredDocumentation",
										"src": "2166:453:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "d8fbe994",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "2633:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2661:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2653:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2675:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2667:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2667:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2687:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2679:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2652:41:1"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2712:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2712:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:6:1"
									},
									"scope": 229,
									"src": "2624:94:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "2724:536:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "c1d34b89",
									"id": 206,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "3274:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3302:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3294:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3294:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3316:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3308:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3308:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3328:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3320:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3350:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3335:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 200,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3335:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3293:62:1"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3374:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 203,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3374:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3373:6:1"
									},
									"scope": 229,
									"src": "3265:115:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "3386:390:1",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "3177029f",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "3790:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3813:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3805:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3805:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3830:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3822:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3822:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3804:32:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3855:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 213,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3855:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3854:6:1"
									},
									"scope": 229,
									"src": "3781:80:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "3867:478:1",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "cae9ca51",
									"id": 228,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "4359:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4382:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4374:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 218,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4374:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4399:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4391:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4391:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4421:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4406:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 222,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4406:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4373:53:1"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4445:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 225,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4445:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4444:6:1"
									},
									"scope": 229,
									"src": "4350:101:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 230,
							"src": "568:3885:1",
							"usedErrors": [],
							"usedEvents": [
								314,
								323
							]
						}
					],
					"src": "107:4347:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							922
						]
					},
					"id": 234,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 231,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "106:25:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../utils/introspection/IERC165.sol",
							"id": 233,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 234,
							"sourceUnit": 923,
							"src": "133:59:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 232,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 922,
										"src": "141:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "106:87:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							380
						]
					},
					"id": 238,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 235,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "105:25:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 237,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 238,
							"sourceUnit": 381,
							"src": "132:49:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 236,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 380,
										"src": "140:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "105:77:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							302
						]
					},
					"id": 303,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 239,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 240,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:4",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 302,
							"linearizedBaseContracts": [
								302
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 243,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 302,
									"src": "1676:41:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 241,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 242,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 246,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:4",
									"nodeType": "VariableDeclaration",
									"scope": 302,
									"src": "1723:37:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 244,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 245,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 248,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 302,
									"src": "1767:23:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 247,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 255,
										"nodeType": "Block",
										"src": "1811:39:4",
										"statements": [
											{
												"expression": {
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 251,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "1821:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 252,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 243,
														"src": "1831:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:4"
											}
										]
									},
									"id": 256,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:4"
									},
									"returnParameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:4"
									},
									"scope": 302,
									"src": "1797:53:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 266,
										"nodeType": "Block",
										"src": "2251:79:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 259,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 282,
														"src": "2261:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 261,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:4"
											},
											{
												"id": 262,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:4"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 263,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 290,
														"src": "2303:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 265,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:4"
											}
										]
									},
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:4",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 267,
									"name": "nonReentrant",
									"nameLocation": "2236:12:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:4"
									},
									"src": "2227:103:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 281,
										"nodeType": "Block",
										"src": "2375:248:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 273,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 271,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 248,
																"src": "2468:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 272,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "2479:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 274,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 270,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 276,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:4"
											},
											{
												"expression": {
													"id": 279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 277,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "2598:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 278,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "2608:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 280,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:4"
											}
										]
									},
									"id": 282,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:4"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:4"
									},
									"scope": 302,
									"src": "2336:287:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 289,
										"nodeType": "Block",
										"src": "2667:171:4",
										"statements": [
											{
												"expression": {
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 285,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "2809:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 286,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 243,
														"src": "2819:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 288,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:4"
											}
										]
									},
									"id": 290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:4"
									},
									"returnParameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:4"
									},
									"scope": 302,
									"src": "2629:209:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 300,
										"nodeType": "Block",
										"src": "3081:43:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 296,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "3098:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 297,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "3109:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 295,
												"id": 299,
												"nodeType": "Return",
												"src": "3091:26:4"
											}
										]
									},
									"documentation": {
										"id": 291,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:4",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 301,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3026:23:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:4"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "3075:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 293,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:4"
									},
									"scope": 302,
									"src": "3017:107:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 303,
							"src": "888:2238:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "112:3015:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							380
						]
					},
					"id": 381,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 304,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "106:25:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 305,
								"nodeType": "StructuredDocumentation",
								"src": "133:71:5",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 380,
							"linearizedBaseContracts": [
								380
							],
							"name": "IERC20",
							"nameLocation": "215:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "228:158:5",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 314,
									"name": "Transfer",
									"nameLocation": "397:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "422:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "406:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "406:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "444:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "428:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "456:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "448:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "405:57:5"
									},
									"src": "391:72:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "469:148:5",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 323,
									"name": "Approval",
									"nameLocation": "628:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "653:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "637:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "637:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "676:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "660:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "693:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "685:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "636:63:5"
									},
									"src": "622:78:5"
								},
								{
									"documentation": {
										"id": 324,
										"nodeType": "StructuredDocumentation",
										"src": "706:65:5",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 329,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "785:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "796:2:5"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "822:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:9:5"
									},
									"scope": 380,
									"src": "776:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "837:71:5",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 337,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "922:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "940:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "932:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "932:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "931:17:5"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "972:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "972:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "971:9:5"
									},
									"scope": 380,
									"src": "913:68:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 338,
										"nodeType": "StructuredDocumentation",
										"src": "987:213:5",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 347,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1214:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1231:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1223:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1243:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1235:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1235:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:27:5"
									},
									"returnParameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1268:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 344,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:5"
									},
									"scope": 380,
									"src": "1205:69:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 348,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:5",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 357,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "1568:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 349,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "1583:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:5"
									},
									"returnParameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 355,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "1623:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:5"
									},
									"scope": 380,
									"src": "1549:83:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "1638:667:5",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 367,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2319:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2335:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "2327:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2327:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2352:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "2344:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2344:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2326:32:5"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "2377:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 364,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:6:5"
									},
									"scope": 380,
									"src": "2310:73:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "2389:297:5",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 379,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2700:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2721:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2713:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2713:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2735:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2727:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2747:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2739:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2739:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2712:41:5"
									},
									"returnParameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2772:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 376,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2772:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2771:6:5"
									},
									"scope": 380,
									"src": "2691:87:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 381,
							"src": "205:2575:5",
							"usedErrors": [],
							"usedEvents": [
								314,
								323
							]
						}
					],
					"src": "106:2675:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							416
						]
					},
					"id": 417,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 382,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "123:25:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 383,
								"nodeType": "StructuredDocumentation",
								"src": "150:1965:6",
								"text": " @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 416,
							"linearizedBaseContracts": [
								416
							],
							"name": "IERC20Permit",
							"nameLocation": "2126:12:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "2145:850:6",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 401,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3009:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3033:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3025:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3025:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3056:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3048:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3048:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3081:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3073:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3073:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3104:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3096:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3096:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3128:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3122:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 393,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3122:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3147:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3139:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 395,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3139:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3166:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3158:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 397,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3158:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3015:158:6"
									},
									"returnParameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3182:0:6"
									},
									"scope": 416,
									"src": "3000:183:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "3189:294:6",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 409,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3497:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3512:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3504:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3504:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3503:15:6"
									},
									"returnParameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3542:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3542:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3541:9:6"
									},
									"scope": 416,
									"src": "3488:63:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "3557:128:6",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 415,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3752:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3768:2:6"
									},
									"returnParameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "3794:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 412,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3794:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3793:9:6"
									},
									"scope": 416,
									"src": "3743:60:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 417,
							"src": "2116:1689:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3683:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"IERC1363": [
							229
						],
						"IERC20": [
							380
						],
						"SafeERC20": [
							880
						]
					},
					"id": 881,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 418,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 420,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 881,
							"sourceUnit": 381,
							"src": "141:37:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 419,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 380,
										"src": "149:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
							"file": "../../../interfaces/IERC1363.sol",
							"id": 422,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 881,
							"sourceUnit": 230,
							"src": "179:58:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 421,
										"name": "IERC1363",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 229,
										"src": "187:8:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 423,
								"nodeType": "StructuredDocumentation",
								"src": "239:458:7",
								"text": " @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 880,
							"linearizedBaseContracts": [
								880
							],
							"name": "SafeERC20",
							"nameLocation": "706:9:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 424,
										"nodeType": "StructuredDocumentation",
										"src": "722:65:7",
										"text": " @dev An operation with an ERC-20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 428,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "798:24:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 426,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "831:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "823:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 425,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "823:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:15:7"
									},
									"src": "792:46:7"
								},
								{
									"documentation": {
										"id": 429,
										"nodeType": "StructuredDocumentation",
										"src": "844:71:7",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 437,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "926:32:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "967:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "959:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 430,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "984:16:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "976:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 432,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "976:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1010:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1002:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 434,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "958:70:7"
									},
									"src": "920:109:7"
								},
								{
									"body": {
										"id": 460,
										"nodeType": "Block",
										"src": "1291:88:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 449,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "1321:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 452,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 441,
																		"src": "1343:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 453,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1349:8:7",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 347,
																	"src": "1343:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 454,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 443,
																			"src": "1360:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 455,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 445,
																			"src": "1364:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 456,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1359:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 450,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1328:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 451,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1332:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1328:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1328:43:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 448,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 838,
														"src": "1301:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1301:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 459,
												"nodeType": "ExpressionStatement",
												"src": "1301:71:7"
											}
										]
									},
									"documentation": {
										"id": 438,
										"nodeType": "StructuredDocumentation",
										"src": "1035:179:7",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 461,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1228:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1248:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "1241:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 440,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 439,
														"name": "IERC20",
														"nameLocations": [
															"1241:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "1241:6:7"
													},
													"referencedDeclaration": 380,
													"src": "1241:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1263:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "1255:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 442,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1255:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1275:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "1267:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:41:7"
									},
									"returnParameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1291:0:7"
									},
									"scope": 880,
									"src": "1219:160:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 487,
										"nodeType": "Block",
										"src": "1708:98:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 475,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 465,
															"src": "1738:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 478,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 465,
																		"src": "1760:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 479,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1766:12:7",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 379,
																	"src": "1760:18:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 480,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 467,
																			"src": "1781:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 481,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 469,
																			"src": "1787:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 482,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 471,
																			"src": "1791:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 483,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1780:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 476,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1745:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1749:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1745:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 484,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1745:53:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 474,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 838,
														"src": "1718:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1718:81:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 486,
												"nodeType": "ExpressionStatement",
												"src": "1718:81:7"
											}
										]
									},
									"documentation": {
										"id": 462,
										"nodeType": "StructuredDocumentation",
										"src": "1385:228:7",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 488,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1627:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1651:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "1644:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 464,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 463,
														"name": "IERC20",
														"nameLocations": [
															"1644:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "1644:6:7"
													},
													"referencedDeclaration": 380,
													"src": "1644:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1666:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "1658:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1658:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1680:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "1672:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 468,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1692:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "1684:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1643:55:7"
									},
									"returnParameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1708:0:7"
									},
									"scope": 880,
									"src": "1618:188:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 513,
										"nodeType": "Block",
										"src": "2033:99:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 502,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "2074:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 505,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 492,
																		"src": "2096:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 506,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2102:8:7",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 347,
																	"src": "2096:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 507,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 494,
																			"src": "2113:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 508,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 496,
																			"src": "2117:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 509,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2112:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 503,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2081:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 504,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2085:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2081:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 510,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2081:43:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 501,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 879,
														"src": "2050:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2050:75:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 500,
												"id": 512,
												"nodeType": "Return",
												"src": "2043:82:7"
											}
										]
									},
									"documentation": {
										"id": 489,
										"nodeType": "StructuredDocumentation",
										"src": "1812:126:7",
										"text": " @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 514,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransfer",
									"nameLocation": "1952:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1975:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "1968:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 491,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 490,
														"name": "IERC20",
														"nameLocations": [
															"1968:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "1968:6:7"
													},
													"referencedDeclaration": 380,
													"src": "1968:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1990:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "1982:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1982:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2002:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "1994:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1967:41:7"
									},
									"returnParameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "2027:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 498,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2027:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2026:6:7"
									},
									"scope": 880,
									"src": "1943:189:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 542,
										"nodeType": "Block",
										"src": "2381:109:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 530,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "2422:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 533,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 518,
																		"src": "2444:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2450:12:7",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 379,
																	"src": "2444:18:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 535,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 520,
																			"src": "2465:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 536,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 522,
																			"src": "2471:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 537,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 524,
																			"src": "2475:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 538,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2464:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 531,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2429:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 532,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2433:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2429:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2429:53:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 529,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 879,
														"src": "2398:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2398:85:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 528,
												"id": 541,
												"nodeType": "Return",
												"src": "2391:92:7"
											}
										]
									},
									"documentation": {
										"id": 515,
										"nodeType": "StructuredDocumentation",
										"src": "2138:130:7",
										"text": " @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 543,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransferFrom",
									"nameLocation": "2282:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2309:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "2302:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 517,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 516,
														"name": "IERC20",
														"nameLocations": [
															"2302:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "2302:6:7"
													},
													"referencedDeclaration": 380,
													"src": "2302:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2324:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "2316:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2316:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2338:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "2330:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "2342:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 523,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:55:7"
									},
									"returnParameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "2375:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 526,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:7"
									},
									"scope": 880,
									"src": "2273:217:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 573,
										"nodeType": "Block",
										"src": "3232:139:7",
										"statements": [
											{
												"assignments": [
													555
												],
												"declarations": [
													{
														"constant": false,
														"id": 555,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "3250:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 573,
														"src": "3242:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 554,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3242:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 564,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 560,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3289:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$880",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$880",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 559,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3281:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 558,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3281:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 561,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3281:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 562,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 549,
															"src": "3296:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 556,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "3265:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 557,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3271:9:7",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 357,
														"src": "3265:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3265:39:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3242:62:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 566,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "3327:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 567,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 549,
															"src": "3334:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 568,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 555,
																"src": "3343:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 569,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 551,
																"src": "3358:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3343:20:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 565,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 664,
														"src": "3314:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3314:50:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 572,
												"nodeType": "ExpressionStatement",
												"src": "3314:50:7"
											}
										]
									},
									"documentation": {
										"id": 544,
										"nodeType": "StructuredDocumentation",
										"src": "2496:645:7",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "3155:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3184:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "3177:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 546,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 545,
														"name": "IERC20",
														"nameLocations": [
															"3177:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "3177:6:7"
													},
													"referencedDeclaration": 380,
													"src": "3177:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3199:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "3191:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 548,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3191:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3216:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "3208:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3208:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3176:46:7"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3232:0:7"
									},
									"scope": 880,
									"src": "3146:225:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 616,
										"nodeType": "Block",
										"src": "4137:370:7",
										"statements": [
											{
												"id": 615,
												"nodeType": "UncheckedBlock",
												"src": "4147:354:7",
												"statements": [
													{
														"assignments": [
															586
														],
														"declarations": [
															{
																"constant": false,
																"id": 586,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "4179:16:7",
																"nodeType": "VariableDeclaration",
																"scope": 615,
																"src": "4171:24:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 585,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4171:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 595,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 591,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4222:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$880",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$880",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 590,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4214:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 589,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4214:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4214:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 593,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 580,
																	"src": "4229:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 587,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 578,
																	"src": "4198:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 588,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4204:9:7",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 357,
																"src": "4198:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4198:39:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4171:66:7"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 598,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 596,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 586,
																"src": "4255:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 597,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 582,
																"src": "4274:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4255:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 606,
														"nodeType": "IfStatement",
														"src": "4251:160:7",
														"trueBody": {
															"id": 605,
															"nodeType": "Block",
															"src": "4293:118:7",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 600,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 580,
																				"src": "4351:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 601,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 586,
																				"src": "4360:16:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 602,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 582,
																				"src": "4378:17:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 599,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 437,
																			"src": "4318:32:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (address,uint256,uint256) pure returns (error)"
																			}
																		},
																		"id": 603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4318:78:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 604,
																	"nodeType": "RevertStatement",
																	"src": "4311:85:7"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 608,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 578,
																	"src": "4437:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 609,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 580,
																	"src": "4444:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 612,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 610,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 586,
																		"src": "4453:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 611,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 582,
																		"src": "4472:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4453:36:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 607,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 664,
																"src": "4424:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 613,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4424:66:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 614,
														"nodeType": "ExpressionStatement",
														"src": "4424:66:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "3377:657:7",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 617,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "4048:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 578,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4077:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "4070:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 577,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 576,
														"name": "IERC20",
														"nameLocations": [
															"4070:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "4070:6:7"
													},
													"referencedDeclaration": 380,
													"src": "4070:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4092:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "4084:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 579,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4084:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "4109:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "4101:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 581,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4101:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4069:58:7"
									},
									"returnParameters": {
										"id": 584,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4137:0:7"
									},
									"scope": 880,
									"src": "4039:468:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 663,
										"nodeType": "Block",
										"src": "5161:303:7",
										"statements": [
											{
												"assignments": [
													629
												],
												"declarations": [
													{
														"constant": false,
														"id": 629,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "5184:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 663,
														"src": "5171:25:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 628,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5171:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 638,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 632,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 621,
																"src": "5214:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$380",
																	"typeString": "contract IERC20"
																}
															},
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5220:7:7",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 367,
															"src": "5214:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 634,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 623,
																	"src": "5230:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 635,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 625,
																	"src": "5239:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 636,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5229:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 630,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5199:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 631,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5203:10:7",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "5199:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5199:47:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5171:75:7"
											},
											{
												"condition": {
													"id": 643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5261:45:7",
													"subExpression": {
														"arguments": [
															{
																"id": 640,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 621,
																"src": "5286:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$380",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 641,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 629,
																"src": "5293:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$380",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 639,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 879,
															"src": "5262:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 642,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5262:44:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 662,
												"nodeType": "IfStatement",
												"src": "5257:201:7",
												"trueBody": {
													"id": 661,
													"nodeType": "Block",
													"src": "5308:150:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 645,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 621,
																		"src": "5342:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 648,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 621,
																					"src": "5364:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$380",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 649,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5370:7:7",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 367,
																				"src": "5364:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 650,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 623,
																						"src": "5380:7:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 651,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5389:1:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 652,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5379:12:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 646,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5349:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5353:10:7",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "5349:14:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 653,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5349:43:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 644,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 838,
																	"src": "5322:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 654,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5322:71:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 655,
															"nodeType": "ExpressionStatement",
															"src": "5322:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 657,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 621,
																		"src": "5427:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 658,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 629,
																		"src": "5434:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 656,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 838,
																	"src": "5407:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 659,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5407:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 660,
															"nodeType": "ExpressionStatement",
															"src": "5407:40:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 618,
										"nodeType": "StructuredDocumentation",
										"src": "4513:566:7",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."
									},
									"id": 664,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "5093:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5113:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "5106:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 620,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 619,
														"name": "IERC20",
														"nameLocations": [
															"5106:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "5106:6:7"
													},
													"referencedDeclaration": 380,
													"src": "5106:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5128:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "5120:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 622,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5120:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5145:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "5137:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 624,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5137:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5105:46:7"
									},
									"returnParameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5161:0:7"
									},
									"scope": 880,
									"src": "5084:380:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 706,
										"nodeType": "Block",
										"src": "5911:219:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 677,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 670,
																"src": "5925:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5928:4:7",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "5925:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 679,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5933:6:7",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5925:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 680,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5943:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5925:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 695,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6011:39:7",
														"subExpression": {
															"arguments": [
																{
																	"id": 691,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 670,
																	"src": "6034:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 692,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "6038:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 693,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 674,
																	"src": "6045:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 689,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 668,
																	"src": "6012:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$229",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 690,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6018:15:7",
																"memberName": "transferAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 180,
																"src": "6012:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6012:38:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 704,
													"nodeType": "IfStatement",
													"src": "6007:117:7",
													"trueBody": {
														"id": 703,
														"nodeType": "Block",
														"src": "6052:72:7",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 699,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 668,
																					"src": "6106:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 698,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6098:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 697,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6098:7:7",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 700,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6098:14:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 696,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 428,
																		"src": "6073:24:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6073:40:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 702,
																"nodeType": "RevertStatement",
																"src": "6066:47:7"
															}
														]
													}
												},
												"id": 705,
												"nodeType": "IfStatement",
												"src": "5921:203:7",
												"trueBody": {
													"id": 688,
													"nodeType": "Block",
													"src": "5946:55:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 683,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 668,
																		"src": "5973:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 684,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 670,
																		"src": "5980:2:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 685,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 672,
																		"src": "5984:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 682,
																	"name": "safeTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 461,
																	"src": "5960:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 686,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5960:30:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 687,
															"nodeType": "ExpressionStatement",
															"src": "5960:30:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "5470:333:7",
										"text": " @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 707,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCallRelaxed",
									"nameLocation": "5817:22:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 668,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5849:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "5840:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$229",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 667,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 666,
														"name": "IERC1363",
														"nameLocations": [
															"5840:8:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 229,
														"src": "5840:8:7"
													},
													"referencedDeclaration": 229,
													"src": "5840:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$229",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5864:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "5856:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 669,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5856:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5876:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "5868:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5868:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5896:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "5883:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 673,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5883:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5839:62:7"
									},
									"returnParameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5911:0:7"
									},
									"scope": 880,
									"src": "5808:322:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 753,
										"nodeType": "Block",
										"src": "6649:239:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 722,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 715,
																"src": "6663:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 723,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6666:4:7",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "6663:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 724,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6671:6:7",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6663:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 725,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6681:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6663:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 742,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6759:49:7",
														"subExpression": {
															"arguments": [
																{
																	"id": 737,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 713,
																	"src": "6786:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 738,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 715,
																	"src": "6792:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 739,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 717,
																	"src": "6796:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 740,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 719,
																	"src": "6803:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 735,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 711,
																	"src": "6760:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$229",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 736,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6766:19:7",
																"memberName": "transferFromAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 206,
																"src": "6760:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 741,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6760:48:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 751,
													"nodeType": "IfStatement",
													"src": "6755:127:7",
													"trueBody": {
														"id": 750,
														"nodeType": "Block",
														"src": "6810:72:7",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 746,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 711,
																					"src": "6864:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 745,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6856:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 744,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6856:7:7",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 747,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6856:14:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 743,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 428,
																		"src": "6831:24:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6831:40:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 749,
																"nodeType": "RevertStatement",
																"src": "6824:47:7"
															}
														]
													}
												},
												"id": 752,
												"nodeType": "IfStatement",
												"src": "6659:223:7",
												"trueBody": {
													"id": 734,
													"nodeType": "Block",
													"src": "6684:65:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 728,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 711,
																		"src": "6715:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 729,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 713,
																		"src": "6722:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 730,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 715,
																		"src": "6728:2:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 731,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 717,
																		"src": "6732:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 727,
																	"name": "safeTransferFrom",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 488,
																	"src": "6698:16:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 732,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6698:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 733,
															"nodeType": "ExpressionStatement",
															"src": "6698:40:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 708,
										"nodeType": "StructuredDocumentation",
										"src": "6136:341:7",
										"text": " @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 754,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCallRelaxed",
									"nameLocation": "6491:26:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6536:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "6527:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$229",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 710,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 709,
														"name": "IERC1363",
														"nameLocations": [
															"6527:8:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 229,
														"src": "6527:8:7"
													},
													"referencedDeclaration": 229,
													"src": "6527:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$229",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6559:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "6551:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6551:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6581:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "6573:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 714,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6573:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6601:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "6593:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6593:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "6616:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6517:122:7"
									},
									"returnParameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6649:0:7"
									},
									"scope": 880,
									"src": "6482:406:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 796,
										"nodeType": "Block",
										"src": "7655:218:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 771,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 767,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 760,
																"src": "7669:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 768,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7672:4:7",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "7669:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 769,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7677:6:7",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7669:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 770,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7687:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7669:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 785,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "7755:38:7",
														"subExpression": {
															"arguments": [
																{
																	"id": 781,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 760,
																	"src": "7777:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 782,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 762,
																	"src": "7781:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 783,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 764,
																	"src": "7788:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 779,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 758,
																	"src": "7756:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$229",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 780,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7762:14:7",
																"memberName": "approveAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 228,
																"src": "7756:20:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7756:37:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 794,
													"nodeType": "IfStatement",
													"src": "7751:116:7",
													"trueBody": {
														"id": 793,
														"nodeType": "Block",
														"src": "7795:72:7",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 789,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 758,
																					"src": "7849:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 788,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7841:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 787,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "7841:7:7",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 790,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7841:14:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 786,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 428,
																		"src": "7816:24:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 791,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7816:40:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 792,
																"nodeType": "RevertStatement",
																"src": "7809:47:7"
															}
														]
													}
												},
												"id": 795,
												"nodeType": "IfStatement",
												"src": "7665:202:7",
												"trueBody": {
													"id": 778,
													"nodeType": "Block",
													"src": "7690:55:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 773,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 758,
																		"src": "7717:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 774,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 760,
																		"src": "7724:2:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 775,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 762,
																		"src": "7728:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 772,
																	"name": "forceApprove",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 664,
																	"src": "7704:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7704:30:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 777,
															"nodeType": "ExpressionStatement",
															"src": "7704:30:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 755,
										"nodeType": "StructuredDocumentation",
										"src": "6894:654:7",
										"text": " @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."
									},
									"id": 797,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCallRelaxed",
									"nameLocation": "7562:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 758,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7593:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "7584:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$229",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 757,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 756,
														"name": "IERC1363",
														"nameLocations": [
															"7584:8:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 229,
														"src": "7584:8:7"
													},
													"referencedDeclaration": 229,
													"src": "7584:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$229",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7608:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "7600:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7600:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 762,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7620:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "7612:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7612:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7640:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "7627:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 763,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7627:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7583:62:7"
									},
									"returnParameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7655:0:7"
									},
									"scope": 880,
									"src": "7553:320:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 837,
										"nodeType": "Block",
										"src": "8440:650:7",
										"statements": [
											{
												"assignments": [
													807
												],
												"declarations": [
													{
														"constant": false,
														"id": 807,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "8458:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 837,
														"src": "8450:18:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 806,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8450:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 808,
												"nodeType": "VariableDeclarationStatement",
												"src": "8450:18:7"
											},
											{
												"assignments": [
													810
												],
												"declarations": [
													{
														"constant": false,
														"id": 810,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "8486:11:7",
														"nodeType": "VariableDeclaration",
														"scope": 837,
														"src": "8478:19:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 809,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8478:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 811,
												"nodeType": "VariableDeclarationStatement",
												"src": "8478:19:7"
											},
											{
												"AST": {
													"nativeSrc": "8532:396:7",
													"nodeType": "YulBlock",
													"src": "8532:396:7",
													"statements": [
														{
															"nativeSrc": "8546:75:7",
															"nodeType": "YulVariableDeclaration",
															"src": "8546:75:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "8566:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "8566:3:7"
																		},
																		"nativeSrc": "8566:5:7",
																		"nodeType": "YulFunctionCall",
																		"src": "8566:5:7"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "8573:5:7",
																		"nodeType": "YulIdentifier",
																		"src": "8573:5:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8580:1:7",
																		"nodeType": "YulLiteral",
																		"src": "8580:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8587:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "8587:4:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8593:4:7",
																				"nodeType": "YulLiteral",
																				"src": "8593:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8583:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "8583:3:7"
																		},
																		"nativeSrc": "8583:15:7",
																		"nodeType": "YulFunctionCall",
																		"src": "8583:15:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8606:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "8606:4:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "8600:5:7",
																			"nodeType": "YulIdentifier",
																			"src": "8600:5:7"
																		},
																		"nativeSrc": "8600:11:7",
																		"nodeType": "YulFunctionCall",
																		"src": "8600:11:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8613:1:7",
																		"nodeType": "YulLiteral",
																		"src": "8613:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8616:4:7",
																		"nodeType": "YulLiteral",
																		"src": "8616:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "8561:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "8561:4:7"
																},
																"nativeSrc": "8561:60:7",
																"nodeType": "YulFunctionCall",
																"src": "8561:60:7"
															},
															"variables": [
																{
																	"name": "success",
																	"nativeSrc": "8550:7:7",
																	"nodeType": "YulTypedName",
																	"src": "8550:7:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8682:157:7",
																"nodeType": "YulBlock",
																"src": "8682:157:7",
																"statements": [
																	{
																		"nativeSrc": "8700:22:7",
																		"nodeType": "YulVariableDeclaration",
																		"src": "8700:22:7",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8717:4:7",
																					"nodeType": "YulLiteral",
																					"src": "8717:4:7",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "8711:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "8711:5:7"
																			},
																			"nativeSrc": "8711:11:7",
																			"nodeType": "YulFunctionCall",
																			"src": "8711:11:7"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nativeSrc": "8704:3:7",
																				"nodeType": "YulTypedName",
																				"src": "8704:3:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8754:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "8754:3:7"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8759:1:7",
																					"nodeType": "YulLiteral",
																					"src": "8759:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8762:14:7",
																						"nodeType": "YulIdentifier",
																						"src": "8762:14:7"
																					},
																					"nativeSrc": "8762:16:7",
																					"nodeType": "YulFunctionCall",
																					"src": "8762:16:7"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nativeSrc": "8739:14:7",
																				"nodeType": "YulIdentifier",
																				"src": "8739:14:7"
																			},
																			"nativeSrc": "8739:40:7",
																			"nodeType": "YulFunctionCall",
																			"src": "8739:40:7"
																		},
																		"nativeSrc": "8739:40:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "8739:40:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8803:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "8803:3:7"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8808:14:7",
																						"nodeType": "YulIdentifier",
																						"src": "8808:14:7"
																					},
																					"nativeSrc": "8808:16:7",
																					"nodeType": "YulFunctionCall",
																					"src": "8808:16:7"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8796:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "8796:6:7"
																			},
																			"nativeSrc": "8796:29:7",
																			"nodeType": "YulFunctionCall",
																			"src": "8796:29:7"
																		},
																		"nativeSrc": "8796:29:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "8796:29:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "success",
																		"nativeSrc": "8673:7:7",
																		"nodeType": "YulIdentifier",
																		"src": "8673:7:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8666:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "8666:6:7"
																},
																"nativeSrc": "8666:15:7",
																"nodeType": "YulFunctionCall",
																"src": "8666:15:7"
															},
															"nativeSrc": "8663:176:7",
															"nodeType": "YulIf",
															"src": "8663:176:7"
														},
														{
															"nativeSrc": "8852:30:7",
															"nodeType": "YulAssignment",
															"src": "8852:30:7",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "8866:14:7",
																	"nodeType": "YulIdentifier",
																	"src": "8866:14:7"
																},
																"nativeSrc": "8866:16:7",
																"nodeType": "YulFunctionCall",
																"src": "8866:16:7"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "8852:10:7",
																	"nodeType": "YulIdentifier",
																	"src": "8852:10:7"
																}
															]
														},
														{
															"nativeSrc": "8895:23:7",
															"nodeType": "YulAssignment",
															"src": "8895:23:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8916:1:7",
																		"nodeType": "YulLiteral",
																		"src": "8916:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8910:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "8910:5:7"
																},
																"nativeSrc": "8910:8:7",
																"nodeType": "YulFunctionCall",
																"src": "8910:8:7"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "8895:11:7",
																	"nodeType": "YulIdentifier",
																	"src": "8895:11:7"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 803,
														"isOffset": false,
														"isSlot": false,
														"src": "8587:4:7",
														"valueSize": 1
													},
													{
														"declaration": 803,
														"isOffset": false,
														"isSlot": false,
														"src": "8606:4:7",
														"valueSize": 1
													},
													{
														"declaration": 807,
														"isOffset": false,
														"isSlot": false,
														"src": "8852:10:7",
														"valueSize": 1
													},
													{
														"declaration": 810,
														"isOffset": false,
														"isSlot": false,
														"src": "8895:11:7",
														"valueSize": 1
													},
													{
														"declaration": 801,
														"isOffset": false,
														"isSlot": false,
														"src": "8573:5:7",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 812,
												"nodeType": "InlineAssembly",
												"src": "8507:421:7"
											},
											{
												"condition": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 815,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 813,
															"name": "returnSize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 807,
															"src": "8942:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 814,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8956:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8942:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 826,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 824,
															"name": "returnValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 810,
															"src": "8994:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "31",
															"id": 825,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9009:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "8994:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8942:68:7",
													"trueExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 823,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 818,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 801,
																			"src": "8968:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$380",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$380",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 817,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8960:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 816,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8960:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8960:14:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 820,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8975:4:7",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "8960:19:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 821,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8980:6:7",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8960:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 822,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8990:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8960:31:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 836,
												"nodeType": "IfStatement",
												"src": "8938:146:7",
												"trueBody": {
													"id": 835,
													"nodeType": "Block",
													"src": "9012:72:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 831,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 801,
																				"src": "9066:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$380",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$380",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 830,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9058:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 829,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9058:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 832,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9058:14:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 828,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 428,
																	"src": "9033:24:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 833,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9033:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 834,
															"nodeType": "RevertStatement",
															"src": "9026:47:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 798,
										"nodeType": "StructuredDocumentation",
										"src": "7879:486:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."
									},
									"id": 838,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "8379:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8406:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "8399:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 800,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 799,
														"name": "IERC20",
														"nameLocations": [
															"8399:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "8399:6:7"
													},
													"referencedDeclaration": 380,
													"src": "8399:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8426:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "8413:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 802,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8413:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8398:33:7"
									},
									"returnParameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8440:0:7"
									},
									"scope": 880,
									"src": "8370:720:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 878,
										"nodeType": "Block",
										"src": "9681:391:7",
										"statements": [
											{
												"assignments": [
													850
												],
												"declarations": [
													{
														"constant": false,
														"id": 850,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "9696:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 878,
														"src": "9691:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 849,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9691:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 851,
												"nodeType": "VariableDeclarationStatement",
												"src": "9691:12:7"
											},
											{
												"assignments": [
													853
												],
												"declarations": [
													{
														"constant": false,
														"id": 853,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "9721:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 878,
														"src": "9713:18:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 852,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9713:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 854,
												"nodeType": "VariableDeclarationStatement",
												"src": "9713:18:7"
											},
											{
												"assignments": [
													856
												],
												"declarations": [
													{
														"constant": false,
														"id": 856,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "9749:11:7",
														"nodeType": "VariableDeclaration",
														"scope": 878,
														"src": "9741:19:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 855,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9741:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 857,
												"nodeType": "VariableDeclarationStatement",
												"src": "9741:19:7"
											},
											{
												"AST": {
													"nativeSrc": "9795:174:7",
													"nodeType": "YulBlock",
													"src": "9795:174:7",
													"statements": [
														{
															"nativeSrc": "9809:71:7",
															"nodeType": "YulAssignment",
															"src": "9809:71:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "9825:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "9825:3:7"
																		},
																		"nativeSrc": "9825:5:7",
																		"nodeType": "YulFunctionCall",
																		"src": "9825:5:7"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "9832:5:7",
																		"nodeType": "YulIdentifier",
																		"src": "9832:5:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9839:1:7",
																		"nodeType": "YulLiteral",
																		"src": "9839:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9846:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "9846:4:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9852:4:7",
																				"nodeType": "YulLiteral",
																				"src": "9852:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9842:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "9842:3:7"
																		},
																		"nativeSrc": "9842:15:7",
																		"nodeType": "YulFunctionCall",
																		"src": "9842:15:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9865:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "9865:4:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "9859:5:7",
																			"nodeType": "YulIdentifier",
																			"src": "9859:5:7"
																		},
																		"nativeSrc": "9859:11:7",
																		"nodeType": "YulFunctionCall",
																		"src": "9859:11:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9872:1:7",
																		"nodeType": "YulLiteral",
																		"src": "9872:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9875:4:7",
																		"nodeType": "YulLiteral",
																		"src": "9875:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "9820:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "9820:4:7"
																},
																"nativeSrc": "9820:60:7",
																"nodeType": "YulFunctionCall",
																"src": "9820:60:7"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nativeSrc": "9809:7:7",
																	"nodeType": "YulIdentifier",
																	"src": "9809:7:7"
																}
															]
														},
														{
															"nativeSrc": "9893:30:7",
															"nodeType": "YulAssignment",
															"src": "9893:30:7",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "9907:14:7",
																	"nodeType": "YulIdentifier",
																	"src": "9907:14:7"
																},
																"nativeSrc": "9907:16:7",
																"nodeType": "YulFunctionCall",
																"src": "9907:16:7"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "9893:10:7",
																	"nodeType": "YulIdentifier",
																	"src": "9893:10:7"
																}
															]
														},
														{
															"nativeSrc": "9936:23:7",
															"nodeType": "YulAssignment",
															"src": "9936:23:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9957:1:7",
																		"nodeType": "YulLiteral",
																		"src": "9957:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "9951:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "9951:5:7"
																},
																"nativeSrc": "9951:8:7",
																"nodeType": "YulFunctionCall",
																"src": "9951:8:7"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "9936:11:7",
																	"nodeType": "YulIdentifier",
																	"src": "9936:11:7"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 844,
														"isOffset": false,
														"isSlot": false,
														"src": "9846:4:7",
														"valueSize": 1
													},
													{
														"declaration": 844,
														"isOffset": false,
														"isSlot": false,
														"src": "9865:4:7",
														"valueSize": 1
													},
													{
														"declaration": 853,
														"isOffset": false,
														"isSlot": false,
														"src": "9893:10:7",
														"valueSize": 1
													},
													{
														"declaration": 856,
														"isOffset": false,
														"isSlot": false,
														"src": "9936:11:7",
														"valueSize": 1
													},
													{
														"declaration": 850,
														"isOffset": false,
														"isSlot": false,
														"src": "9809:7:7",
														"valueSize": 1
													},
													{
														"declaration": 842,
														"isOffset": false,
														"isSlot": false,
														"src": "9832:5:7",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 858,
												"nodeType": "InlineAssembly",
												"src": "9770:199:7"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 876,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 859,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 850,
														"src": "9985:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 862,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 860,
																		"name": "returnSize",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 853,
																		"src": "9997:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 861,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10011:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "9997:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 873,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 871,
																		"name": "returnValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 856,
																		"src": "10048:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 872,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10063:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "10048:16:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 874,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "9997:67:7",
																"trueExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 870,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 865,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 842,
																						"src": "10023:5:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$380",
																							"typeString": "contract IERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_IERC20_$380",
																							"typeString": "contract IERC20"
																						}
																					],
																					"id": 864,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "10015:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 863,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "10015:7:7",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 866,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10015:14:7",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 867,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "10030:4:7",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "10015:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 868,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10035:6:7",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "10015:26:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 869,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10044:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "10015:30:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 875,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9996:69:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9985:80:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 848,
												"id": 877,
												"nodeType": "Return",
												"src": "9978:87:7"
											}
										]
									},
									"documentation": {
										"id": 839,
										"nodeType": "StructuredDocumentation",
										"src": "9096:491:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."
									},
									"id": 879,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "9601:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9632:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "9625:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 841,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 840,
														"name": "IERC20",
														"nameLocations": [
															"9625:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "9625:6:7"
													},
													"referencedDeclaration": 380,
													"src": "9625:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9652:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "9639:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 843,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9639:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9624:33:7"
									},
									"returnParameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "9675:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 846,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9675:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9674:6:7"
									},
									"scope": 880,
									"src": "9592:480:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 881,
							"src": "698:9376:7",
							"usedErrors": [
								428,
								437
							],
							"usedEvents": []
						}
					],
					"src": "115:9960:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							910
						]
					},
					"id": 911,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 882,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 883,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:8",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 910,
							"linearizedBaseContracts": [
								910
							],
							"name": "Context",
							"nameLocation": "642:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 891,
										"nodeType": "Block",
										"src": "718:34:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 888,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:8",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 887,
												"id": 890,
												"nodeType": "Return",
												"src": "728:17:8"
											}
										]
									},
									"id": 892,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:8"
									},
									"returnParameters": {
										"id": 887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 886,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "709:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 885,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:8"
									},
									"scope": 910,
									"src": "656:96:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 900,
										"nodeType": "Block",
										"src": "825:32:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 897,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:8",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 896,
												"id": 899,
												"nodeType": "Return",
												"src": "835:15:8"
											}
										]
									},
									"id": 901,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:8"
									},
									"returnParameters": {
										"id": 896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "809:14:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 894,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:8"
									},
									"scope": 910,
									"src": "758:99:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 908,
										"nodeType": "Block",
										"src": "935:25:8",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 906,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 905,
												"id": 907,
												"nodeType": "Return",
												"src": "945:8:8"
											}
										]
									},
									"id": 909,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:8"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "926:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:8"
									},
									"scope": 910,
									"src": "863:97:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 911,
							"src": "624:338:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							922
						]
					},
					"id": 923,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 912,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "115:25:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 913,
								"nodeType": "StructuredDocumentation",
								"src": "142:280:9",
								"text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 922,
							"linearizedBaseContracts": [
								922
							],
							"name": "IERC165",
							"nameLocation": "433:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 914,
										"nodeType": "StructuredDocumentation",
										"src": "447:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 921,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "801:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "826:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "819:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 915,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "819:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:20:9"
									},
									"returnParameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "862:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 918,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "862:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "861:6:9"
									},
									"scope": 922,
									"src": "792:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 923,
							"src": "423:447:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:756:9"
				},
				"id": 9
			},
			"Connect4Stakes.sol": {
				"ast": {
					"absolutePath": "Connect4Stakes.sol",
					"exportedSymbols": {
						"Connect4Stakes": [
							2099
						],
						"Context": [
							910
						],
						"IERC1363": [
							229
						],
						"IERC20": [
							380
						],
						"IERC20Permit": [
							416
						],
						"Ownable": [
							147
						],
						"ReentrancyGuard": [
							302
						],
						"SafeERC20": [
							880
						]
					},
					"id": 2100,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 924,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 925,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2100,
							"sourceUnit": 881,
							"src": "655:65:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 926,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2100,
							"sourceUnit": 303,
							"src": "721:62:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 927,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2100,
							"sourceUnit": 148,
							"src": "784:52:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"id": 928,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2100,
							"sourceUnit": 417,
							"src": "837:73:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 929,
										"name": "Ownable",
										"nameLocations": [
											"939:7:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "939:7:10"
									},
									"id": 930,
									"nodeType": "InheritanceSpecifier",
									"src": "939:7:10"
								},
								{
									"baseName": {
										"id": 931,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"948:15:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 302,
										"src": "948:15:10"
									},
									"id": 932,
									"nodeType": "InheritanceSpecifier",
									"src": "948:15:10"
								}
							],
							"canonicalName": "Connect4Stakes",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2099,
							"linearizedBaseContracts": [
								2099,
								302,
								147,
								910
							],
							"name": "Connect4Stakes",
							"nameLocation": "921:14:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 936,
									"libraryName": {
										"id": 933,
										"name": "SafeERC20",
										"nameLocations": [
											"976:9:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 880,
										"src": "976:9:10"
									},
									"nodeType": "UsingForDirective",
									"src": "970:27:10",
									"typeName": {
										"id": 935,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 934,
											"name": "IERC20",
											"nameLocations": [
												"990:6:10"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 380,
											"src": "990:6:10"
										},
										"referencedDeclaration": 380,
										"src": "990:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$380",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"canonicalName": "Connect4Stakes.Status",
									"id": 941,
									"members": [
										{
											"id": 937,
											"name": "Created",
											"nameLocation": "1090:7:10",
											"nodeType": "EnumValue",
											"src": "1090:7:10"
										},
										{
											"id": 938,
											"name": "Started",
											"nameLocation": "1152:7:10",
											"nodeType": "EnumValue",
											"src": "1152:7:10"
										},
										{
											"id": 939,
											"name": "Resolved",
											"nameLocation": "1198:8:10",
											"nodeType": "EnumValue",
											"src": "1198:8:10"
										},
										{
											"id": 940,
											"name": "Refunded",
											"nameLocation": "1245:8:10",
											"nodeType": "EnumValue",
											"src": "1245:8:10"
										}
									],
									"name": "Status",
									"nameLocation": "1073:6:10",
									"nodeType": "EnumDefinition",
									"src": "1068:223:10"
								},
								{
									"canonicalName": "Connect4Stakes.Match",
									"id": 971,
									"members": [
										{
											"constant": false,
											"id": 943,
											"mutability": "mutable",
											"name": "creator",
											"nameLocation": "1350:7:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1342:15:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 942,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1342:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 945,
											"mutability": "mutable",
											"name": "opponent",
											"nameLocation": "1375:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1367:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 944,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1367:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 947,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "1443:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1435:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 946,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1435:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 949,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "1513:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1505:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint96",
												"typeString": "uint96"
											},
											"typeName": {
												"id": 948,
												"name": "uint96",
												"nodeType": "ElementaryTypeName",
												"src": "1505:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 951,
											"mutability": "mutable",
											"name": "createdAt",
											"nameLocation": "1560:9:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1552:17:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint40",
												"typeString": "uint40"
											},
											"typeName": {
												"id": 950,
												"name": "uint40",
												"nodeType": "ElementaryTypeName",
												"src": "1552:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint40",
													"typeString": "uint40"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 953,
											"mutability": "mutable",
											"name": "startDeadline",
											"nameLocation": "1587:13:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1579:21:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint40",
												"typeString": "uint40"
											},
											"typeName": {
												"id": 952,
												"name": "uint40",
												"nodeType": "ElementaryTypeName",
												"src": "1579:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint40",
													"typeString": "uint40"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 955,
											"mutability": "mutable",
											"name": "resolveDeadline",
											"nameLocation": "1655:15:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1647:23:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint40",
												"typeString": "uint40"
											},
											"typeName": {
												"id": 954,
												"name": "uint40",
												"nodeType": "ElementaryTypeName",
												"src": "1647:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint40",
													"typeString": "uint40"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 957,
											"mutability": "mutable",
											"name": "resolveWindow",
											"nameLocation": "1740:13:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1732:21:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 956,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "1732:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 959,
											"mutability": "mutable",
											"name": "resolver",
											"nameLocation": "1843:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1835:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 958,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1835:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 961,
											"mutability": "mutable",
											"name": "feeBps",
											"nameLocation": "1906:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1898:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											},
											"typeName": {
												"id": 960,
												"name": "uint16",
												"nodeType": "ElementaryTypeName",
												"src": "1898:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 964,
											"mutability": "mutable",
											"name": "status",
											"nameLocation": "1970:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1962:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_Status_$941",
												"typeString": "enum Connect4Stakes.Status"
											},
											"typeName": {
												"id": 963,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 962,
													"name": "Status",
													"nameLocations": [
														"1962:6:10"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 941,
													"src": "1962:6:10"
												},
												"referencedDeclaration": 941,
												"src": "1962:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Status_$941",
													"typeString": "enum Connect4Stakes.Status"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 966,
											"mutability": "mutable",
											"name": "winner",
											"nameLocation": "1994:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "1986:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 965,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1986:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 968,
											"mutability": "mutable",
											"name": "creatorVote",
											"nameLocation": "2085:11:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "2077:19:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 967,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2077:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 970,
											"mutability": "mutable",
											"name": "opponentVote",
											"nameLocation": "2168:12:10",
											"nodeType": "VariableDeclaration",
											"scope": 971,
											"src": "2160:20:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 969,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2160:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Match",
									"nameLocation": "1304:5:10",
									"nodeType": "StructDefinition",
									"scope": 2099,
									"src": "1297:943:10",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "46904840",
									"id": 973,
									"mutability": "mutable",
									"name": "feeRecipient",
									"nameLocation": "2327:12:10",
									"nodeType": "VariableDeclaration",
									"scope": 2099,
									"src": "2312:27:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 972,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2312:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "bcae25a4",
									"id": 976,
									"mutability": "mutable",
									"name": "defaultFeeBps",
									"nameLocation": "2360:13:10",
									"nodeType": "VariableDeclaration",
									"scope": 2099,
									"src": "2345:32:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint16",
										"typeString": "uint16"
									},
									"typeName": {
										"id": 974,
										"name": "uint16",
										"nodeType": "ElementaryTypeName",
										"src": "2345:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint16",
											"typeString": "uint16"
										}
									},
									"value": {
										"hexValue": "30",
										"id": 975,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2376:1:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "bf769a3f",
									"id": 979,
									"mutability": "mutable",
									"name": "maxFeeBps",
									"nameLocation": "2412:9:10",
									"nodeType": "VariableDeclaration",
									"scope": 2099,
									"src": "2397:30:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint16",
										"typeString": "uint16"
									},
									"typeName": {
										"id": 977,
										"name": "uint16",
										"nodeType": "ElementaryTypeName",
										"src": "2397:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint16",
											"typeString": "uint16"
										}
									},
									"value": {
										"hexValue": "353030",
										"id": 978,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2424:3:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_500_by_1",
											"typeString": "int_const 500"
										},
										"value": "500"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9ea7d587",
									"id": 983,
									"mutability": "mutable",
									"name": "isResolver",
									"nameLocation": "2483:10:10",
									"nodeType": "VariableDeclaration",
									"scope": 2099,
									"src": "2451:42:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 982,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 980,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2459:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2451:24:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 981,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "2470:4:10",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c5adf7c9",
									"id": 986,
									"mutability": "mutable",
									"name": "nextMatchId",
									"nameLocation": "2601:11:10",
									"nodeType": "VariableDeclaration",
									"scope": 2099,
									"src": "2586:30:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 984,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2586:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 985,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2615:1:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "4768d4ef",
									"id": 991,
									"mutability": "mutable",
									"name": "matches",
									"nameLocation": "2655:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 2099,
									"src": "2622:40:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
										"typeString": "mapping(uint256 => struct Connect4Stakes.Match)"
									},
									"typeName": {
										"id": 990,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 987,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2630:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "2622:25:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
											"typeString": "mapping(uint256 => struct Connect4Stakes.Match)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 989,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 988,
												"name": "Match",
												"nameLocations": [
													"2641:5:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 971,
												"src": "2641:5:10"
											},
											"referencedDeclaration": 971,
											"src": "2641:5:10",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
												"typeString": "struct Connect4Stakes.Match"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "4e55a1c2",
									"id": 997,
									"mutability": "mutable",
									"name": "withdrawnAfterTimeout",
									"nameLocation": "2720:21:10",
									"nodeType": "VariableDeclaration",
									"scope": 2099,
									"src": "2668:73:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(uint256 => mapping(address => bool))"
									},
									"typeName": {
										"id": 996,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 992,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2676:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "2668:44:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(uint256 => mapping(address => bool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 995,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 993,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2695:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "2687:24:10",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 994,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2706:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "f976ac1091ae1d609c0dc3a04834e4964b264db74217663204ce435fee968f50",
									"id": 1015,
									"name": "MatchCreated",
									"nameLocation": "2849:12:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 999,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "2887:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "2871:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 998,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2871:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1001,
												"indexed": true,
												"mutability": "mutable",
												"name": "creator",
												"nameLocation": "2915:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "2899:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2899:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2948:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "2932:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2932:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1005,
												"indexed": false,
												"mutability": "mutable",
												"name": "stake",
												"nameLocation": "2971:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "2963:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1004,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2963:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"indexed": false,
												"mutability": "mutable",
												"name": "opponent",
												"nameLocation": "2994:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "2986:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1006,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2986:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"indexed": false,
												"mutability": "mutable",
												"name": "startDeadline",
												"nameLocation": "3020:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "3012:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"indexed": false,
												"mutability": "mutable",
												"name": "resolveWindow",
												"nameLocation": "3051:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "3043:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3043:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1013,
												"indexed": false,
												"mutability": "mutable",
												"name": "resolver",
												"nameLocation": "3082:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "3074:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1012,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3074:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2861:235:10"
									},
									"src": "2843:254:10"
								},
								{
									"anonymous": false,
									"eventSelector": "bac6c1f65fa2e0f78a4e7dead8b72a284ff81ba7c397e22f9cf0e7ed2f7efd1a",
									"id": 1023,
									"name": "MatchJoined",
									"nameLocation": "3108:11:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3136:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "3120:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1016,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3120:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1019,
												"indexed": true,
												"mutability": "mutable",
												"name": "opponent",
												"nameLocation": "3156:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "3140:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3140:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"indexed": false,
												"mutability": "mutable",
												"name": "resolveDeadline",
												"nameLocation": "3174:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "3166:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1020,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3166:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3119:71:10"
									},
									"src": "3102:89:10"
								},
								{
									"anonymous": false,
									"eventSelector": "0c9b740236bb539e45eb1efa55cd846ada59902e71f281c7e6f8db14fe6582f0",
									"id": 1031,
									"name": "MatchResultSubmitted",
									"nameLocation": "3202:20:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1025,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3239:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1031,
												"src": "3223:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3223:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1027,
												"indexed": true,
												"mutability": "mutable",
												"name": "submitter",
												"nameLocation": "3259:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1031,
												"src": "3243:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1026,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3243:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1029,
												"indexed": false,
												"mutability": "mutable",
												"name": "winner",
												"nameLocation": "3278:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1031,
												"src": "3270:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1028,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3270:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3222:63:10"
									},
									"src": "3196:90:10"
								},
								{
									"anonymous": false,
									"eventSelector": "c681b7344754f412a9bd7ae2cc1cccd1e8bc6e7da75ab89b91e9eec5e4c40788",
									"id": 1041,
									"name": "MatchResolved",
									"nameLocation": "3297:13:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3327:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "3311:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3311:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1035,
												"indexed": true,
												"mutability": "mutable",
												"name": "winner",
												"nameLocation": "3347:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "3331:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3331:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1037,
												"indexed": false,
												"mutability": "mutable",
												"name": "prize",
												"nameLocation": "3363:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "3355:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3355:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1039,
												"indexed": false,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "3378:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1041,
												"src": "3370:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1038,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3370:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3310:72:10"
									},
									"src": "3291:92:10"
								},
								{
									"anonymous": false,
									"eventSelector": "d032e44272ccb930cd0264251a97b70771f63de576a3fbeff5f2afe58f9c91be",
									"id": 1045,
									"name": "MatchRefunded",
									"nameLocation": "3394:13:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3424:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "3408:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1042,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3408:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3407:20:10"
									},
									"src": "3388:40:10"
								},
								{
									"anonymous": false,
									"eventSelector": "82b5558fdeb37cb74b6e8eb4a87486d06c7ef8951416a5dc76c25f0bd9c3bb43",
									"id": 1051,
									"name": "ResolverSet",
									"nameLocation": "3439:11:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"indexed": true,
												"mutability": "mutable",
												"name": "resolver",
												"nameLocation": "3467:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "3451:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1046,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1049,
												"indexed": false,
												"mutability": "mutable",
												"name": "allowed",
												"nameLocation": "3482:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "3477:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1048,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3477:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:40:10"
									},
									"src": "3433:58:10"
								},
								{
									"anonymous": false,
									"eventSelector": "f44d9b22cdd87e55b71b9245548303c18d17a3c912a4e0b135ea1330351a1fc1",
									"id": 1059,
									"name": "FeesUpdated",
									"nameLocation": "3502:11:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1053,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "3530:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "3514:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1052,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3514:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1055,
												"indexed": false,
												"mutability": "mutable",
												"name": "defaultFeeBps",
												"nameLocation": "3548:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "3541:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1054,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3541:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1057,
												"indexed": false,
												"mutability": "mutable",
												"name": "maxFeeBps",
												"nameLocation": "3570:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "3563:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1056,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "3563:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3513:67:10"
									},
									"src": "3496:85:10"
								},
								{
									"body": {
										"id": 1072,
										"nodeType": "Block",
										"src": "3713:45:10",
										"statements": [
											{
												"expression": {
													"id": 1070,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1068,
														"name": "feeRecipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 973,
														"src": "3723:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1069,
														"name": "_feeRecipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1061,
														"src": "3738:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3723:28:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1071,
												"nodeType": "ExpressionStatement",
												"src": "3723:28:10"
											}
										]
									},
									"id": 1073,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 1064,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "3701:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1065,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3705:6:10",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "3701:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1066,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1063,
												"name": "Ownable",
												"nameLocations": [
													"3693:7:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "3693:7:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "3693:19:10"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "_feeRecipient",
												"nameLocation": "3678:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1073,
												"src": "3670:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1060,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3670:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3669:23:10"
									},
									"returnParameters": {
										"id": 1067,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3713:0:10"
									},
									"scope": 2099,
									"src": "3658:100:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1093,
										"nodeType": "Block",
										"src": "3900:90:10",
										"statements": [
											{
												"expression": {
													"id": 1086,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1082,
															"name": "isResolver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 983,
															"src": "3910:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1084,
														"indexExpression": {
															"id": 1083,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1075,
															"src": "3921:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3910:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1085,
														"name": "allowed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1077,
														"src": "3932:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3910:29:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1087,
												"nodeType": "ExpressionStatement",
												"src": "3910:29:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1089,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1075,
															"src": "3966:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1090,
															"name": "allowed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1077,
															"src": "3975:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1088,
														"name": "ResolverSet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1051,
														"src": "3954:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,bool)"
														}
													},
													"id": 1091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3954:29:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1092,
												"nodeType": "EmitStatement",
												"src": "3949:34:10"
											}
										]
									},
									"functionSelector": "1da6ed7c",
									"id": 1094,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1080,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1079,
												"name": "onlyOwner",
												"nameLocations": [
													"3890:9:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "3890:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "3890:9:10"
										}
									],
									"name": "setResolver",
									"nameLocation": "3838:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3858:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1094,
												"src": "3850:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1074,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3850:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "allowed",
												"nameLocation": "3872:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1094,
												"src": "3867:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1076,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3867:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3849:31:10"
									},
									"returnParameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3900:0:10"
									},
									"scope": 2099,
									"src": "3829:161:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1137,
										"nodeType": "Block",
										"src": "4093:291:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1106,
																"name": "_maxFeeBps",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1100,
																"src": "4111:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "31303030",
																"id": 1107,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4125:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000_by_1",
																	"typeString": "int_const 1000"
																},
																"value": "1000"
															},
															"src": "4111:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6d6178203e313025",
															"id": 1109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4131:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0ef160d62fc39a09966a6056cce47f05e13d70a9e5f48eb043c52f7fb19c1442",
																"typeString": "literal_string \"max >10%\""
															},
															"value": "max >10%"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0ef160d62fc39a09966a6056cce47f05e13d70a9e5f48eb043c52f7fb19c1442",
																"typeString": "literal_string \"max >10%\""
															}
														],
														"id": 1105,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4103:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4103:39:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1111,
												"nodeType": "ExpressionStatement",
												"src": "4103:39:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 1115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1113,
																"name": "_defaultFeeBps",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1098,
																"src": "4160:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1114,
																"name": "_maxFeeBps",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1100,
																"src": "4178:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"src": "4160:28:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "64656661756c74203e206d6178",
															"id": 1116,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4190:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d6da79e1056f548f30d999f17021deabae88604667bbf73470283a5feb4606cd",
																"typeString": "literal_string \"default > max\""
															},
															"value": "default > max"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d6da79e1056f548f30d999f17021deabae88604667bbf73470283a5feb4606cd",
																"typeString": "literal_string \"default > max\""
															}
														],
														"id": 1112,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4152:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4152:54:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1118,
												"nodeType": "ExpressionStatement",
												"src": "4152:54:10"
											},
											{
												"expression": {
													"id": 1121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1119,
														"name": "feeRecipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 973,
														"src": "4216:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1120,
														"name": "recipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1096,
														"src": "4231:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4216:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1122,
												"nodeType": "ExpressionStatement",
												"src": "4216:24:10"
											},
											{
												"expression": {
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1123,
														"name": "defaultFeeBps",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "4250:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1124,
														"name": "_defaultFeeBps",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1098,
														"src": "4266:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "4250:30:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"id": 1126,
												"nodeType": "ExpressionStatement",
												"src": "4250:30:10"
											},
											{
												"expression": {
													"id": 1129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1127,
														"name": "maxFeeBps",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 979,
														"src": "4290:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1128,
														"name": "_maxFeeBps",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "4302:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "4290:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"id": 1130,
												"nodeType": "ExpressionStatement",
												"src": "4290:22:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1132,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1096,
															"src": "4339:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1133,
															"name": "_defaultFeeBps",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1098,
															"src": "4350:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														{
															"id": 1134,
															"name": "_maxFeeBps",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "4366:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"id": 1131,
														"name": "FeesUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1059,
														"src": "4327:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint16_$_t_uint16_$returns$__$",
															"typeString": "function (address,uint16,uint16)"
														}
													},
													"id": 1135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4327:50:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1136,
												"nodeType": "EmitStatement",
												"src": "4322:55:10"
											}
										]
									},
									"functionSelector": "8c4b2aae",
									"id": 1138,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1103,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1102,
												"name": "onlyOwner",
												"nameLocations": [
													"4083:9:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "4083:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "4083:9:10"
										}
									],
									"name": "setFees",
									"nameLocation": "4005:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4021:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "4013:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1095,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4013:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "_defaultFeeBps",
												"nameLocation": "4039:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "4032:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1097,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4032:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "_maxFeeBps",
												"nameLocation": "4062:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "4055:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1099,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4055:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4012:61:10"
									},
									"returnParameters": {
										"id": 1104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4093:0:10"
									},
									"scope": 2099,
									"src": "3996:388:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1275,
										"nodeType": "Block",
										"src": "5276:756:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1159,
															"name": "stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1143,
															"src": "5302:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														},
														{
															"id": 1160,
															"name": "startDeadlineSec",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1147,
															"src": "5309:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														{
															"id": 1161,
															"name": "resolveWindowSec",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1149,
															"src": "5327:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															},
															{
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															{
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														],
														"id": 1158,
														"name": "_validateCreate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "5286:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint96_$_t_uint32_$_t_uint32_$returns$__$",
															"typeString": "function (uint96,uint32,uint32) pure"
														}
													},
													"id": 1162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5286:58:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1163,
												"nodeType": "ExpressionStatement",
												"src": "5286:58:10"
											},
											{
												"expression": {
													"id": 1167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1164,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1156,
														"src": "5355:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1166,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "5360:13:10",
														"subExpression": {
															"id": 1165,
															"name": "nextMatchId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 986,
															"src": "5360:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5355:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1168,
												"nodeType": "ExpressionStatement",
												"src": "5355:18:10"
											},
											{
												"assignments": [
													1171
												],
												"declarations": [
													{
														"constant": false,
														"id": 1171,
														"mutability": "mutable",
														"name": "m",
														"nameLocation": "5397:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 1275,
														"src": "5383:15:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
															"typeString": "struct Connect4Stakes.Match"
														},
														"typeName": {
															"id": 1170,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1169,
																"name": "Match",
																"nameLocations": [
																	"5383:5:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 971,
																"src": "5383:5:10"
															},
															"referencedDeclaration": 971,
															"src": "5383:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1175,
												"initialValue": {
													"baseExpression": {
														"id": 1172,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "5401:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1174,
													"indexExpression": {
														"id": 1173,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1156,
														"src": "5409:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5401:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5383:29:10"
											},
											{
												"expression": {
													"id": 1181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1176,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5422:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1178,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5424:7:10",
														"memberName": "creator",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 943,
														"src": "5422:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1179,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "5434:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1180,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5438:6:10",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "5434:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5422:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1182,
												"nodeType": "ExpressionStatement",
												"src": "5422:22:10"
											},
											{
												"expression": {
													"id": 1187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1183,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5454:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1185,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5456:8:10",
														"memberName": "opponent",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 945,
														"src": "5454:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1186,
														"name": "opponent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1145,
														"src": "5467:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5454:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1188,
												"nodeType": "ExpressionStatement",
												"src": "5454:21:10"
											},
											{
												"expression": {
													"id": 1193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1189,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5485:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1191,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5487:5:10",
														"memberName": "token",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 947,
														"src": "5485:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1192,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1141,
														"src": "5495:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5485:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1194,
												"nodeType": "ExpressionStatement",
												"src": "5485:15:10"
											},
											{
												"expression": {
													"id": 1199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1195,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5510:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1197,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5512:5:10",
														"memberName": "stake",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 949,
														"src": "5510:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint96",
															"typeString": "uint96"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1198,
														"name": "stake",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1143,
														"src": "5520:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint96",
															"typeString": "uint96"
														}
													},
													"src": "5510:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"id": 1200,
												"nodeType": "ExpressionStatement",
												"src": "5510:15:10"
											},
											{
												"expression": {
													"id": 1209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1201,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5535:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1203,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5537:9:10",
														"memberName": "createdAt",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 951,
														"src": "5535:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 1206,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "5556:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1207,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5562:9:10",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "5556:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5549:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint40_$",
																"typeString": "type(uint40)"
															},
															"typeName": {
																"id": 1204,
																"name": "uint40",
																"nodeType": "ElementaryTypeName",
																"src": "5549:6:10",
																"typeDescriptions": {}
															}
														},
														"id": 1208,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5549:23:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"src": "5535:37:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint40",
														"typeString": "uint40"
													}
												},
												"id": 1210,
												"nodeType": "ExpressionStatement",
												"src": "5535:37:10"
											},
											{
												"expression": {
													"id": 1221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1211,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5582:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1213,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5584:13:10",
														"memberName": "startDeadline",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 953,
														"src": "5582:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1219,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1216,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "5607:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1217,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5613:9:10",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "5607:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 1218,
																	"name": "startDeadlineSec",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1147,
																	"src": "5625:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "5607:34:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1215,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5600:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint40_$",
																"typeString": "type(uint40)"
															},
															"typeName": {
																"id": 1214,
																"name": "uint40",
																"nodeType": "ElementaryTypeName",
																"src": "5600:6:10",
																"typeDescriptions": {}
															}
														},
														"id": 1220,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5600:42:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"src": "5582:60:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint40",
														"typeString": "uint40"
													}
												},
												"id": 1222,
												"nodeType": "ExpressionStatement",
												"src": "5582:60:10"
											},
											{
												"expression": {
													"id": 1227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1223,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5652:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1225,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5654:13:10",
														"memberName": "resolveWindow",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 957,
														"src": "5652:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1226,
														"name": "resolveWindowSec",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1149,
														"src": "5670:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "5652:34:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1228,
												"nodeType": "ExpressionStatement",
												"src": "5652:34:10"
											},
											{
												"expression": {
													"id": 1233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1229,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5696:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1231,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5698:8:10",
														"memberName": "resolver",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 959,
														"src": "5696:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1232,
														"name": "resolver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1151,
														"src": "5709:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5696:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1234,
												"nodeType": "ExpressionStatement",
												"src": "5696:21:10"
											},
											{
												"expression": {
													"id": 1240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1235,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5727:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1237,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5729:6:10",
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "5727:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1238,
															"name": "Status",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 941,
															"src": "5738:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																"typeString": "type(enum Connect4Stakes.Status)"
															}
														},
														"id": 1239,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5745:7:10",
														"memberName": "Created",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 937,
														"src": "5738:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"src": "5727:25:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$941",
														"typeString": "enum Connect4Stakes.Status"
													}
												},
												"id": 1241,
												"nodeType": "ExpressionStatement",
												"src": "5727:25:10"
											},
											{
												"expression": {
													"id": 1246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1242,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "5762:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1244,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5764:6:10",
														"memberName": "feeBps",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 961,
														"src": "5762:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1245,
														"name": "defaultFeeBps",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "5773:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "5762:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"id": 1247,
												"nodeType": "ExpressionStatement",
												"src": "5762:24:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1252,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5858:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5862:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5858:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1256,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5878:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Connect4Stakes_$2099",
																		"typeString": "contract Connect4Stakes"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Connect4Stakes_$2099",
																		"typeString": "contract Connect4Stakes"
																	}
																],
																"id": 1255,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5870:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1254,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5870:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1257,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5870:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1258,
															"name": "stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1143,
															"src": "5885:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1249,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1141,
																	"src": "5834:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1248,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "5827:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$380_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5827:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 1251,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5841:16:10",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 488,
														"src": "5827:30:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1259,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5827:64:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1260,
												"nodeType": "ExpressionStatement",
												"src": "5827:64:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1262,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1156,
															"src": "5933:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1263,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5937:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1264,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5941:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5937:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1265,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1141,
															"src": "5949:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1266,
															"name": "stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1143,
															"src": "5956:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														},
														{
															"id": 1267,
															"name": "opponent",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1145,
															"src": "5963:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1268,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1171,
																"src": "5973:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1269,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5975:13:10",
															"memberName": "startDeadline",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 953,
															"src": "5973:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint40",
																"typeString": "uint40"
															}
														},
														{
															"expression": {
																"id": 1270,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1171,
																"src": "5990:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1271,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5992:13:10",
															"memberName": "resolveWindow",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 957,
															"src": "5990:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														{
															"id": 1272,
															"name": "resolver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1151,
															"src": "6007:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint40",
																"typeString": "uint40"
															},
															{
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1261,
														"name": "MatchCreated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1015,
														"src": "5907:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address,address,uint256,address,uint256,uint256,address)"
														}
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5907:118:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1274,
												"nodeType": "EmitStatement",
												"src": "5902:123:10"
											}
										]
									},
									"documentation": {
										"id": 1139,
										"nodeType": "StructuredDocumentation",
										"src": "4464:571:10",
										"text": " @notice Create a match (creator must approve this contract for `stake` first, unless using permit).\n @param token ERC-20 token address for stakes\n @param stake Amount each player must deposit (same token decimals for both)\n @param opponent If nonzero, only this address may join. Zero => open challenge\n @param startDeadlineSec Seconds from now for the join window (>= 60)\n @param resolveWindowSec Seconds allowed for resolution after opponent joins (>= 300)\n @param resolver Optional per-match referee (can be zero)"
									},
									"functionSelector": "45c67d86",
									"id": 1276,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1154,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1153,
												"name": "nonReentrant",
												"nameLocations": [
													"5242:12:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "5242:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "5242:12:10"
										}
									],
									"name": "createMatch",
									"nameLocation": "5049:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5078:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "5070:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1140,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5070:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "stake",
												"nameLocation": "5101:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "5093:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 1142,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "5093:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "opponent",
												"nameLocation": "5124:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "5116:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5116:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "startDeadlineSec",
												"nameLocation": "5150:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "5142:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1146,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "5142:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "resolveWindowSec",
												"nameLocation": "5184:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "5176:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1148,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "5176:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "resolver",
												"nameLocation": "5218:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "5210:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5210:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:172:10"
									},
									"returnParameters": {
										"id": 1157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5272:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "5264:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5264:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5263:12:10"
									},
									"scope": 2099,
									"src": "5040:992:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1447,
										"nodeType": "Block",
										"src": "6515:944:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1307,
															"name": "stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1281,
															"src": "6541:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														},
														{
															"id": 1308,
															"name": "startDeadlineSec",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1285,
															"src": "6548:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														{
															"id": 1309,
															"name": "resolveWindowSec",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1287,
															"src": "6566:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															},
															{
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															{
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														],
														"id": 1306,
														"name": "_validateCreate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "6525:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint96_$_t_uint32_$_t_uint32_$returns$__$",
															"typeString": "function (uint96,uint32,uint32) pure"
														}
													},
													"id": 1310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6525:58:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1311,
												"nodeType": "ExpressionStatement",
												"src": "6525:58:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1316,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6680:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1317,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6684:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6680:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1320,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6700:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Connect4Stakes_$2099",
																		"typeString": "contract Connect4Stakes"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Connect4Stakes_$2099",
																		"typeString": "contract Connect4Stakes"
																	}
																],
																"id": 1319,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6692:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1318,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6692:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1321,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6692:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1322,
															"name": "permitValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1291,
															"src": "6707:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1323,
															"name": "permitDeadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1293,
															"src": "6720:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1324,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1295,
															"src": "6736:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1325,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1297,
															"src": "6739:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1326,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1299,
															"src": "6742:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1313,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "6666:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1312,
																"name": "IERC20Permit",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 416,
																"src": "6653:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Permit_$416_$",
																	"typeString": "type(contract IERC20Permit)"
																}
															},
															"id": 1314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6653:19:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$416",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 1315,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6673:6:10",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 401,
														"src": "6653:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 1327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6653:91:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1328,
												"nodeType": "ExpressionStatement",
												"src": "6653:91:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1330,
																"name": "permitValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1291,
																"src": "6762:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1331,
																"name": "stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1281,
																"src": "6777:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint96",
																	"typeString": "uint96"
																}
															},
															"src": "6762:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7065726d6974203c207374616b65",
															"id": 1333,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6784:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_37f4961c4061b337d1a8b9e69cc95c17b52bfac8b3546f60c918846f12959ac3",
																"typeString": "literal_string \"permit < stake\""
															},
															"value": "permit < stake"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_37f4961c4061b337d1a8b9e69cc95c17b52bfac8b3546f60c918846f12959ac3",
																"typeString": "literal_string \"permit < stake\""
															}
														],
														"id": 1329,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6754:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6754:47:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1335,
												"nodeType": "ExpressionStatement",
												"src": "6754:47:10"
											},
											{
												"expression": {
													"id": 1339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1336,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1304,
														"src": "6812:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1338,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6817:13:10",
														"subExpression": {
															"id": 1337,
															"name": "nextMatchId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 986,
															"src": "6817:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6812:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1340,
												"nodeType": "ExpressionStatement",
												"src": "6812:18:10"
											},
											{
												"assignments": [
													1343
												],
												"declarations": [
													{
														"constant": false,
														"id": 1343,
														"mutability": "mutable",
														"name": "m",
														"nameLocation": "6854:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 1447,
														"src": "6840:15:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
															"typeString": "struct Connect4Stakes.Match"
														},
														"typeName": {
															"id": 1342,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1341,
																"name": "Match",
																"nameLocations": [
																	"6840:5:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 971,
																"src": "6840:5:10"
															},
															"referencedDeclaration": 971,
															"src": "6840:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1347,
												"initialValue": {
													"baseExpression": {
														"id": 1344,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "6858:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1346,
													"indexExpression": {
														"id": 1345,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1304,
														"src": "6866:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6858:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6840:29:10"
											},
											{
												"expression": {
													"id": 1353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1348,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "6879:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1350,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6881:7:10",
														"memberName": "creator",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 943,
														"src": "6879:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1351,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "6891:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1352,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6895:6:10",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "6891:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6879:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1354,
												"nodeType": "ExpressionStatement",
												"src": "6879:22:10"
											},
											{
												"expression": {
													"id": 1359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1355,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "6911:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1357,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6913:8:10",
														"memberName": "opponent",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 945,
														"src": "6911:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1358,
														"name": "opponent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1283,
														"src": "6924:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6911:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1360,
												"nodeType": "ExpressionStatement",
												"src": "6911:21:10"
											},
											{
												"expression": {
													"id": 1365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1361,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "6942:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1363,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6944:5:10",
														"memberName": "token",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 947,
														"src": "6942:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1364,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1279,
														"src": "6952:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6942:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1366,
												"nodeType": "ExpressionStatement",
												"src": "6942:15:10"
											},
											{
												"expression": {
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1367,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "6967:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1369,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6969:5:10",
														"memberName": "stake",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 949,
														"src": "6967:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint96",
															"typeString": "uint96"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1370,
														"name": "stake",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1281,
														"src": "6977:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint96",
															"typeString": "uint96"
														}
													},
													"src": "6967:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"id": 1372,
												"nodeType": "ExpressionStatement",
												"src": "6967:15:10"
											},
											{
												"expression": {
													"id": 1381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1373,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "6992:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1375,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6994:9:10",
														"memberName": "createdAt",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 951,
														"src": "6992:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 1378,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "7013:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1379,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7019:9:10",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "7013:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1377,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7006:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint40_$",
																"typeString": "type(uint40)"
															},
															"typeName": {
																"id": 1376,
																"name": "uint40",
																"nodeType": "ElementaryTypeName",
																"src": "7006:6:10",
																"typeDescriptions": {}
															}
														},
														"id": 1380,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7006:23:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"src": "6992:37:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint40",
														"typeString": "uint40"
													}
												},
												"id": 1382,
												"nodeType": "ExpressionStatement",
												"src": "6992:37:10"
											},
											{
												"expression": {
													"id": 1393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1383,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "7039:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1385,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7041:13:10",
														"memberName": "startDeadline",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 953,
														"src": "7039:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1391,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1388,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "7064:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7070:9:10",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "7064:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 1390,
																	"name": "startDeadlineSec",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1285,
																	"src": "7082:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "7064:34:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1387,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7057:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint40_$",
																"typeString": "type(uint40)"
															},
															"typeName": {
																"id": 1386,
																"name": "uint40",
																"nodeType": "ElementaryTypeName",
																"src": "7057:6:10",
																"typeDescriptions": {}
															}
														},
														"id": 1392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7057:42:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"src": "7039:60:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint40",
														"typeString": "uint40"
													}
												},
												"id": 1394,
												"nodeType": "ExpressionStatement",
												"src": "7039:60:10"
											},
											{
												"expression": {
													"id": 1399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1395,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "7109:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1397,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7111:13:10",
														"memberName": "resolveWindow",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 957,
														"src": "7109:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1398,
														"name": "resolveWindowSec",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1287,
														"src": "7127:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "7109:34:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1400,
												"nodeType": "ExpressionStatement",
												"src": "7109:34:10"
											},
											{
												"expression": {
													"id": 1405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1401,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "7153:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1403,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7155:8:10",
														"memberName": "resolver",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 959,
														"src": "7153:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1404,
														"name": "resolver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1289,
														"src": "7166:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7153:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1406,
												"nodeType": "ExpressionStatement",
												"src": "7153:21:10"
											},
											{
												"expression": {
													"id": 1412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1407,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "7184:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1409,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7186:6:10",
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "7184:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1410,
															"name": "Status",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 941,
															"src": "7195:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																"typeString": "type(enum Connect4Stakes.Status)"
															}
														},
														"id": 1411,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7202:7:10",
														"memberName": "Created",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 937,
														"src": "7195:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"src": "7184:25:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$941",
														"typeString": "enum Connect4Stakes.Status"
													}
												},
												"id": 1413,
												"nodeType": "ExpressionStatement",
												"src": "7184:25:10"
											},
											{
												"expression": {
													"id": 1418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1414,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "7219:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1416,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7221:6:10",
														"memberName": "feeBps",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 961,
														"src": "7219:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1417,
														"name": "defaultFeeBps",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "7230:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "7219:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"id": 1419,
												"nodeType": "ExpressionStatement",
												"src": "7219:24:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1424,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7285:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1425,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7289:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7285:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1428,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "7305:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Connect4Stakes_$2099",
																		"typeString": "contract Connect4Stakes"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Connect4Stakes_$2099",
																		"typeString": "contract Connect4Stakes"
																	}
																],
																"id": 1427,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7297:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1426,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7297:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7297:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1430,
															"name": "stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1281,
															"src": "7312:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1421,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "7261:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1420,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "7254:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$380_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7254:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 1423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7268:16:10",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 488,
														"src": "7254:30:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7254:64:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1432,
												"nodeType": "ExpressionStatement",
												"src": "7254:64:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1434,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1304,
															"src": "7360:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1435,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7364:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1436,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7368:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7364:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1437,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1279,
															"src": "7376:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1438,
															"name": "stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1281,
															"src": "7383:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														},
														{
															"id": 1439,
															"name": "opponent",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1283,
															"src": "7390:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1440,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1343,
																"src": "7400:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1441,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7402:13:10",
															"memberName": "startDeadline",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 953,
															"src": "7400:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint40",
																"typeString": "uint40"
															}
														},
														{
															"expression": {
																"id": 1442,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1343,
																"src": "7417:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1443,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7419:13:10",
															"memberName": "resolveWindow",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 957,
															"src": "7417:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														{
															"id": 1444,
															"name": "resolver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1289,
															"src": "7434:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint40",
																"typeString": "uint40"
															},
															{
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1433,
														"name": "MatchCreated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1015,
														"src": "7334:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address,address,uint256,address,uint256,uint256,address)"
														}
													},
													"id": 1445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7334:118:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1446,
												"nodeType": "EmitStatement",
												"src": "7329:123:10"
											}
										]
									},
									"documentation": {
										"id": 1277,
										"nodeType": "StructuredDocumentation",
										"src": "6038:110:10",
										"text": " @notice Same as createMatch but uses EIP-2612 permit so the creator can skip an approve tx."
									},
									"functionSelector": "e8c228db",
									"id": 1448,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1302,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1301,
												"name": "nonReentrant",
												"nameLocations": [
													"6481:12:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "6481:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "6481:12:10"
										}
									],
									"name": "createMatchWithPermit",
									"nameLocation": "6162:21:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6201:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6193:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6193:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "stake",
												"nameLocation": "6224:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6216:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 1280,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "6216:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1283,
												"mutability": "mutable",
												"name": "opponent",
												"nameLocation": "6247:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6239:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1282,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6239:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "startDeadlineSec",
												"nameLocation": "6273:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6265:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1284,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6265:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "resolveWindowSec",
												"nameLocation": "6307:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6299:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1286,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6299:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1289,
												"mutability": "mutable",
												"name": "resolver",
												"nameLocation": "6341:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6333:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6333:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "permitValue",
												"nameLocation": "6367:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6359:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6359:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "permitDeadline",
												"nameLocation": "6396:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6388:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6388:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1295,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6426:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6420:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1294,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6420:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1297,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6445:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6437:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1296,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6437:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6464:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6456:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1298,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6456:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6183:288:10"
									},
									"returnParameters": {
										"id": 1305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1304,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6511:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "6503:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6503:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6502:12:10"
									},
									"scope": 2099,
									"src": "6153:1306:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1478,
										"nodeType": "Block",
										"src": "7568:184:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															},
															"id": 1460,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1458,
																"name": "stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1450,
																"src": "7586:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint96",
																	"typeString": "uint96"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1459,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7594:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7586:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7374616b65203d2030",
															"id": 1461,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7597:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bb8f787a46930ac3f7b8955e775da2baba11e7fa59d98ceb0b9662199195910f",
																"typeString": "literal_string \"stake = 0\""
															},
															"value": "stake = 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bb8f787a46930ac3f7b8955e775da2baba11e7fa59d98ceb0b9662199195910f",
																"typeString": "literal_string \"stake = 0\""
															}
														],
														"id": 1457,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7578:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7578:31:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1463,
												"nodeType": "ExpressionStatement",
												"src": "7578:31:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 1467,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1465,
																"name": "startDeadlineSec",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1452,
																"src": "7627:16:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "3630",
																"id": 1466,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7647:2:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "60"
															},
															"src": "7627:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6a6f696e2077696e646f7720746f6f2073686f7274",
															"id": 1468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7651:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5c707be629b3a8f4d06ca35c02ad8d00d9eb5ff6743335779bdfd253f0f2035f",
																"typeString": "literal_string \"join window too short\""
															},
															"value": "join window too short"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5c707be629b3a8f4d06ca35c02ad8d00d9eb5ff6743335779bdfd253f0f2035f",
																"typeString": "literal_string \"join window too short\""
															}
														],
														"id": 1464,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7619:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7619:56:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1470,
												"nodeType": "ExpressionStatement",
												"src": "7619:56:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 1474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1472,
																"name": "resolveWindowSec",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1454,
																"src": "7693:16:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "333030",
																"id": 1473,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7713:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_300_by_1",
																	"typeString": "int_const 300"
																},
																"value": "300"
															},
															"src": "7693:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7265736f6c76652077696e646f7720746f6f2073686f7274",
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7718:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8c7fc8df3ee1bfb2eefcc266fa424986124ae27c6b397b75d235b2b86eee564c",
																"typeString": "literal_string \"resolve window too short\""
															},
															"value": "resolve window too short"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8c7fc8df3ee1bfb2eefcc266fa424986124ae27c6b397b75d235b2b86eee564c",
																"typeString": "literal_string \"resolve window too short\""
															}
														],
														"id": 1471,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7685:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7685:60:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1477,
												"nodeType": "ExpressionStatement",
												"src": "7685:60:10"
											}
										]
									},
									"id": 1479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_validateCreate",
									"nameLocation": "7474:15:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1450,
												"mutability": "mutable",
												"name": "stake",
												"nameLocation": "7497:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "7490:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 1449,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "7490:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "startDeadlineSec",
												"nameLocation": "7511:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "7504:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1451,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "7504:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1454,
												"mutability": "mutable",
												"name": "resolveWindowSec",
												"nameLocation": "7536:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "7529:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1453,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "7529:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7489:64:10"
									},
									"returnParameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7568:0:10"
									},
									"scope": 2099,
									"src": "7465:287:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1581,
										"nodeType": "Block",
										"src": "7995:595:10",
										"statements": [
											{
												"assignments": [
													1489
												],
												"declarations": [
													{
														"constant": false,
														"id": 1489,
														"mutability": "mutable",
														"name": "m",
														"nameLocation": "8019:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 1581,
														"src": "8005:15:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
															"typeString": "struct Connect4Stakes.Match"
														},
														"typeName": {
															"id": 1488,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1487,
																"name": "Match",
																"nameLocations": [
																	"8005:5:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 971,
																"src": "8005:5:10"
															},
															"referencedDeclaration": 971,
															"src": "8005:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1493,
												"initialValue": {
													"baseExpression": {
														"id": 1490,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "8023:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1492,
													"indexExpression": {
														"id": 1491,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1482,
														"src": "8031:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8023:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8005:29:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_Status_$941",
																"typeString": "enum Connect4Stakes.Status"
															},
															"id": 1499,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1495,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1489,
																	"src": "8052:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1496,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8054:6:10",
																"memberName": "status",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 964,
																"src": "8052:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1497,
																	"name": "Status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 941,
																	"src": "8064:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																		"typeString": "type(enum Connect4Stakes.Status)"
																	}
																},
																"id": 1498,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "8071:7:10",
																"memberName": "Created",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 937,
																"src": "8064:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"src": "8052:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f74206a6f696e61626c65",
															"id": 1500,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8080:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6bbc6f12c114e131426acc39ab58f0de51aafbdb7ab55aa2d0920b4a22421dc6",
																"typeString": "literal_string \"not joinable\""
															},
															"value": "not joinable"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6bbc6f12c114e131426acc39ab58f0de51aafbdb7ab55aa2d0920b4a22421dc6",
																"typeString": "literal_string \"not joinable\""
															}
														],
														"id": 1494,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8044:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1501,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8044:51:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1502,
												"nodeType": "ExpressionStatement",
												"src": "8044:51:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1504,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "8113:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1505,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8119:9:10",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "8113:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 1506,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1489,
																	"src": "8132:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1507,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8134:13:10",
																"memberName": "startDeadline",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 953,
																"src": "8132:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint40",
																	"typeString": "uint40"
																}
															},
															"src": "8113:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6a6f696e2077696e646f77206f766572",
															"id": 1509,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8149:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebfea95e00710180effca13954435b5ba9cc1d821a3574df1b1447abfe59d52b",
																"typeString": "literal_string \"join window over\""
															},
															"value": "join window over"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebfea95e00710180effca13954435b5ba9cc1d821a3574df1b1447abfe59d52b",
																"typeString": "literal_string \"join window over\""
															}
														],
														"id": 1503,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8105:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8105:63:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1511,
												"nodeType": "ExpressionStatement",
												"src": "8105:63:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1512,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1489,
															"src": "8183:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1513,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8185:8:10",
														"memberName": "opponent",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 945,
														"src": "8183:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1516,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8205:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1515,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8197:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1514,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8197:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1517,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8197:10:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8183:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1536,
													"nodeType": "Block",
													"src": "8288:48:10",
													"statements": [
														{
															"expression": {
																"id": 1534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1529,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1489,
																		"src": "8302:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1531,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8304:8:10",
																	"memberName": "opponent",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 945,
																	"src": "8302:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1532,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "8315:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1533,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8319:6:10",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "8315:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "8302:23:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1535,
															"nodeType": "ExpressionStatement",
															"src": "8302:23:10"
														}
													]
												},
												"id": 1537,
												"nodeType": "IfStatement",
												"src": "8179:157:10",
												"trueBody": {
													"id": 1528,
													"nodeType": "Block",
													"src": "8209:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1524,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 1520,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "8231:3:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1521,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "8235:6:10",
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "8231:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"expression": {
																				"id": 1522,
																				"name": "m",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1489,
																				"src": "8245:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																					"typeString": "struct Connect4Stakes.Match storage pointer"
																				}
																			},
																			"id": 1523,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "8247:8:10",
																			"memberName": "opponent",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 945,
																			"src": "8245:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "8231:24:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "6e6f7420696e7669746564",
																		"id": 1525,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8257:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_16dd9a5a2e986e91746ee616d05ac18042a27f7b8d07fe76f679450efb920a15",
																			"typeString": "literal_string \"not invited\""
																		},
																		"value": "not invited"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_16dd9a5a2e986e91746ee616d05ac18042a27f7b8d07fe76f679450efb920a15",
																			"typeString": "literal_string \"not invited\""
																		}
																	],
																	"id": 1519,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "8223:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1526,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8223:48:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1527,
															"nodeType": "ExpressionStatement",
															"src": "8223:48:10"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1543,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8379:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8383:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8379:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1547,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "8399:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Connect4Stakes_$2099",
																		"typeString": "contract Connect4Stakes"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Connect4Stakes_$2099",
																		"typeString": "contract Connect4Stakes"
																	}
																],
																"id": 1546,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8391:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1545,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8391:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8391:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1549,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1489,
																"src": "8406:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1550,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8408:5:10",
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 949,
															"src": "8406:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1539,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1489,
																		"src": "8353:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1540,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8355:5:10",
																	"memberName": "token",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 947,
																	"src": "8353:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1538,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "8346:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$380_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1541,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8346:15:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 1542,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8362:16:10",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 488,
														"src": "8346:32:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8346:68:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1552,
												"nodeType": "ExpressionStatement",
												"src": "8346:68:10"
											},
											{
												"expression": {
													"id": 1558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1553,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1489,
															"src": "8425:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1555,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8427:6:10",
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "8425:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1556,
															"name": "Status",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 941,
															"src": "8436:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																"typeString": "type(enum Connect4Stakes.Status)"
															}
														},
														"id": 1557,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8443:7:10",
														"memberName": "Started",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 938,
														"src": "8436:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"src": "8425:25:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$941",
														"typeString": "enum Connect4Stakes.Status"
													}
												},
												"id": 1559,
												"nodeType": "ExpressionStatement",
												"src": "8425:25:10"
											},
											{
												"expression": {
													"id": 1571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1560,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1489,
															"src": "8460:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1562,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8462:15:10",
														"memberName": "resolveDeadline",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 955,
														"src": "8460:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1569,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1565,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "8487:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1566,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8493:9:10",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "8487:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"expression": {
																		"id": 1567,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1489,
																		"src": "8505:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1568,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8507:13:10",
																	"memberName": "resolveWindow",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 957,
																	"src": "8505:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "8487:33:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1564,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8480:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint40_$",
																"typeString": "type(uint40)"
															},
															"typeName": {
																"id": 1563,
																"name": "uint40",
																"nodeType": "ElementaryTypeName",
																"src": "8480:6:10",
																"typeDescriptions": {}
															}
														},
														"id": 1570,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8480:41:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint40",
															"typeString": "uint40"
														}
													},
													"src": "8460:61:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint40",
														"typeString": "uint40"
													}
												},
												"id": 1572,
												"nodeType": "ExpressionStatement",
												"src": "8460:61:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1574,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1482,
															"src": "8549:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1575,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1489,
																"src": "8553:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1576,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8555:8:10",
															"memberName": "opponent",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 945,
															"src": "8553:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1577,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1489,
																"src": "8565:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1578,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8567:15:10",
															"memberName": "resolveDeadline",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 955,
															"src": "8565:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint40",
																"typeString": "uint40"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint40",
																"typeString": "uint40"
															}
														],
														"id": 1573,
														"name": "MatchJoined",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1023,
														"src": "8537:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,address,uint256)"
														}
													},
													"id": 1579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8537:46:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1580,
												"nodeType": "EmitStatement",
												"src": "8532:51:10"
											}
										]
									},
									"documentation": {
										"id": 1480,
										"nodeType": "StructuredDocumentation",
										"src": "7758:179:10",
										"text": " @notice Opponent joins an existing match by depositing the same stake.\n         If opponent was unspecified (open challenge), the caller becomes opponent."
									},
									"functionSelector": "feb8c438",
									"id": 1582,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1485,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1484,
												"name": "nonReentrant",
												"nameLocations": [
													"7982:12:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "7982:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "7982:12:10"
										}
									],
									"name": "joinMatch",
									"nameLocation": "7951:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1482,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "7969:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "7961:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7961:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7960:12:10"
									},
									"returnParameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7995:0:10"
									},
									"scope": 2099,
									"src": "7942:648:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1692,
										"nodeType": "Block",
										"src": "8947:675:10",
										"statements": [
											{
												"assignments": [
													1594
												],
												"declarations": [
													{
														"constant": false,
														"id": 1594,
														"mutability": "mutable",
														"name": "m",
														"nameLocation": "8971:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 1692,
														"src": "8957:15:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
															"typeString": "struct Connect4Stakes.Match"
														},
														"typeName": {
															"id": 1593,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1592,
																"name": "Match",
																"nameLocations": [
																	"8957:5:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 971,
																"src": "8957:5:10"
															},
															"referencedDeclaration": 971,
															"src": "8957:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1598,
												"initialValue": {
													"baseExpression": {
														"id": 1595,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "8975:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1597,
													"indexExpression": {
														"id": 1596,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1585,
														"src": "8983:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8975:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8957:29:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_Status_$941",
																"typeString": "enum Connect4Stakes.Status"
															},
															"id": 1604,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1600,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1594,
																	"src": "9004:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1601,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9006:6:10",
																"memberName": "status",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 964,
																"src": "9004:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1602,
																	"name": "Status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 941,
																	"src": "9016:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																		"typeString": "type(enum Connect4Stakes.Status)"
																	}
																},
																"id": 1603,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9023:7:10",
																"memberName": "Started",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 938,
																"src": "9016:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"src": "9004:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f742073746172746564",
															"id": 1605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9032:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e77010d1cd84746d4d55bc64a3553056b308493098e3085151b4455976f44694",
																"typeString": "literal_string \"not started\""
															},
															"value": "not started"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e77010d1cd84746d4d55bc64a3553056b308493098e3085151b4455976f44694",
																"typeString": "literal_string \"not started\""
															}
														],
														"id": 1599,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8996:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8996:50:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1607,
												"nodeType": "ExpressionStatement",
												"src": "8996:50:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1613,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1609,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "9064:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1610,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9070:9:10",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "9064:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 1611,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1594,
																	"src": "9083:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1612,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9085:15:10",
																"memberName": "resolveDeadline",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 955,
																"src": "9083:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint40",
																	"typeString": "uint40"
																}
															},
															"src": "9064:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7265736f6c7574696f6e2077696e646f77206f766572",
															"id": 1614,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9102:24:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b0e1e28c4467a2797ac973664ec0f0273304204f6913cbf2bda7e5906aa310e7",
																"typeString": "literal_string \"resolution window over\""
															},
															"value": "resolution window over"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b0e1e28c4467a2797ac973664ec0f0273304204f6913cbf2bda7e5906aa310e7",
																"typeString": "literal_string \"resolution window over\""
															}
														],
														"id": 1608,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9056:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9056:71:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1616,
												"nodeType": "ExpressionStatement",
												"src": "9056:71:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1626,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1621,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1618,
																	"name": "winner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1587,
																	"src": "9145:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1619,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1594,
																		"src": "9155:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1620,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9157:7:10",
																	"memberName": "creator",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 943,
																	"src": "9155:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9145:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1622,
																	"name": "winner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1587,
																	"src": "9168:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1623,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1594,
																		"src": "9178:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1624,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9180:8:10",
																	"memberName": "opponent",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 945,
																	"src": "9178:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9168:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9145:43:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e76616c69642077696e6e6572",
															"id": 1627,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9190:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c56dbfab86a8095d8b3b515716b57963eb8ec1ec16cfebc2bf1171a7b908c614",
																"typeString": "literal_string \"invalid winner\""
															},
															"value": "invalid winner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c56dbfab86a8095d8b3b515716b57963eb8ec1ec16cfebc2bf1171a7b908c614",
																"typeString": "literal_string \"invalid winner\""
															}
														],
														"id": 1617,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9137:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9137:70:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1629,
												"nodeType": "ExpressionStatement",
												"src": "9137:70:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1641,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1635,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1631,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "9225:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9229:6:10",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "9225:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1633,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1594,
																		"src": "9239:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1634,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9241:7:10",
																	"memberName": "creator",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 943,
																	"src": "9239:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9225:23:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1640,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1636,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "9252:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1637,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9256:6:10",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "9252:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1638,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1594,
																		"src": "9266:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1639,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9268:8:10",
																	"memberName": "opponent",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 945,
																	"src": "9266:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9252:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9225:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f74206120706c61796572",
															"id": 1642,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9278:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_75d5d77860329b1dd26af47f52b5bca28d4ef4a7082f0a660a77ad74190069e9",
																"typeString": "literal_string \"not a player\""
															},
															"value": "not a player"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_75d5d77860329b1dd26af47f52b5bca28d4ef4a7082f0a660a77ad74190069e9",
																"typeString": "literal_string \"not a player\""
															}
														],
														"id": 1630,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9217:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9217:76:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1644,
												"nodeType": "ExpressionStatement",
												"src": "9217:76:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1645,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "9308:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9312:6:10",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "9308:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1647,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1594,
															"src": "9322:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1648,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9324:7:10",
														"memberName": "creator",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 943,
														"src": "9322:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9308:23:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1663,
													"nodeType": "Block",
													"src": "9386:48:10",
													"statements": [
														{
															"expression": {
																"id": 1661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1657,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1594,
																		"src": "9400:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1659,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "9402:12:10",
																	"memberName": "opponentVote",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 970,
																	"src": "9400:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1660,
																	"name": "winner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1587,
																	"src": "9417:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9400:23:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1662,
															"nodeType": "ExpressionStatement",
															"src": "9400:23:10"
														}
													]
												},
												"id": 1664,
												"nodeType": "IfStatement",
												"src": "9304:130:10",
												"trueBody": {
													"id": 1656,
													"nodeType": "Block",
													"src": "9333:47:10",
													"statements": [
														{
															"expression": {
																"id": 1654,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1650,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1594,
																		"src": "9347:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1652,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "9349:11:10",
																	"memberName": "creatorVote",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 968,
																	"src": "9347:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1653,
																	"name": "winner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1587,
																	"src": "9363:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9347:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1655,
															"nodeType": "ExpressionStatement",
															"src": "9347:22:10"
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1666,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1585,
															"src": "9470:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1667,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "9474:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1668,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9478:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "9474:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1669,
															"name": "winner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1587,
															"src": "9486:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1665,
														"name": "MatchResultSubmitted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1031,
														"src": "9449:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$__$",
															"typeString": "function (uint256,address,address)"
														}
													},
													"id": 1670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9449:44:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1671,
												"nodeType": "EmitStatement",
												"src": "9444:49:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1684,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1678,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1672,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1594,
																"src": "9508:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1673,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9510:11:10",
															"memberName": "creatorVote",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 968,
															"src": "9508:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1676,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9533:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1675,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9525:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1674,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9525:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1677,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9525:10:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "9508:27:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1683,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1679,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1594,
																"src": "9539:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1680,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9541:11:10",
															"memberName": "creatorVote",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 968,
															"src": "9539:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1681,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1594,
																"src": "9556:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1682,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9558:12:10",
															"memberName": "opponentVote",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 970,
															"src": "9556:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "9539:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9508:62:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1691,
												"nodeType": "IfStatement",
												"src": "9504:112:10",
												"trueBody": {
													"id": 1690,
													"nodeType": "Block",
													"src": "9572:44:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1686,
																		"name": "id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1585,
																		"src": "9594:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1687,
																		"name": "winner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1587,
																		"src": "9598:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1685,
																	"name": "_payout",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2098,
																	"src": "9586:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$",
																		"typeString": "function (uint256,address)"
																	}
																},
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9586:19:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1689,
															"nodeType": "ExpressionStatement",
															"src": "9586:19:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1583,
										"nodeType": "StructuredDocumentation",
										"src": "8676:194:10",
										"text": " @notice Players submit their view of the winner. If both match, payout immediately.\n @param id Match id\n @param winner Claimed winner (must be creator or opponent)"
									},
									"functionSelector": "92dc24bb",
									"id": 1693,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1590,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1589,
												"name": "nonReentrant",
												"nameLocations": [
													"8934:12:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "8934:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "8934:12:10"
										}
									],
									"name": "submitResult",
									"nameLocation": "8884:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1585,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "8905:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1693,
												"src": "8897:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8897:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "winner",
												"nameLocation": "8917:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1693,
												"src": "8909:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8909:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8896:28:10"
									},
									"returnParameters": {
										"id": 1591,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8947:0:10"
									},
									"scope": 2099,
									"src": "8875:747:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1757,
										"nodeType": "Block",
										"src": "9829:361:10",
										"statements": [
											{
												"assignments": [
													1705
												],
												"declarations": [
													{
														"constant": false,
														"id": 1705,
														"mutability": "mutable",
														"name": "m",
														"nameLocation": "9853:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 1757,
														"src": "9839:15:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
															"typeString": "struct Connect4Stakes.Match"
														},
														"typeName": {
															"id": 1704,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1703,
																"name": "Match",
																"nameLocations": [
																	"9839:5:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 971,
																"src": "9839:5:10"
															},
															"referencedDeclaration": 971,
															"src": "9839:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1709,
												"initialValue": {
													"baseExpression": {
														"id": 1706,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "9857:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1708,
													"indexExpression": {
														"id": 1707,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1696,
														"src": "9865:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9857:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9839:29:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_Status_$941",
																"typeString": "enum Connect4Stakes.Status"
															},
															"id": 1715,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1711,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1705,
																	"src": "9886:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1712,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9888:6:10",
																"memberName": "status",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 964,
																"src": "9886:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1713,
																	"name": "Status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 941,
																	"src": "9898:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																		"typeString": "type(enum Connect4Stakes.Status)"
																	}
																},
																"id": 1714,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9905:7:10",
																"memberName": "Started",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 938,
																"src": "9898:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"src": "9886:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f742073746172746564",
															"id": 1716,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9914:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e77010d1cd84746d4d55bc64a3553056b308493098e3085151b4455976f44694",
																"typeString": "literal_string \"not started\""
															},
															"value": "not started"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e77010d1cd84746d4d55bc64a3553056b308493098e3085151b4455976f44694",
																"typeString": "literal_string \"not started\""
															}
														],
														"id": 1710,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9878:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9878:50:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1718,
												"nodeType": "ExpressionStatement",
												"src": "9878:50:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1735,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1729,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 1724,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1720,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "9959:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1721,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "9963:6:10",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "9959:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"expression": {
																			"id": 1722,
																			"name": "m",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1705,
																			"src": "9973:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																				"typeString": "struct Connect4Stakes.Match storage pointer"
																			}
																		},
																		"id": 1723,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "9975:8:10",
																		"memberName": "resolver",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 959,
																		"src": "9973:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "9959:24:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1725,
																		"name": "isResolver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 983,
																		"src": "9987:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 1728,
																	"indexExpression": {
																		"expression": {
																			"id": 1726,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "9998:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1727,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10002:6:10",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "9998:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "9987:22:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "9959:50:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1730,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "10013:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1731,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10017:6:10",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "10013:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1732,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 67,
																		"src": "10027:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1733,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10027:7:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "10013:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9959:75:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f7420617574686f72697a6564",
															"id": 1736,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10048:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8aed0440c9cacb4460ecdd12f6aff03c27cace39666d71f0946a6f3e9022a4a1",
																"typeString": "literal_string \"not authorized\""
															},
															"value": "not authorized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8aed0440c9cacb4460ecdd12f6aff03c27cace39666d71f0946a6f3e9022a4a1",
																"typeString": "literal_string \"not authorized\""
															}
														],
														"id": 1719,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9938:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9938:136:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1738,
												"nodeType": "ExpressionStatement",
												"src": "9938:136:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1748,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1743,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1740,
																	"name": "winner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1698,
																	"src": "10092:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1741,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1705,
																		"src": "10102:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1742,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10104:7:10",
																	"memberName": "creator",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 943,
																	"src": "10102:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "10092:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1747,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1744,
																	"name": "winner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1698,
																	"src": "10115:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1745,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1705,
																		"src": "10125:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1746,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10127:8:10",
																	"memberName": "opponent",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 945,
																	"src": "10125:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "10115:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "10092:43:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e76616c69642077696e6e6572",
															"id": 1749,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10137:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c56dbfab86a8095d8b3b515716b57963eb8ec1ec16cfebc2bf1171a7b908c614",
																"typeString": "literal_string \"invalid winner\""
															},
															"value": "invalid winner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c56dbfab86a8095d8b3b515716b57963eb8ec1ec16cfebc2bf1171a7b908c614",
																"typeString": "literal_string \"invalid winner\""
															}
														],
														"id": 1739,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10084:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10084:70:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1751,
												"nodeType": "ExpressionStatement",
												"src": "10084:70:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1753,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1696,
															"src": "10172:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1754,
															"name": "winner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1698,
															"src": "10176:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1752,
														"name": "_payout",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2098,
														"src": "10164:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address)"
														}
													},
													"id": 1755,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10164:19:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1756,
												"nodeType": "ExpressionStatement",
												"src": "10164:19:10"
											}
										]
									},
									"documentation": {
										"id": 1694,
										"nodeType": "StructuredDocumentation",
										"src": "9628:120:10",
										"text": " @notice Referee path: per-match resolver, global resolver, or owner can finalize anytime after start."
									},
									"functionSelector": "e73b54a5",
									"id": 1758,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1701,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1700,
												"name": "nonReentrant",
												"nameLocations": [
													"9816:12:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "9816:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "9816:12:10"
										}
									],
									"name": "resolveByReferee",
									"nameLocation": "9762:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1696,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "9787:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "9779:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1695,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9779:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1698,
												"mutability": "mutable",
												"name": "winner",
												"nameLocation": "9799:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "9791:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1697,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9791:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9778:28:10"
									},
									"returnParameters": {
										"id": 1702,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9829:0:10"
									},
									"scope": 2099,
									"src": "9753:437:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1822,
										"nodeType": "Block",
										"src": "10434:368:10",
										"statements": [
											{
												"assignments": [
													1768
												],
												"declarations": [
													{
														"constant": false,
														"id": 1768,
														"mutability": "mutable",
														"name": "m",
														"nameLocation": "10458:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 1822,
														"src": "10444:15:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
															"typeString": "struct Connect4Stakes.Match"
														},
														"typeName": {
															"id": 1767,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1766,
																"name": "Match",
																"nameLocations": [
																	"10444:5:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 971,
																"src": "10444:5:10"
															},
															"referencedDeclaration": 971,
															"src": "10444:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1772,
												"initialValue": {
													"baseExpression": {
														"id": 1769,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "10462:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1771,
													"indexExpression": {
														"id": 1770,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1761,
														"src": "10470:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10462:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10444:29:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_Status_$941",
																"typeString": "enum Connect4Stakes.Status"
															},
															"id": 1778,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1774,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1768,
																	"src": "10491:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1775,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10493:6:10",
																"memberName": "status",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 964,
																"src": "10491:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1776,
																	"name": "Status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 941,
																	"src": "10503:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																		"typeString": "type(enum Connect4Stakes.Status)"
																	}
																},
																"id": 1777,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "10510:7:10",
																"memberName": "Created",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 937,
																"src": "10503:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"src": "10491:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "77726f6e6720737461747573",
															"id": 1779,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10519:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50688e722d66ec3cbe88c727539b3178758ef4bdacf62c71f725ff7fc5b431e4",
																"typeString": "literal_string \"wrong status\""
															},
															"value": "wrong status"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50688e722d66ec3cbe88c727539b3178758ef4bdacf62c71f725ff7fc5b431e4",
																"typeString": "literal_string \"wrong status\""
															}
														],
														"id": 1773,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10483:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10483:51:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1781,
												"nodeType": "ExpressionStatement",
												"src": "10483:51:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1787,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1783,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "10552:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1784,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10558:9:10",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "10552:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"id": 1785,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1768,
																	"src": "10570:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1786,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10572:13:10",
																"memberName": "startDeadline",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 953,
																"src": "10570:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint40",
																	"typeString": "uint40"
																}
															},
															"src": "10552:33:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6a6f696e2077696e646f77206e6f74206f766572",
															"id": 1788,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10587:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_feaabb5ce7608bed8570ad769fab6533d4c6de1d53d0b7fbabb325b3b494c083",
																"typeString": "literal_string \"join window not over\""
															},
															"value": "join window not over"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_feaabb5ce7608bed8570ad769fab6533d4c6de1d53d0b7fbabb325b3b494c083",
																"typeString": "literal_string \"join window not over\""
															}
														],
														"id": 1782,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10544:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10544:66:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1790,
												"nodeType": "ExpressionStatement",
												"src": "10544:66:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1792,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "10628:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1793,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10632:6:10",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "10628:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1794,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1768,
																	"src": "10642:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1795,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10644:7:10",
																"memberName": "creator",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 943,
																"src": "10642:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10628:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6f6e6c792063726561746f72",
															"id": 1797,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10653:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6062e555f70deb1ff2dfd4fda06937887a2a3a7db3bc7c48953073540fee91a6",
																"typeString": "literal_string \"only creator\""
															},
															"value": "only creator"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6062e555f70deb1ff2dfd4fda06937887a2a3a7db3bc7c48953073540fee91a6",
																"typeString": "literal_string \"only creator\""
															}
														],
														"id": 1791,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10620:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10620:48:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1799,
												"nodeType": "ExpressionStatement",
												"src": "10620:48:10"
											},
											{
												"expression": {
													"id": 1805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1800,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1768,
															"src": "10679:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1802,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "10681:6:10",
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "10679:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1803,
															"name": "Status",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 941,
															"src": "10690:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																"typeString": "type(enum Connect4Stakes.Status)"
															}
														},
														"id": 1804,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10697:8:10",
														"memberName": "Refunded",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 940,
														"src": "10690:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"src": "10679:26:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$941",
														"typeString": "enum Connect4Stakes.Status"
													}
												},
												"id": 1806,
												"nodeType": "ExpressionStatement",
												"src": "10679:26:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1812,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1768,
																"src": "10744:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1813,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "10746:7:10",
															"memberName": "creator",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 943,
															"src": "10744:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1814,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1768,
																"src": "10755:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1815,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "10757:5:10",
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 949,
															"src": "10755:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1808,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1768,
																		"src": "10722:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1809,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10724:5:10",
																	"memberName": "token",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 947,
																	"src": "10722:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1807,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "10715:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$380_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10715:15:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 1811,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10731:12:10",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 461,
														"src": "10715:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10715:48:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1817,
												"nodeType": "ExpressionStatement",
												"src": "10715:48:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1819,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1761,
															"src": "10792:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1818,
														"name": "MatchRefunded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1045,
														"src": "10778:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10778:17:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1821,
												"nodeType": "EmitStatement",
												"src": "10773:22:10"
											}
										]
									},
									"documentation": {
										"id": 1759,
										"nodeType": "StructuredDocumentation",
										"src": "10279:90:10",
										"text": " @notice If nobody joined by startDeadline, creator refunds their stake."
									},
									"functionSelector": "99ac48b4",
									"id": 1823,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1764,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1763,
												"name": "nonReentrant",
												"nameLocations": [
													"10421:12:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "10421:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "10421:12:10"
										}
									],
									"name": "refundIfUnjoined",
									"nameLocation": "10383:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "10408:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "10400:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1760,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10400:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10399:12:10"
									},
									"returnParameters": {
										"id": 1765,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10434:0:10"
									},
									"scope": 2099,
									"src": "10374:428:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1928,
										"nodeType": "Block",
										"src": "11067:646:10",
										"statements": [
											{
												"assignments": [
													1833
												],
												"declarations": [
													{
														"constant": false,
														"id": 1833,
														"mutability": "mutable",
														"name": "m",
														"nameLocation": "11091:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 1928,
														"src": "11077:15:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
															"typeString": "struct Connect4Stakes.Match"
														},
														"typeName": {
															"id": 1832,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1831,
																"name": "Match",
																"nameLocations": [
																	"11077:5:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 971,
																"src": "11077:5:10"
															},
															"referencedDeclaration": 971,
															"src": "11077:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1837,
												"initialValue": {
													"baseExpression": {
														"id": 1834,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "11095:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1836,
													"indexExpression": {
														"id": 1835,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1826,
														"src": "11103:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "11095:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11077:29:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_Status_$941",
																"typeString": "enum Connect4Stakes.Status"
															},
															"id": 1843,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1839,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1833,
																	"src": "11124:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1840,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11126:6:10",
																"memberName": "status",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 964,
																"src": "11124:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1841,
																	"name": "Status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 941,
																	"src": "11136:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																		"typeString": "type(enum Connect4Stakes.Status)"
																	}
																},
																"id": 1842,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "11143:7:10",
																"memberName": "Started",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 938,
																"src": "11136:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"src": "11124:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "77726f6e6720737461747573",
															"id": 1844,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11152:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50688e722d66ec3cbe88c727539b3178758ef4bdacf62c71f725ff7fc5b431e4",
																"typeString": "literal_string \"wrong status\""
															},
															"value": "wrong status"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50688e722d66ec3cbe88c727539b3178758ef4bdacf62c71f725ff7fc5b431e4",
																"typeString": "literal_string \"wrong status\""
															}
														],
														"id": 1838,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11116:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11116:51:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1846,
												"nodeType": "ExpressionStatement",
												"src": "11116:51:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1848,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "11185:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1849,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11191:9:10",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "11185:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"id": 1850,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1833,
																	"src": "11203:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1851,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11205:15:10",
																"memberName": "resolveDeadline",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 955,
																"src": "11203:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint40",
																	"typeString": "uint40"
																}
															},
															"src": "11185:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7265736f6c76652077696e646f77206e6f74206f766572",
															"id": 1853,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11222:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_43e02c71fb5d089256a0588861868d09d5bba498a0e588cf143ac0ba681d99d0",
																"typeString": "literal_string \"resolve window not over\""
															},
															"value": "resolve window not over"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_43e02c71fb5d089256a0588861868d09d5bba498a0e588cf143ac0ba681d99d0",
																"typeString": "literal_string \"resolve window not over\""
															}
														],
														"id": 1847,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11177:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11177:71:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1855,
												"nodeType": "ExpressionStatement",
												"src": "11177:71:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1861,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1857,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "11266:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1858,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "11270:6:10",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "11266:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1859,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1833,
																		"src": "11280:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1860,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "11282:7:10",
																	"memberName": "creator",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 943,
																	"src": "11280:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "11266:23:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1866,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1862,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "11293:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1863,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "11297:6:10",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "11293:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1864,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1833,
																		"src": "11307:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1865,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "11309:8:10",
																	"memberName": "opponent",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 945,
																	"src": "11307:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "11293:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "11266:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f74206120706c61796572",
															"id": 1868,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11319:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_75d5d77860329b1dd26af47f52b5bca28d4ef4a7082f0a660a77ad74190069e9",
																"typeString": "literal_string \"not a player\""
															},
															"value": "not a player"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_75d5d77860329b1dd26af47f52b5bca28d4ef4a7082f0a660a77ad74190069e9",
																"typeString": "literal_string \"not a player\""
															}
														],
														"id": 1856,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11258:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11258:76:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1870,
												"nodeType": "ExpressionStatement",
												"src": "11258:76:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "11352:38:10",
															"subExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 1872,
																		"name": "withdrawnAfterTimeout",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 997,
																		"src": "11353:21:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																			"typeString": "mapping(uint256 => mapping(address => bool))"
																		}
																	},
																	"id": 1874,
																	"indexExpression": {
																		"id": 1873,
																		"name": "id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1826,
																		"src": "11375:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11353:25:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 1877,
																"indexExpression": {
																	"expression": {
																		"id": 1875,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "11379:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1876,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "11383:6:10",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "11379:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11353:37:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "616c72656164792077697468647261776e",
															"id": 1879,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11392:19:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6fd12d571f76a003d78664fd2ca56a35ce4ffbcbd66d69d67441376d88c4c4ee",
																"typeString": "literal_string \"already withdrawn\""
															},
															"value": "already withdrawn"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6fd12d571f76a003d78664fd2ca56a35ce4ffbcbd66d69d67441376d88c4c4ee",
																"typeString": "literal_string \"already withdrawn\""
															}
														],
														"id": 1871,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11344:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11344:68:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1881,
												"nodeType": "ExpressionStatement",
												"src": "11344:68:10"
											},
											{
												"expression": {
													"id": 1889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1882,
																"name": "withdrawnAfterTimeout",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 997,
																"src": "11423:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(uint256 => mapping(address => bool))"
																}
															},
															"id": 1886,
															"indexExpression": {
																"id": 1883,
																"name": "id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "11445:2:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11423:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1887,
														"indexExpression": {
															"expression": {
																"id": 1884,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "11449:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11453:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "11449:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11423:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1888,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11463:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "11423:44:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1890,
												"nodeType": "ExpressionStatement",
												"src": "11423:44:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1896,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "11506:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1897,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11510:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "11506:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1898,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1833,
																"src": "11518:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1899,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11520:5:10",
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 949,
															"src": "11518:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1892,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1833,
																		"src": "11484:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1893,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "11486:5:10",
																	"memberName": "token",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 947,
																	"src": "11484:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1891,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "11477:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$380_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11477:15:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 1895,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11493:12:10",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 461,
														"src": "11477:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11477:49:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1901,
												"nodeType": "ExpressionStatement",
												"src": "11477:49:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 1902,
																"name": "withdrawnAfterTimeout",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 997,
																"src": "11541:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(uint256 => mapping(address => bool))"
																}
															},
															"id": 1904,
															"indexExpression": {
																"id": 1903,
																"name": "id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "11563:2:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11541:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1907,
														"indexExpression": {
															"expression": {
																"id": 1905,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1833,
																"src": "11567:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1906,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11569:7:10",
															"memberName": "creator",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 943,
															"src": "11567:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "11541:36:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 1908,
																"name": "withdrawnAfterTimeout",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 997,
																"src": "11581:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(uint256 => mapping(address => bool))"
																}
															},
															"id": 1910,
															"indexExpression": {
																"id": 1909,
																"name": "id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "11603:2:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11581:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1913,
														"indexExpression": {
															"expression": {
																"id": 1911,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1833,
																"src": "11607:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 1912,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11609:8:10",
															"memberName": "opponent",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 945,
															"src": "11607:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "11581:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "11541:77:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1927,
												"nodeType": "IfStatement",
												"src": "11537:170:10",
												"trueBody": {
													"id": 1926,
													"nodeType": "Block",
													"src": "11620:87:10",
													"statements": [
														{
															"expression": {
																"id": 1920,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1915,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1833,
																		"src": "11634:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1917,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "11636:6:10",
																	"memberName": "status",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 964,
																	"src": "11634:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Status_$941",
																		"typeString": "enum Connect4Stakes.Status"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1918,
																		"name": "Status",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 941,
																		"src": "11645:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																			"typeString": "type(enum Connect4Stakes.Status)"
																		}
																	},
																	"id": 1919,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "11652:8:10",
																	"memberName": "Refunded",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 940,
																	"src": "11645:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Status_$941",
																		"typeString": "enum Connect4Stakes.Status"
																	}
																},
																"src": "11634:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"id": 1921,
															"nodeType": "ExpressionStatement",
															"src": "11634:26:10"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 1923,
																		"name": "id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1826,
																		"src": "11693:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1922,
																	"name": "MatchRefunded",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1045,
																	"src": "11679:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 1924,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11679:17:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1925,
															"nodeType": "EmitStatement",
															"src": "11674:22:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1824,
										"nodeType": "StructuredDocumentation",
										"src": "10808:190:10",
										"text": " @notice If a started match wasn't resolved by resolveDeadline, each player can withdraw their own stake.\n         When both have withdrawn, status flips to Refunded."
									},
									"functionSelector": "63feb74e",
									"id": 1929,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1829,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1828,
												"name": "nonReentrant",
												"nameLocations": [
													"11054:12:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "11054:12:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "11054:12:10"
										}
									],
									"name": "withdrawAfterTimeout",
									"nameLocation": "11012:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1826,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "11041:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1929,
												"src": "11033:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1825,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11033:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11032:12:10"
									},
									"returnParameters": {
										"id": 1830,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11067:0:10"
									},
									"scope": 2099,
									"src": "11003:710:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1941,
										"nodeType": "Block",
										"src": "11851:35:10",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1937,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "11868:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1939,
													"indexExpression": {
														"id": 1938,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1931,
														"src": "11876:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "11868:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"functionReturnParameters": 1936,
												"id": 1940,
												"nodeType": "Return",
												"src": "11861:18:10"
											}
										]
									},
									"functionSelector": "3d092b3d",
									"id": 1942,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMatch",
									"nameLocation": "11793:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1931,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "11810:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1942,
												"src": "11802:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11802:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11801:12:10"
									},
									"returnParameters": {
										"id": 1936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1935,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1942,
												"src": "11837:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Match_$971_memory_ptr",
													"typeString": "struct Connect4Stakes.Match"
												},
												"typeName": {
													"id": 1934,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1933,
														"name": "Match",
														"nameLocations": [
															"11837:5:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 971,
														"src": "11837:5:10"
													},
													"referencedDeclaration": 971,
													"src": "11837:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
														"typeString": "struct Connect4Stakes.Match"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11836:14:10"
									},
									"scope": 2099,
									"src": "11784:102:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1984,
										"nodeType": "Block",
										"src": "11947:242:10",
										"statements": [
											{
												"assignments": [
													1951
												],
												"declarations": [
													{
														"constant": false,
														"id": 1951,
														"mutability": "mutable",
														"name": "m",
														"nameLocation": "11971:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 1984,
														"src": "11957:15:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
															"typeString": "struct Connect4Stakes.Match"
														},
														"typeName": {
															"id": 1950,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1949,
																"name": "Match",
																"nameLocations": [
																	"11957:5:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 971,
																"src": "11957:5:10"
															},
															"referencedDeclaration": 971,
															"src": "11957:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1955,
												"initialValue": {
													"baseExpression": {
														"id": 1952,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "11975:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1954,
													"indexExpression": {
														"id": 1953,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1944,
														"src": "11983:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "11975:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11957:29:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_Status_$941",
														"typeString": "enum Connect4Stakes.Status"
													},
													"id": 1960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1956,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1951,
															"src": "12000:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1957,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12002:6:10",
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "12000:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1958,
															"name": "Status",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 941,
															"src": "12012:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																"typeString": "type(enum Connect4Stakes.Status)"
															}
														},
														"id": 1959,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "12019:7:10",
														"memberName": "Created",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 937,
														"src": "12012:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"src": "12000:26:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1967,
												"nodeType": "IfStatement",
												"src": "11996:55:10",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"expression": {
																	"id": 1963,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1951,
																	"src": "12043:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 1964,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12045:5:10",
																"memberName": "stake",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 949,
																"src": "12043:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint96",
																	"typeString": "uint96"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint96",
																	"typeString": "uint96"
																}
															],
															"id": 1962,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12035:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1961,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12035:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1965,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12035:16:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"functionReturnParameters": 1948,
													"id": 1966,
													"nodeType": "Return",
													"src": "12028:23:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_Status_$941",
														"typeString": "enum Connect4Stakes.Status"
													},
													"id": 1972,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1968,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1951,
															"src": "12093:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 1969,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12095:6:10",
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "12093:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1970,
															"name": "Status",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 941,
															"src": "12105:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																"typeString": "type(enum Connect4Stakes.Status)"
															}
														},
														"id": 1971,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "12112:7:10",
														"memberName": "Started",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 938,
														"src": "12105:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"src": "12093:26:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1981,
												"nodeType": "IfStatement",
												"src": "12089:59:10",
												"trueBody": {
													"expression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1979,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1975,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1951,
																		"src": "12136:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 1976,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "12138:5:10",
																	"memberName": "stake",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 949,
																	"src": "12136:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint96",
																		"typeString": "uint96"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint96",
																		"typeString": "uint96"
																	}
																],
																"id": 1974,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12128:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1973,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12128:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1977,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12128:16:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"hexValue": "32",
															"id": 1978,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12147:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "12128:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"functionReturnParameters": 1948,
													"id": 1980,
													"nodeType": "Return",
													"src": "12121:27:10"
												}
											},
											{
												"expression": {
													"hexValue": "30",
													"id": 1982,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12181:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1948,
												"id": 1983,
												"nodeType": "Return",
												"src": "12174:8:10"
											}
										]
									},
									"functionSelector": "c1eecdc6",
									"id": 1985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "pot",
									"nameLocation": "11901:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1944,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "11913:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "11905:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11905:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11904:12:10"
									},
									"returnParameters": {
										"id": 1948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1947,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "11938:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1946,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11938:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11937:9:10"
									},
									"scope": 2099,
									"src": "11892:297:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2097,
										"nodeType": "Block",
										"src": "12317:618:10",
										"statements": [
											{
												"assignments": [
													1994
												],
												"declarations": [
													{
														"constant": false,
														"id": 1994,
														"mutability": "mutable",
														"name": "m",
														"nameLocation": "12341:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 2097,
														"src": "12327:15:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
															"typeString": "struct Connect4Stakes.Match"
														},
														"typeName": {
															"id": 1993,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1992,
																"name": "Match",
																"nameLocations": [
																	"12327:5:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 971,
																"src": "12327:5:10"
															},
															"referencedDeclaration": 971,
															"src": "12327:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1998,
												"initialValue": {
													"baseExpression": {
														"id": 1995,
														"name": "matches",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "12345:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Match_$971_storage_$",
															"typeString": "mapping(uint256 => struct Connect4Stakes.Match storage ref)"
														}
													},
													"id": 1997,
													"indexExpression": {
														"id": 1996,
														"name": "id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1987,
														"src": "12353:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "12345:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Match_$971_storage",
														"typeString": "struct Connect4Stakes.Match storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12327:29:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_Status_$941",
																"typeString": "enum Connect4Stakes.Status"
															},
															"id": 2004,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2000,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1994,
																	"src": "12374:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 2001,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12376:6:10",
																"memberName": "status",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 964,
																"src": "12374:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 2002,
																	"name": "Status",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 941,
																	"src": "12386:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																		"typeString": "type(enum Connect4Stakes.Status)"
																	}
																},
																"id": 2003,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "12393:7:10",
																"memberName": "Started",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 938,
																"src": "12386:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Status_$941",
																	"typeString": "enum Connect4Stakes.Status"
																}
															},
															"src": "12374:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f7420616374697665",
															"id": 2005,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12402:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_374887c79e5a9f3adf9601b701978b870ca80533f58f38de7839ddf877b30a77",
																"typeString": "literal_string \"not active\""
															},
															"value": "not active"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_374887c79e5a9f3adf9601b701978b870ca80533f58f38de7839ddf877b30a77",
																"typeString": "literal_string \"not active\""
															}
														],
														"id": 1999,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12366:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2006,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12366:49:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2007,
												"nodeType": "ExpressionStatement",
												"src": "12366:49:10"
											},
											{
												"expression": {
													"id": 2013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2008,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1994,
															"src": "12425:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 2010,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "12427:6:10",
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 964,
														"src": "12425:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2011,
															"name": "Status",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 941,
															"src": "12436:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_Status_$941_$",
																"typeString": "type(enum Connect4Stakes.Status)"
															}
														},
														"id": 2012,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "12443:8:10",
														"memberName": "Resolved",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 939,
														"src": "12436:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Status_$941",
															"typeString": "enum Connect4Stakes.Status"
														}
													},
													"src": "12425:26:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Status_$941",
														"typeString": "enum Connect4Stakes.Status"
													}
												},
												"id": 2014,
												"nodeType": "ExpressionStatement",
												"src": "12425:26:10"
											},
											{
												"expression": {
													"id": 2019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2015,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1994,
															"src": "12461:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																"typeString": "struct Connect4Stakes.Match storage pointer"
															}
														},
														"id": 2017,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "12463:6:10",
														"memberName": "winner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 966,
														"src": "12461:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2018,
														"name": "winner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1989,
														"src": "12472:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12461:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2020,
												"nodeType": "ExpressionStatement",
												"src": "12461:17:10"
											},
											{
												"assignments": [
													2022
												],
												"declarations": [
													{
														"constant": false,
														"id": 2022,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "12497:5:10",
														"nodeType": "VariableDeclaration",
														"scope": 2097,
														"src": "12489:13:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2021,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12489:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2030,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 2025,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1994,
																	"src": "12513:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																		"typeString": "struct Connect4Stakes.Match storage pointer"
																	}
																},
																"id": 2026,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12515:5:10",
																"memberName": "stake",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 949,
																"src": "12513:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint96",
																	"typeString": "uint96"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint96",
																	"typeString": "uint96"
																}
															],
															"id": 2024,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12505:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2023,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12505:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 2027,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12505:16:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "32",
														"id": 2028,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12524:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "12505:20:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12489:36:10"
											},
											{
												"assignments": [
													2032
												],
												"declarations": [
													{
														"constant": false,
														"id": 2032,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "12543:3:10",
														"nodeType": "VariableDeclaration",
														"scope": 2097,
														"src": "12535:11:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2031,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12535:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2034,
												"initialValue": {
													"hexValue": "30",
													"id": 2033,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12549:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12535:15:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2040,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2035,
															"name": "feeRecipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 973,
															"src": "12565:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2038,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2037,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12581:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2036,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "12581:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 2039,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12581:10:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "12565:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"id": 2044,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2041,
																"name": "m",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1994,
																"src": "12595:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																	"typeString": "struct Connect4Stakes.Match storage pointer"
																}
															},
															"id": 2042,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "12597:6:10",
															"memberName": "feeBps",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 961,
															"src": "12595:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2043,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12606:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "12595:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "12565:42:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2074,
												"nodeType": "IfStatement",
												"src": "12561:224:10",
												"trueBody": {
													"id": 2073,
													"nodeType": "Block",
													"src": "12609:176:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		},
																		"id": 2050,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2047,
																				"name": "m",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1994,
																				"src": "12631:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																					"typeString": "struct Connect4Stakes.Match storage pointer"
																				}
																			},
																			"id": 2048,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "12633:6:10",
																			"memberName": "feeBps",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 961,
																			"src": "12631:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint16",
																				"typeString": "uint16"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<=",
																		"rightExpression": {
																			"id": 2049,
																			"name": "maxFeeBps",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 979,
																			"src": "12643:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint16",
																				"typeString": "uint16"
																			}
																		},
																		"src": "12631:21:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "666565203e206d6178",
																		"id": 2051,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "12654:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_474163d5543fada8fa412386e364eac49fc27e71125e081300f2fc05dbd15446",
																			"typeString": "literal_string \"fee > max\""
																		},
																		"value": "fee > max"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_474163d5543fada8fa412386e364eac49fc27e71125e081300f2fc05dbd15446",
																			"typeString": "literal_string \"fee > max\""
																		}
																	],
																	"id": 2046,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "12623:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2052,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12623:43:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2053,
															"nodeType": "ExpressionStatement",
															"src": "12623:43:10"
														},
														{
															"expression": {
																"id": 2062,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2054,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2032,
																	"src": "12680:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2061,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2058,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2055,
																					"name": "total",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2022,
																					"src": "12687:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"expression": {
																						"id": 2056,
																						"name": "m",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1994,
																						"src": "12695:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																							"typeString": "struct Connect4Stakes.Match storage pointer"
																						}
																					},
																					"id": 2057,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "12697:6:10",
																					"memberName": "feeBps",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 961,
																					"src": "12695:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint16",
																						"typeString": "uint16"
																					}
																				},
																				"src": "12687:16:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2059,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "12686:18:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"hexValue": "31305f303030",
																		"id": 2060,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "12707:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10000_by_1",
																			"typeString": "int_const 10000"
																		},
																		"value": "10_000"
																	},
																	"src": "12686:27:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "12680:33:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2063,
															"nodeType": "ExpressionStatement",
															"src": "12680:33:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2069,
																		"name": "feeRecipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 973,
																		"src": "12756:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2070,
																		"name": "fee",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2032,
																		"src": "12770:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"expression": {
																					"id": 2065,
																					"name": "m",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1994,
																					"src": "12734:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																						"typeString": "struct Connect4Stakes.Match storage pointer"
																					}
																				},
																				"id": 2066,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "12736:5:10",
																				"memberName": "token",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 947,
																				"src": "12734:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 2064,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 380,
																			"src": "12727:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$380_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 2067,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12727:15:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 2068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "12743:12:10",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 461,
																	"src": "12727:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 2071,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12727:47:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2072,
															"nodeType": "ExpressionStatement",
															"src": "12727:47:10"
														}
													]
												}
											},
											{
												"assignments": [
													2076
												],
												"declarations": [
													{
														"constant": false,
														"id": 2076,
														"mutability": "mutable",
														"name": "prize",
														"nameLocation": "12803:5:10",
														"nodeType": "VariableDeclaration",
														"scope": 2097,
														"src": "12795:13:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2075,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12795:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2080,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2079,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2077,
														"name": "total",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2022,
														"src": "12811:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 2078,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2032,
														"src": "12819:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12811:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12795:27:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2086,
															"name": "winner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1989,
															"src": "12861:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2087,
															"name": "prize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2076,
															"src": "12869:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 2082,
																		"name": "m",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1994,
																		"src": "12839:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Match_$971_storage_ptr",
																			"typeString": "struct Connect4Stakes.Match storage pointer"
																		}
																	},
																	"id": 2083,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "12841:5:10",
																	"memberName": "token",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 947,
																	"src": "12839:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2081,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "12832:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$380_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 2084,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12832:15:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 2085,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12848:12:10",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 461,
														"src": "12832:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 2088,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12832:43:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2089,
												"nodeType": "ExpressionStatement",
												"src": "12832:43:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2091,
															"name": "id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1987,
															"src": "12905:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2092,
															"name": "winner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1989,
															"src": "12909:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2093,
															"name": "prize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2076,
															"src": "12917:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2094,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2032,
															"src": "12924:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2090,
														"name": "MatchResolved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1041,
														"src": "12891:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,address,uint256,uint256)"
														}
													},
													"id": 2095,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12891:37:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2096,
												"nodeType": "EmitStatement",
												"src": "12886:42:10"
											}
										]
									},
									"id": 2098,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_payout",
									"nameLocation": "12272:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1987,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "12288:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 2098,
												"src": "12280:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12280:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1989,
												"mutability": "mutable",
												"name": "winner",
												"nameLocation": "12300:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2098,
												"src": "12292:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1988,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12292:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12279:28:10"
									},
									"returnParameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12317:0:10"
									},
									"scope": 2099,
									"src": "12263:672:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2100,
							"src": "912:12025:10",
							"usedErrors": [
								13,
								18,
								428
							],
							"usedEvents": [
								24,
								1015,
								1023,
								1031,
								1041,
								1045,
								1051,
								1059
							]
						}
					],
					"src": "32:12906:10"
				},
				"id": 10
			}
		}
	}
}